
tdse-tp0_04-hw_sw_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000374c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  08003858  08003858  00013858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a94  08003a94  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08003a94  08003a94  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a94  08003a94  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a94  08003a94  00013a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a98  08003a98  00013a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003a9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000078  08003b14  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  08003b14  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000814b  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000148b  00000000  00000000  000281ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000618  00000000  00000000  00029678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005a0  00000000  00000000  00029c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e4a  00000000  00000000  0002a230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007448  00000000  00000000  0004107a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000827d2  00000000  00000000  000484c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cac94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000271c  00000000  00000000  000cace8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08003840 	.word	0x08003840

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08003840 	.word	0x08003840

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b08e      	sub	sp, #56	; 0x38
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000162:	f001 fc4f 	bl	8001a04 <initialise_monitor_handles>

	char s[50];

	char *p;

	p = s;
 8000166:	463b      	mov	r3, r7
 8000168:	637b      	str	r3, [r7, #52]	; 0x34
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800016a:	f000 fa05 	bl	8000578 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800016e:	f000 f821 	bl	80001b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000172:	f000 f88b 	bl	800028c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000176:	f000 f85f 	bl	8000238 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Hello World!\n");
 800017a:	480a      	ldr	r0, [pc, #40]	; (80001a4 <main+0x48>)
 800017c:	f001 fef8 	bl	8001f70 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("Enter string:\n");
 8000180:	4809      	ldr	r0, [pc, #36]	; (80001a8 <main+0x4c>)
 8000182:	f001 fef5 	bl	8001f70 <puts>

	  scanf("%s", p);
 8000186:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000188:	4808      	ldr	r0, [pc, #32]	; (80001ac <main+0x50>)
 800018a:	f001 ff09 	bl	8001fa0 <iscanf>

	  printf("\nReceived string: ");
 800018e:	4808      	ldr	r0, [pc, #32]	; (80001b0 <main+0x54>)
 8000190:	f001 fe54 	bl	8001e3c <iprintf>

	  printf(p);
 8000194:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000196:	f001 fe51 	bl	8001e3c <iprintf>

	  printf("\n");
 800019a:	200a      	movs	r0, #10
 800019c:	f001 fe66 	bl	8001e6c <putchar>
	  printf("Enter string:\n");
 80001a0:	e7ee      	b.n	8000180 <main+0x24>
 80001a2:	bf00      	nop
 80001a4:	08003858 	.word	0x08003858
 80001a8:	08003868 	.word	0x08003868
 80001ac:	08003878 	.word	0x08003878
 80001b0:	0800387c 	.word	0x0800387c

080001b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b090      	sub	sp, #64	; 0x40
 80001b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ba:	f107 0318 	add.w	r3, r7, #24
 80001be:	2228      	movs	r2, #40	; 0x28
 80001c0:	2100      	movs	r1, #0
 80001c2:	4618      	mov	r0, r3
 80001c4:	f001 fdd7 	bl	8001d76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c8:	1d3b      	adds	r3, r7, #4
 80001ca:	2200      	movs	r2, #0
 80001cc:	601a      	str	r2, [r3, #0]
 80001ce:	605a      	str	r2, [r3, #4]
 80001d0:	609a      	str	r2, [r3, #8]
 80001d2:	60da      	str	r2, [r3, #12]
 80001d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001d6:	2302      	movs	r3, #2
 80001d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001da:	2301      	movs	r3, #1
 80001dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001de:	2310      	movs	r3, #16
 80001e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001e2:	2302      	movs	r3, #2
 80001e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001e6:	2300      	movs	r3, #0
 80001e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001ea:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80001ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f0:	f107 0318 	add.w	r3, r7, #24
 80001f4:	4618      	mov	r0, r3
 80001f6:	f000 fced 	bl	8000bd4 <HAL_RCC_OscConfig>
 80001fa:	4603      	mov	r3, r0
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d001      	beq.n	8000204 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000200:	f000 f8b2 	bl	8000368 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000204:	230f      	movs	r3, #15
 8000206:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000208:	2302      	movs	r3, #2
 800020a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800020c:	2300      	movs	r3, #0
 800020e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000210:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000214:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000216:	2300      	movs	r3, #0
 8000218:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	2102      	movs	r1, #2
 800021e:	4618      	mov	r0, r3
 8000220:	f000 ff58 	bl	80010d4 <HAL_RCC_ClockConfig>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800022a:	f000 f89d 	bl	8000368 <Error_Handler>
  }
}
 800022e:	bf00      	nop
 8000230:	3740      	adds	r7, #64	; 0x40
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
	...

08000238 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800023c:	4b11      	ldr	r3, [pc, #68]	; (8000284 <MX_USART2_UART_Init+0x4c>)
 800023e:	4a12      	ldr	r2, [pc, #72]	; (8000288 <MX_USART2_UART_Init+0x50>)
 8000240:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000242:	4b10      	ldr	r3, [pc, #64]	; (8000284 <MX_USART2_UART_Init+0x4c>)
 8000244:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000248:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800024a:	4b0e      	ldr	r3, [pc, #56]	; (8000284 <MX_USART2_UART_Init+0x4c>)
 800024c:	2200      	movs	r2, #0
 800024e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000250:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <MX_USART2_UART_Init+0x4c>)
 8000252:	2200      	movs	r2, #0
 8000254:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000256:	4b0b      	ldr	r3, [pc, #44]	; (8000284 <MX_USART2_UART_Init+0x4c>)
 8000258:	2200      	movs	r2, #0
 800025a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800025c:	4b09      	ldr	r3, [pc, #36]	; (8000284 <MX_USART2_UART_Init+0x4c>)
 800025e:	220c      	movs	r2, #12
 8000260:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000262:	4b08      	ldr	r3, [pc, #32]	; (8000284 <MX_USART2_UART_Init+0x4c>)
 8000264:	2200      	movs	r2, #0
 8000266:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000268:	4b06      	ldr	r3, [pc, #24]	; (8000284 <MX_USART2_UART_Init+0x4c>)
 800026a:	2200      	movs	r2, #0
 800026c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800026e:	4805      	ldr	r0, [pc, #20]	; (8000284 <MX_USART2_UART_Init+0x4c>)
 8000270:	f001 f8be 	bl	80013f0 <HAL_UART_Init>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800027a:	f000 f875 	bl	8000368 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800027e:	bf00      	nop
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	2000014c 	.word	0x2000014c
 8000288:	40004400 	.word	0x40004400

0800028c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b088      	sub	sp, #32
 8000290:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000292:	f107 0310 	add.w	r3, r7, #16
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]
 800029c:	609a      	str	r2, [r3, #8]
 800029e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002a0:	4b2d      	ldr	r3, [pc, #180]	; (8000358 <MX_GPIO_Init+0xcc>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	4a2c      	ldr	r2, [pc, #176]	; (8000358 <MX_GPIO_Init+0xcc>)
 80002a6:	f043 0310 	orr.w	r3, r3, #16
 80002aa:	6193      	str	r3, [r2, #24]
 80002ac:	4b2a      	ldr	r3, [pc, #168]	; (8000358 <MX_GPIO_Init+0xcc>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	f003 0310 	and.w	r3, r3, #16
 80002b4:	60fb      	str	r3, [r7, #12]
 80002b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002b8:	4b27      	ldr	r3, [pc, #156]	; (8000358 <MX_GPIO_Init+0xcc>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	4a26      	ldr	r2, [pc, #152]	; (8000358 <MX_GPIO_Init+0xcc>)
 80002be:	f043 0320 	orr.w	r3, r3, #32
 80002c2:	6193      	str	r3, [r2, #24]
 80002c4:	4b24      	ldr	r3, [pc, #144]	; (8000358 <MX_GPIO_Init+0xcc>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	f003 0320 	and.w	r3, r3, #32
 80002cc:	60bb      	str	r3, [r7, #8]
 80002ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d0:	4b21      	ldr	r3, [pc, #132]	; (8000358 <MX_GPIO_Init+0xcc>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	4a20      	ldr	r2, [pc, #128]	; (8000358 <MX_GPIO_Init+0xcc>)
 80002d6:	f043 0304 	orr.w	r3, r3, #4
 80002da:	6193      	str	r3, [r2, #24]
 80002dc:	4b1e      	ldr	r3, [pc, #120]	; (8000358 <MX_GPIO_Init+0xcc>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	f003 0304 	and.w	r3, r3, #4
 80002e4:	607b      	str	r3, [r7, #4]
 80002e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002e8:	4b1b      	ldr	r3, [pc, #108]	; (8000358 <MX_GPIO_Init+0xcc>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	4a1a      	ldr	r2, [pc, #104]	; (8000358 <MX_GPIO_Init+0xcc>)
 80002ee:	f043 0308 	orr.w	r3, r3, #8
 80002f2:	6193      	str	r3, [r2, #24]
 80002f4:	4b18      	ldr	r3, [pc, #96]	; (8000358 <MX_GPIO_Init+0xcc>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	f003 0308 	and.w	r3, r3, #8
 80002fc:	603b      	str	r3, [r7, #0]
 80002fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000300:	2200      	movs	r2, #0
 8000302:	2120      	movs	r1, #32
 8000304:	4815      	ldr	r0, [pc, #84]	; (800035c <MX_GPIO_Init+0xd0>)
 8000306:	f000 fc2b 	bl	8000b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800030a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800030e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000310:	4b13      	ldr	r3, [pc, #76]	; (8000360 <MX_GPIO_Init+0xd4>)
 8000312:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000314:	2300      	movs	r3, #0
 8000316:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000318:	f107 0310 	add.w	r3, r7, #16
 800031c:	4619      	mov	r1, r3
 800031e:	4811      	ldr	r0, [pc, #68]	; (8000364 <MX_GPIO_Init+0xd8>)
 8000320:	f000 fa9a 	bl	8000858 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000324:	2320      	movs	r3, #32
 8000326:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000328:	2301      	movs	r3, #1
 800032a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032c:	2300      	movs	r3, #0
 800032e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000330:	2302      	movs	r3, #2
 8000332:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000334:	f107 0310 	add.w	r3, r7, #16
 8000338:	4619      	mov	r1, r3
 800033a:	4808      	ldr	r0, [pc, #32]	; (800035c <MX_GPIO_Init+0xd0>)
 800033c:	f000 fa8c 	bl	8000858 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000340:	2200      	movs	r2, #0
 8000342:	2100      	movs	r1, #0
 8000344:	2028      	movs	r0, #40	; 0x28
 8000346:	f000 fa50 	bl	80007ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800034a:	2028      	movs	r0, #40	; 0x28
 800034c:	f000 fa69 	bl	8000822 <HAL_NVIC_EnableIRQ>

}
 8000350:	bf00      	nop
 8000352:	3720      	adds	r7, #32
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	40021000 	.word	0x40021000
 800035c:	40010800 	.word	0x40010800
 8000360:	10110000 	.word	0x10110000
 8000364:	40011000 	.word	0x40011000

08000368 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800036c:	b672      	cpsid	i
}
 800036e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000370:	e7fe      	b.n	8000370 <Error_Handler+0x8>
	...

08000374 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000374:	b480      	push	{r7}
 8000376:	b085      	sub	sp, #20
 8000378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800037a:	4b15      	ldr	r3, [pc, #84]	; (80003d0 <HAL_MspInit+0x5c>)
 800037c:	699b      	ldr	r3, [r3, #24]
 800037e:	4a14      	ldr	r2, [pc, #80]	; (80003d0 <HAL_MspInit+0x5c>)
 8000380:	f043 0301 	orr.w	r3, r3, #1
 8000384:	6193      	str	r3, [r2, #24]
 8000386:	4b12      	ldr	r3, [pc, #72]	; (80003d0 <HAL_MspInit+0x5c>)
 8000388:	699b      	ldr	r3, [r3, #24]
 800038a:	f003 0301 	and.w	r3, r3, #1
 800038e:	60bb      	str	r3, [r7, #8]
 8000390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000392:	4b0f      	ldr	r3, [pc, #60]	; (80003d0 <HAL_MspInit+0x5c>)
 8000394:	69db      	ldr	r3, [r3, #28]
 8000396:	4a0e      	ldr	r2, [pc, #56]	; (80003d0 <HAL_MspInit+0x5c>)
 8000398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800039c:	61d3      	str	r3, [r2, #28]
 800039e:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <HAL_MspInit+0x5c>)
 80003a0:	69db      	ldr	r3, [r3, #28]
 80003a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003a6:	607b      	str	r3, [r7, #4]
 80003a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003aa:	4b0a      	ldr	r3, [pc, #40]	; (80003d4 <HAL_MspInit+0x60>)
 80003ac:	685b      	ldr	r3, [r3, #4]
 80003ae:	60fb      	str	r3, [r7, #12]
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003b6:	60fb      	str	r3, [r7, #12]
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003be:	60fb      	str	r3, [r7, #12]
 80003c0:	4a04      	ldr	r2, [pc, #16]	; (80003d4 <HAL_MspInit+0x60>)
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003c6:	bf00      	nop
 80003c8:	3714      	adds	r7, #20
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr
 80003d0:	40021000 	.word	0x40021000
 80003d4:	40010000 	.word	0x40010000

080003d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b088      	sub	sp, #32
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e0:	f107 0310 	add.w	r3, r7, #16
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	605a      	str	r2, [r3, #4]
 80003ea:	609a      	str	r2, [r3, #8]
 80003ec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4a15      	ldr	r2, [pc, #84]	; (8000448 <HAL_UART_MspInit+0x70>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d123      	bne.n	8000440 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80003f8:	4b14      	ldr	r3, [pc, #80]	; (800044c <HAL_UART_MspInit+0x74>)
 80003fa:	69db      	ldr	r3, [r3, #28]
 80003fc:	4a13      	ldr	r2, [pc, #76]	; (800044c <HAL_UART_MspInit+0x74>)
 80003fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000402:	61d3      	str	r3, [r2, #28]
 8000404:	4b11      	ldr	r3, [pc, #68]	; (800044c <HAL_UART_MspInit+0x74>)
 8000406:	69db      	ldr	r3, [r3, #28]
 8000408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800040c:	60fb      	str	r3, [r7, #12]
 800040e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000410:	4b0e      	ldr	r3, [pc, #56]	; (800044c <HAL_UART_MspInit+0x74>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	4a0d      	ldr	r2, [pc, #52]	; (800044c <HAL_UART_MspInit+0x74>)
 8000416:	f043 0304 	orr.w	r3, r3, #4
 800041a:	6193      	str	r3, [r2, #24]
 800041c:	4b0b      	ldr	r3, [pc, #44]	; (800044c <HAL_UART_MspInit+0x74>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	f003 0304 	and.w	r3, r3, #4
 8000424:	60bb      	str	r3, [r7, #8]
 8000426:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000428:	230c      	movs	r3, #12
 800042a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800042c:	2302      	movs	r3, #2
 800042e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000430:	2302      	movs	r3, #2
 8000432:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000434:	f107 0310 	add.w	r3, r7, #16
 8000438:	4619      	mov	r1, r3
 800043a:	4805      	ldr	r0, [pc, #20]	; (8000450 <HAL_UART_MspInit+0x78>)
 800043c:	f000 fa0c 	bl	8000858 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000440:	bf00      	nop
 8000442:	3720      	adds	r7, #32
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	40004400 	.word	0x40004400
 800044c:	40021000 	.word	0x40021000
 8000450:	40010800 	.word	0x40010800

08000454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000458:	e7fe      	b.n	8000458 <NMI_Handler+0x4>

0800045a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800045a:	b480      	push	{r7}
 800045c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800045e:	e7fe      	b.n	800045e <HardFault_Handler+0x4>

08000460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000464:	e7fe      	b.n	8000464 <MemManage_Handler+0x4>

08000466 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000466:	b480      	push	{r7}
 8000468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800046a:	e7fe      	b.n	800046a <BusFault_Handler+0x4>

0800046c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000470:	e7fe      	b.n	8000470 <UsageFault_Handler+0x4>

08000472 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000472:	b480      	push	{r7}
 8000474:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000476:	bf00      	nop
 8000478:	46bd      	mov	sp, r7
 800047a:	bc80      	pop	{r7}
 800047c:	4770      	bx	lr

0800047e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800047e:	b480      	push	{r7}
 8000480:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000482:	bf00      	nop
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr

0800048a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800048a:	b480      	push	{r7}
 800048c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800048e:	bf00      	nop
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr

08000496 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000496:	b580      	push	{r7, lr}
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800049a:	f000 f8b3 	bl	8000604 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}

080004a2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80004a2:	b580      	push	{r7, lr}
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80004a6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80004aa:	f000 fb71 	bl	8000b90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
	...

080004b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b086      	sub	sp, #24
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004bc:	4a14      	ldr	r2, [pc, #80]	; (8000510 <_sbrk+0x5c>)
 80004be:	4b15      	ldr	r3, [pc, #84]	; (8000514 <_sbrk+0x60>)
 80004c0:	1ad3      	subs	r3, r2, r3
 80004c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004c4:	697b      	ldr	r3, [r7, #20]
 80004c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004c8:	4b13      	ldr	r3, [pc, #76]	; (8000518 <_sbrk+0x64>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d102      	bne.n	80004d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004d0:	4b11      	ldr	r3, [pc, #68]	; (8000518 <_sbrk+0x64>)
 80004d2:	4a12      	ldr	r2, [pc, #72]	; (800051c <_sbrk+0x68>)
 80004d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004d6:	4b10      	ldr	r3, [pc, #64]	; (8000518 <_sbrk+0x64>)
 80004d8:	681a      	ldr	r2, [r3, #0]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4413      	add	r3, r2
 80004de:	693a      	ldr	r2, [r7, #16]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	d207      	bcs.n	80004f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004e4:	f001 fb08 	bl	8001af8 <__errno>
 80004e8:	4603      	mov	r3, r0
 80004ea:	220c      	movs	r2, #12
 80004ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004f2:	e009      	b.n	8000508 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004f4:	4b08      	ldr	r3, [pc, #32]	; (8000518 <_sbrk+0x64>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004fa:	4b07      	ldr	r3, [pc, #28]	; (8000518 <_sbrk+0x64>)
 80004fc:	681a      	ldr	r2, [r3, #0]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4413      	add	r3, r2
 8000502:	4a05      	ldr	r2, [pc, #20]	; (8000518 <_sbrk+0x64>)
 8000504:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000506:	68fb      	ldr	r3, [r7, #12]
}
 8000508:	4618      	mov	r0, r3
 800050a:	3718      	adds	r7, #24
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20005000 	.word	0x20005000
 8000514:	00000400 	.word	0x00000400
 8000518:	20000094 	.word	0x20000094
 800051c:	200001a8 	.word	0x200001a8

08000520 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr

0800052c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800052c:	f7ff fff8 	bl	8000520 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000530:	480b      	ldr	r0, [pc, #44]	; (8000560 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000532:	490c      	ldr	r1, [pc, #48]	; (8000564 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000534:	4a0c      	ldr	r2, [pc, #48]	; (8000568 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000538:	e002      	b.n	8000540 <LoopCopyDataInit>

0800053a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800053a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800053c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800053e:	3304      	adds	r3, #4

08000540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000544:	d3f9      	bcc.n	800053a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000546:	4a09      	ldr	r2, [pc, #36]	; (800056c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000548:	4c09      	ldr	r4, [pc, #36]	; (8000570 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800054a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800054c:	e001      	b.n	8000552 <LoopFillZerobss>

0800054e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800054e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000550:	3204      	adds	r2, #4

08000552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000554:	d3fb      	bcc.n	800054e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000556:	f001 fbe7 	bl	8001d28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800055a:	f7ff fdff 	bl	800015c <main>
  bx lr
 800055e:	4770      	bx	lr
  ldr r0, =_sdata
 8000560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000564:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000568:	08003a9c 	.word	0x08003a9c
  ldr r2, =_sbss
 800056c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000570:	200001a8 	.word	0x200001a8

08000574 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000574:	e7fe      	b.n	8000574 <ADC1_2_IRQHandler>
	...

08000578 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800057c:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <HAL_Init+0x28>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a07      	ldr	r2, [pc, #28]	; (80005a0 <HAL_Init+0x28>)
 8000582:	f043 0310 	orr.w	r3, r3, #16
 8000586:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000588:	2003      	movs	r0, #3
 800058a:	f000 f923 	bl	80007d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800058e:	2000      	movs	r0, #0
 8000590:	f000 f808 	bl	80005a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000594:	f7ff feee 	bl	8000374 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000598:	2300      	movs	r3, #0
}
 800059a:	4618      	mov	r0, r3
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40022000 	.word	0x40022000

080005a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005ac:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <HAL_InitTick+0x54>)
 80005ae:	681a      	ldr	r2, [r3, #0]
 80005b0:	4b12      	ldr	r3, [pc, #72]	; (80005fc <HAL_InitTick+0x58>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	4619      	mov	r1, r3
 80005b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80005be:	fbb2 f3f3 	udiv	r3, r2, r3
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 f93b 	bl	800083e <HAL_SYSTICK_Config>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ce:	2301      	movs	r3, #1
 80005d0:	e00e      	b.n	80005f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2b0f      	cmp	r3, #15
 80005d6:	d80a      	bhi.n	80005ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005d8:	2200      	movs	r2, #0
 80005da:	6879      	ldr	r1, [r7, #4]
 80005dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005e0:	f000 f903 	bl	80007ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005e4:	4a06      	ldr	r2, [pc, #24]	; (8000600 <HAL_InitTick+0x5c>)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005ea:	2300      	movs	r3, #0
 80005ec:	e000      	b.n	80005f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000000 	.word	0x20000000
 80005fc:	20000008 	.word	0x20000008
 8000600:	20000004 	.word	0x20000004

08000604 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000608:	4b05      	ldr	r3, [pc, #20]	; (8000620 <HAL_IncTick+0x1c>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	461a      	mov	r2, r3
 800060e:	4b05      	ldr	r3, [pc, #20]	; (8000624 <HAL_IncTick+0x20>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4413      	add	r3, r2
 8000614:	4a03      	ldr	r2, [pc, #12]	; (8000624 <HAL_IncTick+0x20>)
 8000616:	6013      	str	r3, [r2, #0]
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr
 8000620:	20000008 	.word	0x20000008
 8000624:	20000194 	.word	0x20000194

08000628 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  return uwTick;
 800062c:	4b02      	ldr	r3, [pc, #8]	; (8000638 <HAL_GetTick+0x10>)
 800062e:	681b      	ldr	r3, [r3, #0]
}
 8000630:	4618      	mov	r0, r3
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr
 8000638:	20000194 	.word	0x20000194

0800063c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f003 0307 	and.w	r3, r3, #7
 800064a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <__NVIC_SetPriorityGrouping+0x44>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000652:	68ba      	ldr	r2, [r7, #8]
 8000654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000658:	4013      	ands	r3, r2
 800065a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800066c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800066e:	4a04      	ldr	r2, [pc, #16]	; (8000680 <__NVIC_SetPriorityGrouping+0x44>)
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	60d3      	str	r3, [r2, #12]
}
 8000674:	bf00      	nop
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <__NVIC_GetPriorityGrouping+0x18>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	0a1b      	lsrs	r3, r3, #8
 800068e:	f003 0307 	and.w	r3, r3, #7
}
 8000692:	4618      	mov	r0, r3
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	db0b      	blt.n	80006ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	f003 021f 	and.w	r2, r3, #31
 80006b8:	4906      	ldr	r1, [pc, #24]	; (80006d4 <__NVIC_EnableIRQ+0x34>)
 80006ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006be:	095b      	lsrs	r3, r3, #5
 80006c0:	2001      	movs	r0, #1
 80006c2:	fa00 f202 	lsl.w	r2, r0, r2
 80006c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr
 80006d4:	e000e100 	.word	0xe000e100

080006d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	6039      	str	r1, [r7, #0]
 80006e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	db0a      	blt.n	8000702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	490c      	ldr	r1, [pc, #48]	; (8000724 <__NVIC_SetPriority+0x4c>)
 80006f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f6:	0112      	lsls	r2, r2, #4
 80006f8:	b2d2      	uxtb	r2, r2
 80006fa:	440b      	add	r3, r1
 80006fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000700:	e00a      	b.n	8000718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	b2da      	uxtb	r2, r3
 8000706:	4908      	ldr	r1, [pc, #32]	; (8000728 <__NVIC_SetPriority+0x50>)
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	f003 030f 	and.w	r3, r3, #15
 800070e:	3b04      	subs	r3, #4
 8000710:	0112      	lsls	r2, r2, #4
 8000712:	b2d2      	uxtb	r2, r2
 8000714:	440b      	add	r3, r1
 8000716:	761a      	strb	r2, [r3, #24]
}
 8000718:	bf00      	nop
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	e000e100 	.word	0xe000e100
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800072c:	b480      	push	{r7}
 800072e:	b089      	sub	sp, #36	; 0x24
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	f003 0307 	and.w	r3, r3, #7
 800073e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000740:	69fb      	ldr	r3, [r7, #28]
 8000742:	f1c3 0307 	rsb	r3, r3, #7
 8000746:	2b04      	cmp	r3, #4
 8000748:	bf28      	it	cs
 800074a:	2304      	movcs	r3, #4
 800074c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	3304      	adds	r3, #4
 8000752:	2b06      	cmp	r3, #6
 8000754:	d902      	bls.n	800075c <NVIC_EncodePriority+0x30>
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	3b03      	subs	r3, #3
 800075a:	e000      	b.n	800075e <NVIC_EncodePriority+0x32>
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000760:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000764:	69bb      	ldr	r3, [r7, #24]
 8000766:	fa02 f303 	lsl.w	r3, r2, r3
 800076a:	43da      	mvns	r2, r3
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	401a      	ands	r2, r3
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000774:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	fa01 f303 	lsl.w	r3, r1, r3
 800077e:	43d9      	mvns	r1, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000784:	4313      	orrs	r3, r2
         );
}
 8000786:	4618      	mov	r0, r3
 8000788:	3724      	adds	r7, #36	; 0x24
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr

08000790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	3b01      	subs	r3, #1
 800079c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007a0:	d301      	bcc.n	80007a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007a2:	2301      	movs	r3, #1
 80007a4:	e00f      	b.n	80007c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007a6:	4a0a      	ldr	r2, [pc, #40]	; (80007d0 <SysTick_Config+0x40>)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	3b01      	subs	r3, #1
 80007ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007ae:	210f      	movs	r1, #15
 80007b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007b4:	f7ff ff90 	bl	80006d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007b8:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <SysTick_Config+0x40>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007be:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <SysTick_Config+0x40>)
 80007c0:	2207      	movs	r2, #7
 80007c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007c4:	2300      	movs	r3, #0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	e000e010 	.word	0xe000e010

080007d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f7ff ff2d 	bl	800063c <__NVIC_SetPriorityGrouping>
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b086      	sub	sp, #24
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	4603      	mov	r3, r0
 80007f2:	60b9      	str	r1, [r7, #8]
 80007f4:	607a      	str	r2, [r7, #4]
 80007f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007fc:	f7ff ff42 	bl	8000684 <__NVIC_GetPriorityGrouping>
 8000800:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	68b9      	ldr	r1, [r7, #8]
 8000806:	6978      	ldr	r0, [r7, #20]
 8000808:	f7ff ff90 	bl	800072c <NVIC_EncodePriority>
 800080c:	4602      	mov	r2, r0
 800080e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000812:	4611      	mov	r1, r2
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff ff5f 	bl	80006d8 <__NVIC_SetPriority>
}
 800081a:	bf00      	nop
 800081c:	3718      	adds	r7, #24
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b082      	sub	sp, #8
 8000826:	af00      	add	r7, sp, #0
 8000828:	4603      	mov	r3, r0
 800082a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800082c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff ff35 	bl	80006a0 <__NVIC_EnableIRQ>
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b082      	sub	sp, #8
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f7ff ffa2 	bl	8000790 <SysTick_Config>
 800084c:	4603      	mov	r3, r0
}
 800084e:	4618      	mov	r0, r3
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000858:	b480      	push	{r7}
 800085a:	b08b      	sub	sp, #44	; 0x2c
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000866:	2300      	movs	r3, #0
 8000868:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800086a:	e169      	b.n	8000b40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800086c:	2201      	movs	r2, #1
 800086e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000870:	fa02 f303 	lsl.w	r3, r2, r3
 8000874:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	69fa      	ldr	r2, [r7, #28]
 800087c:	4013      	ands	r3, r2
 800087e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000880:	69ba      	ldr	r2, [r7, #24]
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	429a      	cmp	r2, r3
 8000886:	f040 8158 	bne.w	8000b3a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	4a9a      	ldr	r2, [pc, #616]	; (8000af8 <HAL_GPIO_Init+0x2a0>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d05e      	beq.n	8000952 <HAL_GPIO_Init+0xfa>
 8000894:	4a98      	ldr	r2, [pc, #608]	; (8000af8 <HAL_GPIO_Init+0x2a0>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d875      	bhi.n	8000986 <HAL_GPIO_Init+0x12e>
 800089a:	4a98      	ldr	r2, [pc, #608]	; (8000afc <HAL_GPIO_Init+0x2a4>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d058      	beq.n	8000952 <HAL_GPIO_Init+0xfa>
 80008a0:	4a96      	ldr	r2, [pc, #600]	; (8000afc <HAL_GPIO_Init+0x2a4>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d86f      	bhi.n	8000986 <HAL_GPIO_Init+0x12e>
 80008a6:	4a96      	ldr	r2, [pc, #600]	; (8000b00 <HAL_GPIO_Init+0x2a8>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d052      	beq.n	8000952 <HAL_GPIO_Init+0xfa>
 80008ac:	4a94      	ldr	r2, [pc, #592]	; (8000b00 <HAL_GPIO_Init+0x2a8>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d869      	bhi.n	8000986 <HAL_GPIO_Init+0x12e>
 80008b2:	4a94      	ldr	r2, [pc, #592]	; (8000b04 <HAL_GPIO_Init+0x2ac>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d04c      	beq.n	8000952 <HAL_GPIO_Init+0xfa>
 80008b8:	4a92      	ldr	r2, [pc, #584]	; (8000b04 <HAL_GPIO_Init+0x2ac>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d863      	bhi.n	8000986 <HAL_GPIO_Init+0x12e>
 80008be:	4a92      	ldr	r2, [pc, #584]	; (8000b08 <HAL_GPIO_Init+0x2b0>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d046      	beq.n	8000952 <HAL_GPIO_Init+0xfa>
 80008c4:	4a90      	ldr	r2, [pc, #576]	; (8000b08 <HAL_GPIO_Init+0x2b0>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d85d      	bhi.n	8000986 <HAL_GPIO_Init+0x12e>
 80008ca:	2b12      	cmp	r3, #18
 80008cc:	d82a      	bhi.n	8000924 <HAL_GPIO_Init+0xcc>
 80008ce:	2b12      	cmp	r3, #18
 80008d0:	d859      	bhi.n	8000986 <HAL_GPIO_Init+0x12e>
 80008d2:	a201      	add	r2, pc, #4	; (adr r2, 80008d8 <HAL_GPIO_Init+0x80>)
 80008d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d8:	08000953 	.word	0x08000953
 80008dc:	0800092d 	.word	0x0800092d
 80008e0:	0800093f 	.word	0x0800093f
 80008e4:	08000981 	.word	0x08000981
 80008e8:	08000987 	.word	0x08000987
 80008ec:	08000987 	.word	0x08000987
 80008f0:	08000987 	.word	0x08000987
 80008f4:	08000987 	.word	0x08000987
 80008f8:	08000987 	.word	0x08000987
 80008fc:	08000987 	.word	0x08000987
 8000900:	08000987 	.word	0x08000987
 8000904:	08000987 	.word	0x08000987
 8000908:	08000987 	.word	0x08000987
 800090c:	08000987 	.word	0x08000987
 8000910:	08000987 	.word	0x08000987
 8000914:	08000987 	.word	0x08000987
 8000918:	08000987 	.word	0x08000987
 800091c:	08000935 	.word	0x08000935
 8000920:	08000949 	.word	0x08000949
 8000924:	4a79      	ldr	r2, [pc, #484]	; (8000b0c <HAL_GPIO_Init+0x2b4>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d013      	beq.n	8000952 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800092a:	e02c      	b.n	8000986 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	623b      	str	r3, [r7, #32]
          break;
 8000932:	e029      	b.n	8000988 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	3304      	adds	r3, #4
 800093a:	623b      	str	r3, [r7, #32]
          break;
 800093c:	e024      	b.n	8000988 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	68db      	ldr	r3, [r3, #12]
 8000942:	3308      	adds	r3, #8
 8000944:	623b      	str	r3, [r7, #32]
          break;
 8000946:	e01f      	b.n	8000988 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	330c      	adds	r3, #12
 800094e:	623b      	str	r3, [r7, #32]
          break;
 8000950:	e01a      	b.n	8000988 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	689b      	ldr	r3, [r3, #8]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d102      	bne.n	8000960 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800095a:	2304      	movs	r3, #4
 800095c:	623b      	str	r3, [r7, #32]
          break;
 800095e:	e013      	b.n	8000988 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	2b01      	cmp	r3, #1
 8000966:	d105      	bne.n	8000974 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000968:	2308      	movs	r3, #8
 800096a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	69fa      	ldr	r2, [r7, #28]
 8000970:	611a      	str	r2, [r3, #16]
          break;
 8000972:	e009      	b.n	8000988 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000974:	2308      	movs	r3, #8
 8000976:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	69fa      	ldr	r2, [r7, #28]
 800097c:	615a      	str	r2, [r3, #20]
          break;
 800097e:	e003      	b.n	8000988 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000980:	2300      	movs	r3, #0
 8000982:	623b      	str	r3, [r7, #32]
          break;
 8000984:	e000      	b.n	8000988 <HAL_GPIO_Init+0x130>
          break;
 8000986:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000988:	69bb      	ldr	r3, [r7, #24]
 800098a:	2bff      	cmp	r3, #255	; 0xff
 800098c:	d801      	bhi.n	8000992 <HAL_GPIO_Init+0x13a>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	e001      	b.n	8000996 <HAL_GPIO_Init+0x13e>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	3304      	adds	r3, #4
 8000996:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	2bff      	cmp	r3, #255	; 0xff
 800099c:	d802      	bhi.n	80009a4 <HAL_GPIO_Init+0x14c>
 800099e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	e002      	b.n	80009aa <HAL_GPIO_Init+0x152>
 80009a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a6:	3b08      	subs	r3, #8
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	210f      	movs	r1, #15
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	fa01 f303 	lsl.w	r3, r1, r3
 80009b8:	43db      	mvns	r3, r3
 80009ba:	401a      	ands	r2, r3
 80009bc:	6a39      	ldr	r1, [r7, #32]
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	fa01 f303 	lsl.w	r3, r1, r3
 80009c4:	431a      	orrs	r2, r3
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	f000 80b1 	beq.w	8000b3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009d8:	4b4d      	ldr	r3, [pc, #308]	; (8000b10 <HAL_GPIO_Init+0x2b8>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	4a4c      	ldr	r2, [pc, #304]	; (8000b10 <HAL_GPIO_Init+0x2b8>)
 80009de:	f043 0301 	orr.w	r3, r3, #1
 80009e2:	6193      	str	r3, [r2, #24]
 80009e4:	4b4a      	ldr	r3, [pc, #296]	; (8000b10 <HAL_GPIO_Init+0x2b8>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	60bb      	str	r3, [r7, #8]
 80009ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009f0:	4a48      	ldr	r2, [pc, #288]	; (8000b14 <HAL_GPIO_Init+0x2bc>)
 80009f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f4:	089b      	lsrs	r3, r3, #2
 80009f6:	3302      	adds	r3, #2
 80009f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a00:	f003 0303 	and.w	r3, r3, #3
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	220f      	movs	r2, #15
 8000a08:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	68fa      	ldr	r2, [r7, #12]
 8000a10:	4013      	ands	r3, r2
 8000a12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4a40      	ldr	r2, [pc, #256]	; (8000b18 <HAL_GPIO_Init+0x2c0>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d013      	beq.n	8000a44 <HAL_GPIO_Init+0x1ec>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a3f      	ldr	r2, [pc, #252]	; (8000b1c <HAL_GPIO_Init+0x2c4>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d00d      	beq.n	8000a40 <HAL_GPIO_Init+0x1e8>
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a3e      	ldr	r2, [pc, #248]	; (8000b20 <HAL_GPIO_Init+0x2c8>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d007      	beq.n	8000a3c <HAL_GPIO_Init+0x1e4>
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4a3d      	ldr	r2, [pc, #244]	; (8000b24 <HAL_GPIO_Init+0x2cc>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d101      	bne.n	8000a38 <HAL_GPIO_Init+0x1e0>
 8000a34:	2303      	movs	r3, #3
 8000a36:	e006      	b.n	8000a46 <HAL_GPIO_Init+0x1ee>
 8000a38:	2304      	movs	r3, #4
 8000a3a:	e004      	b.n	8000a46 <HAL_GPIO_Init+0x1ee>
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	e002      	b.n	8000a46 <HAL_GPIO_Init+0x1ee>
 8000a40:	2301      	movs	r3, #1
 8000a42:	e000      	b.n	8000a46 <HAL_GPIO_Init+0x1ee>
 8000a44:	2300      	movs	r3, #0
 8000a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a48:	f002 0203 	and.w	r2, r2, #3
 8000a4c:	0092      	lsls	r2, r2, #2
 8000a4e:	4093      	lsls	r3, r2
 8000a50:	68fa      	ldr	r2, [r7, #12]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a56:	492f      	ldr	r1, [pc, #188]	; (8000b14 <HAL_GPIO_Init+0x2bc>)
 8000a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5a:	089b      	lsrs	r3, r3, #2
 8000a5c:	3302      	adds	r3, #2
 8000a5e:	68fa      	ldr	r2, [r7, #12]
 8000a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d006      	beq.n	8000a7e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a70:	4b2d      	ldr	r3, [pc, #180]	; (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000a72:	689a      	ldr	r2, [r3, #8]
 8000a74:	492c      	ldr	r1, [pc, #176]	; (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000a76:	69bb      	ldr	r3, [r7, #24]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	608b      	str	r3, [r1, #8]
 8000a7c:	e006      	b.n	8000a8c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a7e:	4b2a      	ldr	r3, [pc, #168]	; (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000a80:	689a      	ldr	r2, [r3, #8]
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	43db      	mvns	r3, r3
 8000a86:	4928      	ldr	r1, [pc, #160]	; (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000a88:	4013      	ands	r3, r2
 8000a8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d006      	beq.n	8000aa6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a98:	4b23      	ldr	r3, [pc, #140]	; (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000a9a:	68da      	ldr	r2, [r3, #12]
 8000a9c:	4922      	ldr	r1, [pc, #136]	; (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	60cb      	str	r3, [r1, #12]
 8000aa4:	e006      	b.n	8000ab4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000aa6:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000aa8:	68da      	ldr	r2, [r3, #12]
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	43db      	mvns	r3, r3
 8000aae:	491e      	ldr	r1, [pc, #120]	; (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d006      	beq.n	8000ace <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ac0:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000ac2:	685a      	ldr	r2, [r3, #4]
 8000ac4:	4918      	ldr	r1, [pc, #96]	; (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	604b      	str	r3, [r1, #4]
 8000acc:	e006      	b.n	8000adc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ace:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000ad0:	685a      	ldr	r2, [r3, #4]
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	43db      	mvns	r3, r3
 8000ad6:	4914      	ldr	r1, [pc, #80]	; (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000ad8:	4013      	ands	r3, r2
 8000ada:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d021      	beq.n	8000b2c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	490e      	ldr	r1, [pc, #56]	; (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	600b      	str	r3, [r1, #0]
 8000af4:	e021      	b.n	8000b3a <HAL_GPIO_Init+0x2e2>
 8000af6:	bf00      	nop
 8000af8:	10320000 	.word	0x10320000
 8000afc:	10310000 	.word	0x10310000
 8000b00:	10220000 	.word	0x10220000
 8000b04:	10210000 	.word	0x10210000
 8000b08:	10120000 	.word	0x10120000
 8000b0c:	10110000 	.word	0x10110000
 8000b10:	40021000 	.word	0x40021000
 8000b14:	40010000 	.word	0x40010000
 8000b18:	40010800 	.word	0x40010800
 8000b1c:	40010c00 	.word	0x40010c00
 8000b20:	40011000 	.word	0x40011000
 8000b24:	40011400 	.word	0x40011400
 8000b28:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b2c:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <HAL_GPIO_Init+0x304>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	43db      	mvns	r3, r3
 8000b34:	4909      	ldr	r1, [pc, #36]	; (8000b5c <HAL_GPIO_Init+0x304>)
 8000b36:	4013      	ands	r3, r2
 8000b38:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b46:	fa22 f303 	lsr.w	r3, r2, r3
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	f47f ae8e 	bne.w	800086c <HAL_GPIO_Init+0x14>
  }
}
 8000b50:	bf00      	nop
 8000b52:	bf00      	nop
 8000b54:	372c      	adds	r7, #44	; 0x2c
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr
 8000b5c:	40010400 	.word	0x40010400

08000b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	807b      	strh	r3, [r7, #2]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b70:	787b      	ldrb	r3, [r7, #1]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d003      	beq.n	8000b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b76:	887a      	ldrh	r2, [r7, #2]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b7c:	e003      	b.n	8000b86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b7e:	887b      	ldrh	r3, [r7, #2]
 8000b80:	041a      	lsls	r2, r3, #16
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	611a      	str	r2, [r3, #16]
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr

08000b90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000b9a:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b9c:	695a      	ldr	r2, [r3, #20]
 8000b9e:	88fb      	ldrh	r3, [r7, #6]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d006      	beq.n	8000bb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ba6:	4a05      	ldr	r2, [pc, #20]	; (8000bbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ba8:	88fb      	ldrh	r3, [r7, #6]
 8000baa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000bac:	88fb      	ldrh	r3, [r7, #6]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 f806 	bl	8000bc0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40010400 	.word	0x40010400

08000bc0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr

08000bd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d101      	bne.n	8000be6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	e26c      	b.n	80010c0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f000 8087 	beq.w	8000d02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bf4:	4b92      	ldr	r3, [pc, #584]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f003 030c 	and.w	r3, r3, #12
 8000bfc:	2b04      	cmp	r3, #4
 8000bfe:	d00c      	beq.n	8000c1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c00:	4b8f      	ldr	r3, [pc, #572]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f003 030c 	and.w	r3, r3, #12
 8000c08:	2b08      	cmp	r3, #8
 8000c0a:	d112      	bne.n	8000c32 <HAL_RCC_OscConfig+0x5e>
 8000c0c:	4b8c      	ldr	r3, [pc, #560]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c18:	d10b      	bne.n	8000c32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c1a:	4b89      	ldr	r3, [pc, #548]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d06c      	beq.n	8000d00 <HAL_RCC_OscConfig+0x12c>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d168      	bne.n	8000d00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e246      	b.n	80010c0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c3a:	d106      	bne.n	8000c4a <HAL_RCC_OscConfig+0x76>
 8000c3c:	4b80      	ldr	r3, [pc, #512]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a7f      	ldr	r2, [pc, #508]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c46:	6013      	str	r3, [r2, #0]
 8000c48:	e02e      	b.n	8000ca8 <HAL_RCC_OscConfig+0xd4>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d10c      	bne.n	8000c6c <HAL_RCC_OscConfig+0x98>
 8000c52:	4b7b      	ldr	r3, [pc, #492]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a7a      	ldr	r2, [pc, #488]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c5c:	6013      	str	r3, [r2, #0]
 8000c5e:	4b78      	ldr	r3, [pc, #480]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a77      	ldr	r2, [pc, #476]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c68:	6013      	str	r3, [r2, #0]
 8000c6a:	e01d      	b.n	8000ca8 <HAL_RCC_OscConfig+0xd4>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c74:	d10c      	bne.n	8000c90 <HAL_RCC_OscConfig+0xbc>
 8000c76:	4b72      	ldr	r3, [pc, #456]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a71      	ldr	r2, [pc, #452]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c80:	6013      	str	r3, [r2, #0]
 8000c82:	4b6f      	ldr	r3, [pc, #444]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a6e      	ldr	r2, [pc, #440]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c8c:	6013      	str	r3, [r2, #0]
 8000c8e:	e00b      	b.n	8000ca8 <HAL_RCC_OscConfig+0xd4>
 8000c90:	4b6b      	ldr	r3, [pc, #428]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a6a      	ldr	r2, [pc, #424]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c9a:	6013      	str	r3, [r2, #0]
 8000c9c:	4b68      	ldr	r3, [pc, #416]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a67      	ldr	r2, [pc, #412]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ca6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d013      	beq.n	8000cd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cb0:	f7ff fcba 	bl	8000628 <HAL_GetTick>
 8000cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cb6:	e008      	b.n	8000cca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cb8:	f7ff fcb6 	bl	8000628 <HAL_GetTick>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	2b64      	cmp	r3, #100	; 0x64
 8000cc4:	d901      	bls.n	8000cca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	e1fa      	b.n	80010c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cca:	4b5d      	ldr	r3, [pc, #372]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d0f0      	beq.n	8000cb8 <HAL_RCC_OscConfig+0xe4>
 8000cd6:	e014      	b.n	8000d02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cd8:	f7ff fca6 	bl	8000628 <HAL_GetTick>
 8000cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cde:	e008      	b.n	8000cf2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ce0:	f7ff fca2 	bl	8000628 <HAL_GetTick>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	2b64      	cmp	r3, #100	; 0x64
 8000cec:	d901      	bls.n	8000cf2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	e1e6      	b.n	80010c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cf2:	4b53      	ldr	r3, [pc, #332]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d1f0      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x10c>
 8000cfe:	e000      	b.n	8000d02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d063      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d0e:	4b4c      	ldr	r3, [pc, #304]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f003 030c 	and.w	r3, r3, #12
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d00b      	beq.n	8000d32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d1a:	4b49      	ldr	r3, [pc, #292]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f003 030c 	and.w	r3, r3, #12
 8000d22:	2b08      	cmp	r3, #8
 8000d24:	d11c      	bne.n	8000d60 <HAL_RCC_OscConfig+0x18c>
 8000d26:	4b46      	ldr	r3, [pc, #280]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d116      	bne.n	8000d60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d32:	4b43      	ldr	r3, [pc, #268]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d005      	beq.n	8000d4a <HAL_RCC_OscConfig+0x176>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	691b      	ldr	r3, [r3, #16]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d001      	beq.n	8000d4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e1ba      	b.n	80010c0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d4a:	4b3d      	ldr	r3, [pc, #244]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	695b      	ldr	r3, [r3, #20]
 8000d56:	00db      	lsls	r3, r3, #3
 8000d58:	4939      	ldr	r1, [pc, #228]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d5e:	e03a      	b.n	8000dd6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	691b      	ldr	r3, [r3, #16]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d020      	beq.n	8000daa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d68:	4b36      	ldr	r3, [pc, #216]	; (8000e44 <HAL_RCC_OscConfig+0x270>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d6e:	f7ff fc5b 	bl	8000628 <HAL_GetTick>
 8000d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d74:	e008      	b.n	8000d88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d76:	f7ff fc57 	bl	8000628 <HAL_GetTick>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d901      	bls.n	8000d88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d84:	2303      	movs	r3, #3
 8000d86:	e19b      	b.n	80010c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d88:	4b2d      	ldr	r3, [pc, #180]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f003 0302 	and.w	r3, r3, #2
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d0f0      	beq.n	8000d76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d94:	4b2a      	ldr	r3, [pc, #168]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	695b      	ldr	r3, [r3, #20]
 8000da0:	00db      	lsls	r3, r3, #3
 8000da2:	4927      	ldr	r1, [pc, #156]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000da4:	4313      	orrs	r3, r2
 8000da6:	600b      	str	r3, [r1, #0]
 8000da8:	e015      	b.n	8000dd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000daa:	4b26      	ldr	r3, [pc, #152]	; (8000e44 <HAL_RCC_OscConfig+0x270>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db0:	f7ff fc3a 	bl	8000628 <HAL_GetTick>
 8000db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000db6:	e008      	b.n	8000dca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000db8:	f7ff fc36 	bl	8000628 <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d901      	bls.n	8000dca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e17a      	b.n	80010c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dca:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d1f0      	bne.n	8000db8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f003 0308 	and.w	r3, r3, #8
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d03a      	beq.n	8000e58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d019      	beq.n	8000e1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dea:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <HAL_RCC_OscConfig+0x274>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000df0:	f7ff fc1a 	bl	8000628 <HAL_GetTick>
 8000df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000df6:	e008      	b.n	8000e0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000df8:	f7ff fc16 	bl	8000628 <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d901      	bls.n	8000e0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e06:	2303      	movs	r3, #3
 8000e08:	e15a      	b.n	80010c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d0f0      	beq.n	8000df8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e16:	2001      	movs	r0, #1
 8000e18:	f000 facc 	bl	80013b4 <RCC_Delay>
 8000e1c:	e01c      	b.n	8000e58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <HAL_RCC_OscConfig+0x274>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e24:	f7ff fc00 	bl	8000628 <HAL_GetTick>
 8000e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e2a:	e00f      	b.n	8000e4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e2c:	f7ff fbfc 	bl	8000628 <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d908      	bls.n	8000e4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	e140      	b.n	80010c0 <HAL_RCC_OscConfig+0x4ec>
 8000e3e:	bf00      	nop
 8000e40:	40021000 	.word	0x40021000
 8000e44:	42420000 	.word	0x42420000
 8000e48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e4c:	4b9e      	ldr	r3, [pc, #632]	; (80010c8 <HAL_RCC_OscConfig+0x4f4>)
 8000e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e50:	f003 0302 	and.w	r3, r3, #2
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d1e9      	bne.n	8000e2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f003 0304 	and.w	r3, r3, #4
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	f000 80a6 	beq.w	8000fb2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e66:	2300      	movs	r3, #0
 8000e68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e6a:	4b97      	ldr	r3, [pc, #604]	; (80010c8 <HAL_RCC_OscConfig+0x4f4>)
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d10d      	bne.n	8000e92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e76:	4b94      	ldr	r3, [pc, #592]	; (80010c8 <HAL_RCC_OscConfig+0x4f4>)
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	4a93      	ldr	r2, [pc, #588]	; (80010c8 <HAL_RCC_OscConfig+0x4f4>)
 8000e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e80:	61d3      	str	r3, [r2, #28]
 8000e82:	4b91      	ldr	r3, [pc, #580]	; (80010c8 <HAL_RCC_OscConfig+0x4f4>)
 8000e84:	69db      	ldr	r3, [r3, #28]
 8000e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e92:	4b8e      	ldr	r3, [pc, #568]	; (80010cc <HAL_RCC_OscConfig+0x4f8>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d118      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e9e:	4b8b      	ldr	r3, [pc, #556]	; (80010cc <HAL_RCC_OscConfig+0x4f8>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a8a      	ldr	r2, [pc, #552]	; (80010cc <HAL_RCC_OscConfig+0x4f8>)
 8000ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000eaa:	f7ff fbbd 	bl	8000628 <HAL_GetTick>
 8000eae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eb0:	e008      	b.n	8000ec4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000eb2:	f7ff fbb9 	bl	8000628 <HAL_GetTick>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	2b64      	cmp	r3, #100	; 0x64
 8000ebe:	d901      	bls.n	8000ec4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	e0fd      	b.n	80010c0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ec4:	4b81      	ldr	r3, [pc, #516]	; (80010cc <HAL_RCC_OscConfig+0x4f8>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d0f0      	beq.n	8000eb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d106      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x312>
 8000ed8:	4b7b      	ldr	r3, [pc, #492]	; (80010c8 <HAL_RCC_OscConfig+0x4f4>)
 8000eda:	6a1b      	ldr	r3, [r3, #32]
 8000edc:	4a7a      	ldr	r2, [pc, #488]	; (80010c8 <HAL_RCC_OscConfig+0x4f4>)
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	6213      	str	r3, [r2, #32]
 8000ee4:	e02d      	b.n	8000f42 <HAL_RCC_OscConfig+0x36e>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d10c      	bne.n	8000f08 <HAL_RCC_OscConfig+0x334>
 8000eee:	4b76      	ldr	r3, [pc, #472]	; (80010c8 <HAL_RCC_OscConfig+0x4f4>)
 8000ef0:	6a1b      	ldr	r3, [r3, #32]
 8000ef2:	4a75      	ldr	r2, [pc, #468]	; (80010c8 <HAL_RCC_OscConfig+0x4f4>)
 8000ef4:	f023 0301 	bic.w	r3, r3, #1
 8000ef8:	6213      	str	r3, [r2, #32]
 8000efa:	4b73      	ldr	r3, [pc, #460]	; (80010c8 <HAL_RCC_OscConfig+0x4f4>)
 8000efc:	6a1b      	ldr	r3, [r3, #32]
 8000efe:	4a72      	ldr	r2, [pc, #456]	; (80010c8 <HAL_RCC_OscConfig+0x4f4>)
 8000f00:	f023 0304 	bic.w	r3, r3, #4
 8000f04:	6213      	str	r3, [r2, #32]
 8000f06:	e01c      	b.n	8000f42 <HAL_RCC_OscConfig+0x36e>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	2b05      	cmp	r3, #5
 8000f0e:	d10c      	bne.n	8000f2a <HAL_RCC_OscConfig+0x356>
 8000f10:	4b6d      	ldr	r3, [pc, #436]	; (80010c8 <HAL_RCC_OscConfig+0x4f4>)
 8000f12:	6a1b      	ldr	r3, [r3, #32]
 8000f14:	4a6c      	ldr	r2, [pc, #432]	; (80010c8 <HAL_RCC_OscConfig+0x4f4>)
 8000f16:	f043 0304 	orr.w	r3, r3, #4
 8000f1a:	6213      	str	r3, [r2, #32]
 8000f1c:	4b6a      	ldr	r3, [pc, #424]	; (80010c8 <HAL_RCC_OscConfig+0x4f4>)
 8000f1e:	6a1b      	ldr	r3, [r3, #32]
 8000f20:	4a69      	ldr	r2, [pc, #420]	; (80010c8 <HAL_RCC_OscConfig+0x4f4>)
 8000f22:	f043 0301 	orr.w	r3, r3, #1
 8000f26:	6213      	str	r3, [r2, #32]
 8000f28:	e00b      	b.n	8000f42 <HAL_RCC_OscConfig+0x36e>
 8000f2a:	4b67      	ldr	r3, [pc, #412]	; (80010c8 <HAL_RCC_OscConfig+0x4f4>)
 8000f2c:	6a1b      	ldr	r3, [r3, #32]
 8000f2e:	4a66      	ldr	r2, [pc, #408]	; (80010c8 <HAL_RCC_OscConfig+0x4f4>)
 8000f30:	f023 0301 	bic.w	r3, r3, #1
 8000f34:	6213      	str	r3, [r2, #32]
 8000f36:	4b64      	ldr	r3, [pc, #400]	; (80010c8 <HAL_RCC_OscConfig+0x4f4>)
 8000f38:	6a1b      	ldr	r3, [r3, #32]
 8000f3a:	4a63      	ldr	r2, [pc, #396]	; (80010c8 <HAL_RCC_OscConfig+0x4f4>)
 8000f3c:	f023 0304 	bic.w	r3, r3, #4
 8000f40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d015      	beq.n	8000f76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f4a:	f7ff fb6d 	bl	8000628 <HAL_GetTick>
 8000f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f50:	e00a      	b.n	8000f68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f52:	f7ff fb69 	bl	8000628 <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d901      	bls.n	8000f68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f64:	2303      	movs	r3, #3
 8000f66:	e0ab      	b.n	80010c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f68:	4b57      	ldr	r3, [pc, #348]	; (80010c8 <HAL_RCC_OscConfig+0x4f4>)
 8000f6a:	6a1b      	ldr	r3, [r3, #32]
 8000f6c:	f003 0302 	and.w	r3, r3, #2
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d0ee      	beq.n	8000f52 <HAL_RCC_OscConfig+0x37e>
 8000f74:	e014      	b.n	8000fa0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f76:	f7ff fb57 	bl	8000628 <HAL_GetTick>
 8000f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f7c:	e00a      	b.n	8000f94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f7e:	f7ff fb53 	bl	8000628 <HAL_GetTick>
 8000f82:	4602      	mov	r2, r0
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d901      	bls.n	8000f94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f90:	2303      	movs	r3, #3
 8000f92:	e095      	b.n	80010c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f94:	4b4c      	ldr	r3, [pc, #304]	; (80010c8 <HAL_RCC_OscConfig+0x4f4>)
 8000f96:	6a1b      	ldr	r3, [r3, #32]
 8000f98:	f003 0302 	and.w	r3, r3, #2
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1ee      	bne.n	8000f7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000fa0:	7dfb      	ldrb	r3, [r7, #23]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d105      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fa6:	4b48      	ldr	r3, [pc, #288]	; (80010c8 <HAL_RCC_OscConfig+0x4f4>)
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	4a47      	ldr	r2, [pc, #284]	; (80010c8 <HAL_RCC_OscConfig+0x4f4>)
 8000fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fb0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f000 8081 	beq.w	80010be <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fbc:	4b42      	ldr	r3, [pc, #264]	; (80010c8 <HAL_RCC_OscConfig+0x4f4>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 030c 	and.w	r3, r3, #12
 8000fc4:	2b08      	cmp	r3, #8
 8000fc6:	d061      	beq.n	800108c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	69db      	ldr	r3, [r3, #28]
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d146      	bne.n	800105e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fd0:	4b3f      	ldr	r3, [pc, #252]	; (80010d0 <HAL_RCC_OscConfig+0x4fc>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd6:	f7ff fb27 	bl	8000628 <HAL_GetTick>
 8000fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fdc:	e008      	b.n	8000ff0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fde:	f7ff fb23 	bl	8000628 <HAL_GetTick>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d901      	bls.n	8000ff0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fec:	2303      	movs	r3, #3
 8000fee:	e067      	b.n	80010c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ff0:	4b35      	ldr	r3, [pc, #212]	; (80010c8 <HAL_RCC_OscConfig+0x4f4>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1f0      	bne.n	8000fde <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6a1b      	ldr	r3, [r3, #32]
 8001000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001004:	d108      	bne.n	8001018 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001006:	4b30      	ldr	r3, [pc, #192]	; (80010c8 <HAL_RCC_OscConfig+0x4f4>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	492d      	ldr	r1, [pc, #180]	; (80010c8 <HAL_RCC_OscConfig+0x4f4>)
 8001014:	4313      	orrs	r3, r2
 8001016:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001018:	4b2b      	ldr	r3, [pc, #172]	; (80010c8 <HAL_RCC_OscConfig+0x4f4>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a19      	ldr	r1, [r3, #32]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001028:	430b      	orrs	r3, r1
 800102a:	4927      	ldr	r1, [pc, #156]	; (80010c8 <HAL_RCC_OscConfig+0x4f4>)
 800102c:	4313      	orrs	r3, r2
 800102e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001030:	4b27      	ldr	r3, [pc, #156]	; (80010d0 <HAL_RCC_OscConfig+0x4fc>)
 8001032:	2201      	movs	r2, #1
 8001034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001036:	f7ff faf7 	bl	8000628 <HAL_GetTick>
 800103a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800103c:	e008      	b.n	8001050 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800103e:	f7ff faf3 	bl	8000628 <HAL_GetTick>
 8001042:	4602      	mov	r2, r0
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	2b02      	cmp	r3, #2
 800104a:	d901      	bls.n	8001050 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800104c:	2303      	movs	r3, #3
 800104e:	e037      	b.n	80010c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001050:	4b1d      	ldr	r3, [pc, #116]	; (80010c8 <HAL_RCC_OscConfig+0x4f4>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d0f0      	beq.n	800103e <HAL_RCC_OscConfig+0x46a>
 800105c:	e02f      	b.n	80010be <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800105e:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <HAL_RCC_OscConfig+0x4fc>)
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001064:	f7ff fae0 	bl	8000628 <HAL_GetTick>
 8001068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800106a:	e008      	b.n	800107e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800106c:	f7ff fadc 	bl	8000628 <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d901      	bls.n	800107e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e020      	b.n	80010c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800107e:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <HAL_RCC_OscConfig+0x4f4>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1f0      	bne.n	800106c <HAL_RCC_OscConfig+0x498>
 800108a:	e018      	b.n	80010be <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	69db      	ldr	r3, [r3, #28]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d101      	bne.n	8001098 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e013      	b.n	80010c0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001098:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <HAL_RCC_OscConfig+0x4f4>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a1b      	ldr	r3, [r3, #32]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d106      	bne.n	80010ba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d001      	beq.n	80010be <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e000      	b.n	80010c0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80010be:	2300      	movs	r3, #0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3718      	adds	r7, #24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40021000 	.word	0x40021000
 80010cc:	40007000 	.word	0x40007000
 80010d0:	42420060 	.word	0x42420060

080010d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d101      	bne.n	80010e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e0d0      	b.n	800128a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010e8:	4b6a      	ldr	r3, [pc, #424]	; (8001294 <HAL_RCC_ClockConfig+0x1c0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0307 	and.w	r3, r3, #7
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d910      	bls.n	8001118 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010f6:	4b67      	ldr	r3, [pc, #412]	; (8001294 <HAL_RCC_ClockConfig+0x1c0>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f023 0207 	bic.w	r2, r3, #7
 80010fe:	4965      	ldr	r1, [pc, #404]	; (8001294 <HAL_RCC_ClockConfig+0x1c0>)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	4313      	orrs	r3, r2
 8001104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001106:	4b63      	ldr	r3, [pc, #396]	; (8001294 <HAL_RCC_ClockConfig+0x1c0>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	683a      	ldr	r2, [r7, #0]
 8001110:	429a      	cmp	r2, r3
 8001112:	d001      	beq.n	8001118 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	e0b8      	b.n	800128a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	2b00      	cmp	r3, #0
 8001122:	d020      	beq.n	8001166 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0304 	and.w	r3, r3, #4
 800112c:	2b00      	cmp	r3, #0
 800112e:	d005      	beq.n	800113c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001130:	4b59      	ldr	r3, [pc, #356]	; (8001298 <HAL_RCC_ClockConfig+0x1c4>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	4a58      	ldr	r2, [pc, #352]	; (8001298 <HAL_RCC_ClockConfig+0x1c4>)
 8001136:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800113a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0308 	and.w	r3, r3, #8
 8001144:	2b00      	cmp	r3, #0
 8001146:	d005      	beq.n	8001154 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001148:	4b53      	ldr	r3, [pc, #332]	; (8001298 <HAL_RCC_ClockConfig+0x1c4>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	4a52      	ldr	r2, [pc, #328]	; (8001298 <HAL_RCC_ClockConfig+0x1c4>)
 800114e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001152:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001154:	4b50      	ldr	r3, [pc, #320]	; (8001298 <HAL_RCC_ClockConfig+0x1c4>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	494d      	ldr	r1, [pc, #308]	; (8001298 <HAL_RCC_ClockConfig+0x1c4>)
 8001162:	4313      	orrs	r3, r2
 8001164:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	2b00      	cmp	r3, #0
 8001170:	d040      	beq.n	80011f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d107      	bne.n	800118a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117a:	4b47      	ldr	r3, [pc, #284]	; (8001298 <HAL_RCC_ClockConfig+0x1c4>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d115      	bne.n	80011b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e07f      	b.n	800128a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	2b02      	cmp	r3, #2
 8001190:	d107      	bne.n	80011a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001192:	4b41      	ldr	r3, [pc, #260]	; (8001298 <HAL_RCC_ClockConfig+0x1c4>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d109      	bne.n	80011b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e073      	b.n	800128a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a2:	4b3d      	ldr	r3, [pc, #244]	; (8001298 <HAL_RCC_ClockConfig+0x1c4>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d101      	bne.n	80011b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e06b      	b.n	800128a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011b2:	4b39      	ldr	r3, [pc, #228]	; (8001298 <HAL_RCC_ClockConfig+0x1c4>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f023 0203 	bic.w	r2, r3, #3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	4936      	ldr	r1, [pc, #216]	; (8001298 <HAL_RCC_ClockConfig+0x1c4>)
 80011c0:	4313      	orrs	r3, r2
 80011c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011c4:	f7ff fa30 	bl	8000628 <HAL_GetTick>
 80011c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ca:	e00a      	b.n	80011e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011cc:	f7ff fa2c 	bl	8000628 <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011da:	4293      	cmp	r3, r2
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e053      	b.n	800128a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011e2:	4b2d      	ldr	r3, [pc, #180]	; (8001298 <HAL_RCC_ClockConfig+0x1c4>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 020c 	and.w	r2, r3, #12
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d1eb      	bne.n	80011cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011f4:	4b27      	ldr	r3, [pc, #156]	; (8001294 <HAL_RCC_ClockConfig+0x1c0>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0307 	and.w	r3, r3, #7
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	429a      	cmp	r2, r3
 8001200:	d210      	bcs.n	8001224 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001202:	4b24      	ldr	r3, [pc, #144]	; (8001294 <HAL_RCC_ClockConfig+0x1c0>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f023 0207 	bic.w	r2, r3, #7
 800120a:	4922      	ldr	r1, [pc, #136]	; (8001294 <HAL_RCC_ClockConfig+0x1c0>)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	4313      	orrs	r3, r2
 8001210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001212:	4b20      	ldr	r3, [pc, #128]	; (8001294 <HAL_RCC_ClockConfig+0x1c0>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	683a      	ldr	r2, [r7, #0]
 800121c:	429a      	cmp	r2, r3
 800121e:	d001      	beq.n	8001224 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	e032      	b.n	800128a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0304 	and.w	r3, r3, #4
 800122c:	2b00      	cmp	r3, #0
 800122e:	d008      	beq.n	8001242 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001230:	4b19      	ldr	r3, [pc, #100]	; (8001298 <HAL_RCC_ClockConfig+0x1c4>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	4916      	ldr	r1, [pc, #88]	; (8001298 <HAL_RCC_ClockConfig+0x1c4>)
 800123e:	4313      	orrs	r3, r2
 8001240:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0308 	and.w	r3, r3, #8
 800124a:	2b00      	cmp	r3, #0
 800124c:	d009      	beq.n	8001262 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800124e:	4b12      	ldr	r3, [pc, #72]	; (8001298 <HAL_RCC_ClockConfig+0x1c4>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	691b      	ldr	r3, [r3, #16]
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	490e      	ldr	r1, [pc, #56]	; (8001298 <HAL_RCC_ClockConfig+0x1c4>)
 800125e:	4313      	orrs	r3, r2
 8001260:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001262:	f000 f821 	bl	80012a8 <HAL_RCC_GetSysClockFreq>
 8001266:	4602      	mov	r2, r0
 8001268:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <HAL_RCC_ClockConfig+0x1c4>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	091b      	lsrs	r3, r3, #4
 800126e:	f003 030f 	and.w	r3, r3, #15
 8001272:	490a      	ldr	r1, [pc, #40]	; (800129c <HAL_RCC_ClockConfig+0x1c8>)
 8001274:	5ccb      	ldrb	r3, [r1, r3]
 8001276:	fa22 f303 	lsr.w	r3, r2, r3
 800127a:	4a09      	ldr	r2, [pc, #36]	; (80012a0 <HAL_RCC_ClockConfig+0x1cc>)
 800127c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <HAL_RCC_ClockConfig+0x1d0>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff f98e 	bl	80005a4 <HAL_InitTick>

  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40022000 	.word	0x40022000
 8001298:	40021000 	.word	0x40021000
 800129c:	0800389c 	.word	0x0800389c
 80012a0:	20000000 	.word	0x20000000
 80012a4:	20000004 	.word	0x20000004

080012a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b087      	sub	sp, #28
 80012ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012c2:	4b1e      	ldr	r3, [pc, #120]	; (800133c <HAL_RCC_GetSysClockFreq+0x94>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f003 030c 	and.w	r3, r3, #12
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	d002      	beq.n	80012d8 <HAL_RCC_GetSysClockFreq+0x30>
 80012d2:	2b08      	cmp	r3, #8
 80012d4:	d003      	beq.n	80012de <HAL_RCC_GetSysClockFreq+0x36>
 80012d6:	e027      	b.n	8001328 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012d8:	4b19      	ldr	r3, [pc, #100]	; (8001340 <HAL_RCC_GetSysClockFreq+0x98>)
 80012da:	613b      	str	r3, [r7, #16]
      break;
 80012dc:	e027      	b.n	800132e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	0c9b      	lsrs	r3, r3, #18
 80012e2:	f003 030f 	and.w	r3, r3, #15
 80012e6:	4a17      	ldr	r2, [pc, #92]	; (8001344 <HAL_RCC_GetSysClockFreq+0x9c>)
 80012e8:	5cd3      	ldrb	r3, [r2, r3]
 80012ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d010      	beq.n	8001318 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <HAL_RCC_GetSysClockFreq+0x94>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	0c5b      	lsrs	r3, r3, #17
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	4a11      	ldr	r2, [pc, #68]	; (8001348 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001302:	5cd3      	ldrb	r3, [r2, r3]
 8001304:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a0d      	ldr	r2, [pc, #52]	; (8001340 <HAL_RCC_GetSysClockFreq+0x98>)
 800130a:	fb02 f203 	mul.w	r2, r2, r3
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	fbb2 f3f3 	udiv	r3, r2, r3
 8001314:	617b      	str	r3, [r7, #20]
 8001316:	e004      	b.n	8001322 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a0c      	ldr	r2, [pc, #48]	; (800134c <HAL_RCC_GetSysClockFreq+0xa4>)
 800131c:	fb02 f303 	mul.w	r3, r2, r3
 8001320:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	613b      	str	r3, [r7, #16]
      break;
 8001326:	e002      	b.n	800132e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <HAL_RCC_GetSysClockFreq+0x98>)
 800132a:	613b      	str	r3, [r7, #16]
      break;
 800132c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800132e:	693b      	ldr	r3, [r7, #16]
}
 8001330:	4618      	mov	r0, r3
 8001332:	371c      	adds	r7, #28
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40021000 	.word	0x40021000
 8001340:	007a1200 	.word	0x007a1200
 8001344:	080038b4 	.word	0x080038b4
 8001348:	080038c4 	.word	0x080038c4
 800134c:	003d0900 	.word	0x003d0900

08001350 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001354:	4b02      	ldr	r3, [pc, #8]	; (8001360 <HAL_RCC_GetHCLKFreq+0x10>)
 8001356:	681b      	ldr	r3, [r3, #0]
}
 8001358:	4618      	mov	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr
 8001360:	20000000 	.word	0x20000000

08001364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001368:	f7ff fff2 	bl	8001350 <HAL_RCC_GetHCLKFreq>
 800136c:	4602      	mov	r2, r0
 800136e:	4b05      	ldr	r3, [pc, #20]	; (8001384 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	0a1b      	lsrs	r3, r3, #8
 8001374:	f003 0307 	and.w	r3, r3, #7
 8001378:	4903      	ldr	r1, [pc, #12]	; (8001388 <HAL_RCC_GetPCLK1Freq+0x24>)
 800137a:	5ccb      	ldrb	r3, [r1, r3]
 800137c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001380:	4618      	mov	r0, r3
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40021000 	.word	0x40021000
 8001388:	080038ac 	.word	0x080038ac

0800138c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001390:	f7ff ffde 	bl	8001350 <HAL_RCC_GetHCLKFreq>
 8001394:	4602      	mov	r2, r0
 8001396:	4b05      	ldr	r3, [pc, #20]	; (80013ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	0adb      	lsrs	r3, r3, #11
 800139c:	f003 0307 	and.w	r3, r3, #7
 80013a0:	4903      	ldr	r1, [pc, #12]	; (80013b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013a2:	5ccb      	ldrb	r3, [r1, r3]
 80013a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40021000 	.word	0x40021000
 80013b0:	080038ac 	.word	0x080038ac

080013b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013bc:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <RCC_Delay+0x34>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <RCC_Delay+0x38>)
 80013c2:	fba2 2303 	umull	r2, r3, r2, r3
 80013c6:	0a5b      	lsrs	r3, r3, #9
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	fb02 f303 	mul.w	r3, r2, r3
 80013ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80013d0:	bf00      	nop
  }
  while (Delay --);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	1e5a      	subs	r2, r3, #1
 80013d6:	60fa      	str	r2, [r7, #12]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1f9      	bne.n	80013d0 <RCC_Delay+0x1c>
}
 80013dc:	bf00      	nop
 80013de:	bf00      	nop
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr
 80013e8:	20000000 	.word	0x20000000
 80013ec:	10624dd3 	.word	0x10624dd3

080013f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e042      	b.n	8001488 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	d106      	bne.n	800141c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7fe ffde 	bl	80003d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2224      	movs	r2, #36	; 0x24
 8001420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	68da      	ldr	r2, [r3, #12]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001432:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f000 f82b 	bl	8001490 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	691a      	ldr	r2, [r3, #16]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001448:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	695a      	ldr	r2, [r3, #20]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001458:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	68da      	ldr	r2, [r3, #12]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001468:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2220      	movs	r2, #32
 8001474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2220      	movs	r2, #32
 800147c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	68da      	ldr	r2, [r3, #12]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	430a      	orrs	r2, r1
 80014ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	691b      	ldr	r3, [r3, #16]
 80014b6:	431a      	orrs	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	695b      	ldr	r3, [r3, #20]
 80014bc:	4313      	orrs	r3, r2
 80014be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80014ca:	f023 030c 	bic.w	r3, r3, #12
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	6812      	ldr	r2, [r2, #0]
 80014d2:	68b9      	ldr	r1, [r7, #8]
 80014d4:	430b      	orrs	r3, r1
 80014d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	699a      	ldr	r2, [r3, #24]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a2c      	ldr	r2, [pc, #176]	; (80015a4 <UART_SetConfig+0x114>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d103      	bne.n	8001500 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80014f8:	f7ff ff48 	bl	800138c <HAL_RCC_GetPCLK2Freq>
 80014fc:	60f8      	str	r0, [r7, #12]
 80014fe:	e002      	b.n	8001506 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001500:	f7ff ff30 	bl	8001364 <HAL_RCC_GetPCLK1Freq>
 8001504:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	4613      	mov	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4413      	add	r3, r2
 800150e:	009a      	lsls	r2, r3, #2
 8001510:	441a      	add	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	fbb2 f3f3 	udiv	r3, r2, r3
 800151c:	4a22      	ldr	r2, [pc, #136]	; (80015a8 <UART_SetConfig+0x118>)
 800151e:	fba2 2303 	umull	r2, r3, r2, r3
 8001522:	095b      	lsrs	r3, r3, #5
 8001524:	0119      	lsls	r1, r3, #4
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	4613      	mov	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	009a      	lsls	r2, r3, #2
 8001530:	441a      	add	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	fbb2 f2f3 	udiv	r2, r2, r3
 800153c:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <UART_SetConfig+0x118>)
 800153e:	fba3 0302 	umull	r0, r3, r3, r2
 8001542:	095b      	lsrs	r3, r3, #5
 8001544:	2064      	movs	r0, #100	; 0x64
 8001546:	fb00 f303 	mul.w	r3, r0, r3
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	011b      	lsls	r3, r3, #4
 800154e:	3332      	adds	r3, #50	; 0x32
 8001550:	4a15      	ldr	r2, [pc, #84]	; (80015a8 <UART_SetConfig+0x118>)
 8001552:	fba2 2303 	umull	r2, r3, r2, r3
 8001556:	095b      	lsrs	r3, r3, #5
 8001558:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800155c:	4419      	add	r1, r3
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	009a      	lsls	r2, r3, #2
 8001568:	441a      	add	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	fbb2 f2f3 	udiv	r2, r2, r3
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <UART_SetConfig+0x118>)
 8001576:	fba3 0302 	umull	r0, r3, r3, r2
 800157a:	095b      	lsrs	r3, r3, #5
 800157c:	2064      	movs	r0, #100	; 0x64
 800157e:	fb00 f303 	mul.w	r3, r0, r3
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	011b      	lsls	r3, r3, #4
 8001586:	3332      	adds	r3, #50	; 0x32
 8001588:	4a07      	ldr	r2, [pc, #28]	; (80015a8 <UART_SetConfig+0x118>)
 800158a:	fba2 2303 	umull	r2, r3, r2, r3
 800158e:	095b      	lsrs	r3, r3, #5
 8001590:	f003 020f 	and.w	r2, r3, #15
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	440a      	add	r2, r1
 800159a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800159c:	bf00      	nop
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40013800 	.word	0x40013800
 80015a8:	51eb851f 	.word	0x51eb851f

080015ac <findslot>:
 80015ac:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <findslot+0x2c>)
 80015ae:	b510      	push	{r4, lr}
 80015b0:	4604      	mov	r4, r0
 80015b2:	6818      	ldr	r0, [r3, #0]
 80015b4:	b118      	cbz	r0, 80015be <findslot+0x12>
 80015b6:	6983      	ldr	r3, [r0, #24]
 80015b8:	b90b      	cbnz	r3, 80015be <findslot+0x12>
 80015ba:	f000 fafb 	bl	8001bb4 <__sinit>
 80015be:	2c13      	cmp	r4, #19
 80015c0:	d807      	bhi.n	80015d2 <findslot+0x26>
 80015c2:	4806      	ldr	r0, [pc, #24]	; (80015dc <findslot+0x30>)
 80015c4:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80015c8:	3201      	adds	r2, #1
 80015ca:	d002      	beq.n	80015d2 <findslot+0x26>
 80015cc:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80015d0:	bd10      	pop	{r4, pc}
 80015d2:	2000      	movs	r0, #0
 80015d4:	e7fc      	b.n	80015d0 <findslot+0x24>
 80015d6:	bf00      	nop
 80015d8:	20000014 	.word	0x20000014
 80015dc:	200000a4 	.word	0x200000a4

080015e0 <checkerror>:
 80015e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015e2:	1c43      	adds	r3, r0, #1
 80015e4:	4604      	mov	r4, r0
 80015e6:	d109      	bne.n	80015fc <checkerror+0x1c>
 80015e8:	f000 fa86 	bl	8001af8 <__errno>
 80015ec:	2613      	movs	r6, #19
 80015ee:	4605      	mov	r5, r0
 80015f0:	2700      	movs	r7, #0
 80015f2:	4630      	mov	r0, r6
 80015f4:	4639      	mov	r1, r7
 80015f6:	beab      	bkpt	0x00ab
 80015f8:	4606      	mov	r6, r0
 80015fa:	602e      	str	r6, [r5, #0]
 80015fc:	4620      	mov	r0, r4
 80015fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001600 <error>:
 8001600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001602:	4604      	mov	r4, r0
 8001604:	f000 fa78 	bl	8001af8 <__errno>
 8001608:	2613      	movs	r6, #19
 800160a:	4605      	mov	r5, r0
 800160c:	2700      	movs	r7, #0
 800160e:	4630      	mov	r0, r6
 8001610:	4639      	mov	r1, r7
 8001612:	beab      	bkpt	0x00ab
 8001614:	4606      	mov	r6, r0
 8001616:	4620      	mov	r0, r4
 8001618:	602e      	str	r6, [r5, #0]
 800161a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800161c <_swiread>:
 800161c:	b530      	push	{r4, r5, lr}
 800161e:	b085      	sub	sp, #20
 8001620:	2406      	movs	r4, #6
 8001622:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001626:	9203      	str	r2, [sp, #12]
 8001628:	ad01      	add	r5, sp, #4
 800162a:	4620      	mov	r0, r4
 800162c:	4629      	mov	r1, r5
 800162e:	beab      	bkpt	0x00ab
 8001630:	4604      	mov	r4, r0
 8001632:	4620      	mov	r0, r4
 8001634:	f7ff ffd4 	bl	80015e0 <checkerror>
 8001638:	b005      	add	sp, #20
 800163a:	bd30      	pop	{r4, r5, pc}

0800163c <_read>:
 800163c:	b570      	push	{r4, r5, r6, lr}
 800163e:	460e      	mov	r6, r1
 8001640:	4615      	mov	r5, r2
 8001642:	f7ff ffb3 	bl	80015ac <findslot>
 8001646:	4604      	mov	r4, r0
 8001648:	b930      	cbnz	r0, 8001658 <_read+0x1c>
 800164a:	f000 fa55 	bl	8001af8 <__errno>
 800164e:	2309      	movs	r3, #9
 8001650:	6003      	str	r3, [r0, #0]
 8001652:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001656:	bd70      	pop	{r4, r5, r6, pc}
 8001658:	462a      	mov	r2, r5
 800165a:	4631      	mov	r1, r6
 800165c:	6800      	ldr	r0, [r0, #0]
 800165e:	f7ff ffdd 	bl	800161c <_swiread>
 8001662:	1c43      	adds	r3, r0, #1
 8001664:	bf1f      	itttt	ne
 8001666:	6863      	ldrne	r3, [r4, #4]
 8001668:	1a28      	subne	r0, r5, r0
 800166a:	181b      	addne	r3, r3, r0
 800166c:	6063      	strne	r3, [r4, #4]
 800166e:	e7f2      	b.n	8001656 <_read+0x1a>

08001670 <_swilseek>:
 8001670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001672:	460c      	mov	r4, r1
 8001674:	4616      	mov	r6, r2
 8001676:	f7ff ff99 	bl	80015ac <findslot>
 800167a:	4605      	mov	r5, r0
 800167c:	b940      	cbnz	r0, 8001690 <_swilseek+0x20>
 800167e:	f000 fa3b 	bl	8001af8 <__errno>
 8001682:	2309      	movs	r3, #9
 8001684:	6003      	str	r3, [r0, #0]
 8001686:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800168a:	4620      	mov	r0, r4
 800168c:	b003      	add	sp, #12
 800168e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001690:	2e02      	cmp	r6, #2
 8001692:	d903      	bls.n	800169c <_swilseek+0x2c>
 8001694:	f000 fa30 	bl	8001af8 <__errno>
 8001698:	2316      	movs	r3, #22
 800169a:	e7f3      	b.n	8001684 <_swilseek+0x14>
 800169c:	2e01      	cmp	r6, #1
 800169e:	d112      	bne.n	80016c6 <_swilseek+0x56>
 80016a0:	6843      	ldr	r3, [r0, #4]
 80016a2:	18e4      	adds	r4, r4, r3
 80016a4:	d4f6      	bmi.n	8001694 <_swilseek+0x24>
 80016a6:	682b      	ldr	r3, [r5, #0]
 80016a8:	260a      	movs	r6, #10
 80016aa:	466f      	mov	r7, sp
 80016ac:	e9cd 3400 	strd	r3, r4, [sp]
 80016b0:	4630      	mov	r0, r6
 80016b2:	4639      	mov	r1, r7
 80016b4:	beab      	bkpt	0x00ab
 80016b6:	4606      	mov	r6, r0
 80016b8:	4630      	mov	r0, r6
 80016ba:	f7ff ff91 	bl	80015e0 <checkerror>
 80016be:	2800      	cmp	r0, #0
 80016c0:	dbe1      	blt.n	8001686 <_swilseek+0x16>
 80016c2:	606c      	str	r4, [r5, #4]
 80016c4:	e7e1      	b.n	800168a <_swilseek+0x1a>
 80016c6:	2e02      	cmp	r6, #2
 80016c8:	d1ed      	bne.n	80016a6 <_swilseek+0x36>
 80016ca:	6803      	ldr	r3, [r0, #0]
 80016cc:	260c      	movs	r6, #12
 80016ce:	466f      	mov	r7, sp
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	4630      	mov	r0, r6
 80016d4:	4639      	mov	r1, r7
 80016d6:	beab      	bkpt	0x00ab
 80016d8:	4606      	mov	r6, r0
 80016da:	4630      	mov	r0, r6
 80016dc:	f7ff ff80 	bl	80015e0 <checkerror>
 80016e0:	1c43      	adds	r3, r0, #1
 80016e2:	d0d0      	beq.n	8001686 <_swilseek+0x16>
 80016e4:	4404      	add	r4, r0
 80016e6:	e7de      	b.n	80016a6 <_swilseek+0x36>

080016e8 <_lseek>:
 80016e8:	f7ff bfc2 	b.w	8001670 <_swilseek>

080016ec <_swiwrite>:
 80016ec:	b530      	push	{r4, r5, lr}
 80016ee:	b085      	sub	sp, #20
 80016f0:	2405      	movs	r4, #5
 80016f2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80016f6:	9203      	str	r2, [sp, #12]
 80016f8:	ad01      	add	r5, sp, #4
 80016fa:	4620      	mov	r0, r4
 80016fc:	4629      	mov	r1, r5
 80016fe:	beab      	bkpt	0x00ab
 8001700:	4604      	mov	r4, r0
 8001702:	4620      	mov	r0, r4
 8001704:	f7ff ff6c 	bl	80015e0 <checkerror>
 8001708:	b005      	add	sp, #20
 800170a:	bd30      	pop	{r4, r5, pc}

0800170c <_write>:
 800170c:	b570      	push	{r4, r5, r6, lr}
 800170e:	460e      	mov	r6, r1
 8001710:	4615      	mov	r5, r2
 8001712:	f7ff ff4b 	bl	80015ac <findslot>
 8001716:	4604      	mov	r4, r0
 8001718:	b930      	cbnz	r0, 8001728 <_write+0x1c>
 800171a:	f000 f9ed 	bl	8001af8 <__errno>
 800171e:	2309      	movs	r3, #9
 8001720:	6003      	str	r3, [r0, #0]
 8001722:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001726:	bd70      	pop	{r4, r5, r6, pc}
 8001728:	462a      	mov	r2, r5
 800172a:	4631      	mov	r1, r6
 800172c:	6800      	ldr	r0, [r0, #0]
 800172e:	f7ff ffdd 	bl	80016ec <_swiwrite>
 8001732:	1e03      	subs	r3, r0, #0
 8001734:	dbf5      	blt.n	8001722 <_write+0x16>
 8001736:	6862      	ldr	r2, [r4, #4]
 8001738:	1ae8      	subs	r0, r5, r3
 800173a:	4402      	add	r2, r0
 800173c:	42ab      	cmp	r3, r5
 800173e:	6062      	str	r2, [r4, #4]
 8001740:	d1f1      	bne.n	8001726 <_write+0x1a>
 8001742:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001746:	2000      	movs	r0, #0
 8001748:	f7ff bf5a 	b.w	8001600 <error>

0800174c <_swiclose>:
 800174c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800174e:	2402      	movs	r4, #2
 8001750:	9001      	str	r0, [sp, #4]
 8001752:	ad01      	add	r5, sp, #4
 8001754:	4620      	mov	r0, r4
 8001756:	4629      	mov	r1, r5
 8001758:	beab      	bkpt	0x00ab
 800175a:	4604      	mov	r4, r0
 800175c:	4620      	mov	r0, r4
 800175e:	f7ff ff3f 	bl	80015e0 <checkerror>
 8001762:	b003      	add	sp, #12
 8001764:	bd30      	pop	{r4, r5, pc}
	...

08001768 <_close>:
 8001768:	b538      	push	{r3, r4, r5, lr}
 800176a:	4605      	mov	r5, r0
 800176c:	f7ff ff1e 	bl	80015ac <findslot>
 8001770:	4604      	mov	r4, r0
 8001772:	b930      	cbnz	r0, 8001782 <_close+0x1a>
 8001774:	f000 f9c0 	bl	8001af8 <__errno>
 8001778:	2309      	movs	r3, #9
 800177a:	6003      	str	r3, [r0, #0]
 800177c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001780:	bd38      	pop	{r3, r4, r5, pc}
 8001782:	3d01      	subs	r5, #1
 8001784:	2d01      	cmp	r5, #1
 8001786:	d809      	bhi.n	800179c <_close+0x34>
 8001788:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <_close+0x48>)
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	429a      	cmp	r2, r3
 8001790:	d104      	bne.n	800179c <_close+0x34>
 8001792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001796:	6003      	str	r3, [r0, #0]
 8001798:	2000      	movs	r0, #0
 800179a:	e7f1      	b.n	8001780 <_close+0x18>
 800179c:	6820      	ldr	r0, [r4, #0]
 800179e:	f7ff ffd5 	bl	800174c <_swiclose>
 80017a2:	2800      	cmp	r0, #0
 80017a4:	d1ec      	bne.n	8001780 <_close+0x18>
 80017a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017aa:	6023      	str	r3, [r4, #0]
 80017ac:	e7e8      	b.n	8001780 <_close+0x18>
 80017ae:	bf00      	nop
 80017b0:	200000a4 	.word	0x200000a4

080017b4 <_swistat>:
 80017b4:	b570      	push	{r4, r5, r6, lr}
 80017b6:	460c      	mov	r4, r1
 80017b8:	f7ff fef8 	bl	80015ac <findslot>
 80017bc:	4605      	mov	r5, r0
 80017be:	b930      	cbnz	r0, 80017ce <_swistat+0x1a>
 80017c0:	f000 f99a 	bl	8001af8 <__errno>
 80017c4:	2309      	movs	r3, #9
 80017c6:	6003      	str	r3, [r0, #0]
 80017c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017cc:	bd70      	pop	{r4, r5, r6, pc}
 80017ce:	6863      	ldr	r3, [r4, #4]
 80017d0:	260c      	movs	r6, #12
 80017d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017d6:	6063      	str	r3, [r4, #4]
 80017d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017dc:	64a3      	str	r3, [r4, #72]	; 0x48
 80017de:	4630      	mov	r0, r6
 80017e0:	4629      	mov	r1, r5
 80017e2:	beab      	bkpt	0x00ab
 80017e4:	4605      	mov	r5, r0
 80017e6:	4628      	mov	r0, r5
 80017e8:	f7ff fefa 	bl	80015e0 <checkerror>
 80017ec:	1c43      	adds	r3, r0, #1
 80017ee:	bf1c      	itt	ne
 80017f0:	6120      	strne	r0, [r4, #16]
 80017f2:	2000      	movne	r0, #0
 80017f4:	e7ea      	b.n	80017cc <_swistat+0x18>

080017f6 <_fstat>:
 80017f6:	460b      	mov	r3, r1
 80017f8:	b510      	push	{r4, lr}
 80017fa:	2100      	movs	r1, #0
 80017fc:	4604      	mov	r4, r0
 80017fe:	2258      	movs	r2, #88	; 0x58
 8001800:	4618      	mov	r0, r3
 8001802:	f000 fab8 	bl	8001d76 <memset>
 8001806:	4601      	mov	r1, r0
 8001808:	4620      	mov	r0, r4
 800180a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800180e:	f7ff bfd1 	b.w	80017b4 <_swistat>

08001812 <_stat>:
 8001812:	b538      	push	{r3, r4, r5, lr}
 8001814:	460d      	mov	r5, r1
 8001816:	4604      	mov	r4, r0
 8001818:	2258      	movs	r2, #88	; 0x58
 800181a:	2100      	movs	r1, #0
 800181c:	4628      	mov	r0, r5
 800181e:	f000 faaa 	bl	8001d76 <memset>
 8001822:	4620      	mov	r0, r4
 8001824:	2100      	movs	r1, #0
 8001826:	f000 f811 	bl	800184c <_swiopen>
 800182a:	1c43      	adds	r3, r0, #1
 800182c:	4604      	mov	r4, r0
 800182e:	d00b      	beq.n	8001848 <_stat+0x36>
 8001830:	686b      	ldr	r3, [r5, #4]
 8001832:	4629      	mov	r1, r5
 8001834:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8001838:	606b      	str	r3, [r5, #4]
 800183a:	f7ff ffbb 	bl	80017b4 <_swistat>
 800183e:	4605      	mov	r5, r0
 8001840:	4620      	mov	r0, r4
 8001842:	f7ff ff91 	bl	8001768 <_close>
 8001846:	462c      	mov	r4, r5
 8001848:	4620      	mov	r0, r4
 800184a:	bd38      	pop	{r3, r4, r5, pc}

0800184c <_swiopen>:
 800184c:	4b2b      	ldr	r3, [pc, #172]	; (80018fc <_swiopen+0xb0>)
 800184e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001852:	4681      	mov	r9, r0
 8001854:	460f      	mov	r7, r1
 8001856:	2500      	movs	r5, #0
 8001858:	461e      	mov	r6, r3
 800185a:	b097      	sub	sp, #92	; 0x5c
 800185c:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 8001860:	1c61      	adds	r1, r4, #1
 8001862:	d037      	beq.n	80018d4 <_swiopen+0x88>
 8001864:	3501      	adds	r5, #1
 8001866:	2d14      	cmp	r5, #20
 8001868:	d1f8      	bne.n	800185c <_swiopen+0x10>
 800186a:	f000 f945 	bl	8001af8 <__errno>
 800186e:	2318      	movs	r3, #24
 8001870:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001874:	6003      	str	r3, [r0, #0]
 8001876:	e03d      	b.n	80018f4 <_swiopen+0xa8>
 8001878:	f240 6301 	movw	r3, #1537	; 0x601
 800187c:	f3c7 4400 	ubfx	r4, r7, #16, #1
 8001880:	07ba      	lsls	r2, r7, #30
 8001882:	bf48      	it	mi
 8001884:	f044 0402 	orrmi.w	r4, r4, #2
 8001888:	421f      	tst	r7, r3
 800188a:	bf18      	it	ne
 800188c:	f044 0404 	orrne.w	r4, r4, #4
 8001890:	073b      	lsls	r3, r7, #28
 8001892:	bf48      	it	mi
 8001894:	f024 0404 	bicmi.w	r4, r4, #4
 8001898:	4648      	mov	r0, r9
 800189a:	bf48      	it	mi
 800189c:	f044 0408 	orrmi.w	r4, r4, #8
 80018a0:	f8cd 9000 	str.w	r9, [sp]
 80018a4:	f7fe fc52 	bl	800014c <strlen>
 80018a8:	e9cd 4001 	strd	r4, r0, [sp, #4]
 80018ac:	2401      	movs	r4, #1
 80018ae:	4620      	mov	r0, r4
 80018b0:	4641      	mov	r1, r8
 80018b2:	beab      	bkpt	0x00ab
 80018b4:	4604      	mov	r4, r0
 80018b6:	2c00      	cmp	r4, #0
 80018b8:	db07      	blt.n	80018ca <_swiopen+0x7e>
 80018ba:	2300      	movs	r3, #0
 80018bc:	f846 4035 	str.w	r4, [r6, r5, lsl #3]
 80018c0:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
 80018c4:	462c      	mov	r4, r5
 80018c6:	6073      	str	r3, [r6, #4]
 80018c8:	e014      	b.n	80018f4 <_swiopen+0xa8>
 80018ca:	4620      	mov	r0, r4
 80018cc:	f7ff fe98 	bl	8001600 <error>
 80018d0:	4604      	mov	r4, r0
 80018d2:	e00f      	b.n	80018f4 <_swiopen+0xa8>
 80018d4:	f407 6320 	and.w	r3, r7, #2560	; 0xa00
 80018d8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80018dc:	46e8      	mov	r8, sp
 80018de:	d1cb      	bne.n	8001878 <_swiopen+0x2c>
 80018e0:	4641      	mov	r1, r8
 80018e2:	4648      	mov	r0, r9
 80018e4:	f7ff ff95 	bl	8001812 <_stat>
 80018e8:	3001      	adds	r0, #1
 80018ea:	d0c5      	beq.n	8001878 <_swiopen+0x2c>
 80018ec:	f000 f904 	bl	8001af8 <__errno>
 80018f0:	2311      	movs	r3, #17
 80018f2:	6003      	str	r3, [r0, #0]
 80018f4:	4620      	mov	r0, r4
 80018f6:	b017      	add	sp, #92	; 0x5c
 80018f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018fc:	200000a4 	.word	0x200000a4

08001900 <_get_semihosting_exts>:
 8001900:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001904:	4606      	mov	r6, r0
 8001906:	460f      	mov	r7, r1
 8001908:	482a      	ldr	r0, [pc, #168]	; (80019b4 <_get_semihosting_exts+0xb4>)
 800190a:	2100      	movs	r1, #0
 800190c:	4615      	mov	r5, r2
 800190e:	f7ff ff9d 	bl	800184c <_swiopen>
 8001912:	4604      	mov	r4, r0
 8001914:	462a      	mov	r2, r5
 8001916:	2100      	movs	r1, #0
 8001918:	4630      	mov	r0, r6
 800191a:	f000 fa2c 	bl	8001d76 <memset>
 800191e:	1c63      	adds	r3, r4, #1
 8001920:	d016      	beq.n	8001950 <_get_semihosting_exts+0x50>
 8001922:	4620      	mov	r0, r4
 8001924:	f7ff fe42 	bl	80015ac <findslot>
 8001928:	f04f 080c 	mov.w	r8, #12
 800192c:	4681      	mov	r9, r0
 800192e:	4640      	mov	r0, r8
 8001930:	4649      	mov	r1, r9
 8001932:	beab      	bkpt	0x00ab
 8001934:	4680      	mov	r8, r0
 8001936:	4640      	mov	r0, r8
 8001938:	f7ff fe52 	bl	80015e0 <checkerror>
 800193c:	2803      	cmp	r0, #3
 800193e:	dd02      	ble.n	8001946 <_get_semihosting_exts+0x46>
 8001940:	1ec3      	subs	r3, r0, #3
 8001942:	42ab      	cmp	r3, r5
 8001944:	dc08      	bgt.n	8001958 <_get_semihosting_exts+0x58>
 8001946:	4620      	mov	r0, r4
 8001948:	f7ff ff0e 	bl	8001768 <_close>
 800194c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001950:	4620      	mov	r0, r4
 8001952:	b003      	add	sp, #12
 8001954:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001958:	2204      	movs	r2, #4
 800195a:	4620      	mov	r0, r4
 800195c:	eb0d 0102 	add.w	r1, sp, r2
 8001960:	f7ff fe6c 	bl	800163c <_read>
 8001964:	2803      	cmp	r0, #3
 8001966:	ddee      	ble.n	8001946 <_get_semihosting_exts+0x46>
 8001968:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800196c:	2b53      	cmp	r3, #83	; 0x53
 800196e:	d1ea      	bne.n	8001946 <_get_semihosting_exts+0x46>
 8001970:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001974:	2b48      	cmp	r3, #72	; 0x48
 8001976:	d1e6      	bne.n	8001946 <_get_semihosting_exts+0x46>
 8001978:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800197c:	2b46      	cmp	r3, #70	; 0x46
 800197e:	d1e2      	bne.n	8001946 <_get_semihosting_exts+0x46>
 8001980:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001984:	2b42      	cmp	r3, #66	; 0x42
 8001986:	d1de      	bne.n	8001946 <_get_semihosting_exts+0x46>
 8001988:	2201      	movs	r2, #1
 800198a:	4639      	mov	r1, r7
 800198c:	4620      	mov	r0, r4
 800198e:	f7ff fe6f 	bl	8001670 <_swilseek>
 8001992:	2800      	cmp	r0, #0
 8001994:	dbd7      	blt.n	8001946 <_get_semihosting_exts+0x46>
 8001996:	462a      	mov	r2, r5
 8001998:	4631      	mov	r1, r6
 800199a:	4620      	mov	r0, r4
 800199c:	f7ff fe4e 	bl	800163c <_read>
 80019a0:	4605      	mov	r5, r0
 80019a2:	4620      	mov	r0, r4
 80019a4:	f7ff fee0 	bl	8001768 <_close>
 80019a8:	4628      	mov	r0, r5
 80019aa:	f7ff fe19 	bl	80015e0 <checkerror>
 80019ae:	4604      	mov	r4, r0
 80019b0:	e7ce      	b.n	8001950 <_get_semihosting_exts+0x50>
 80019b2:	bf00      	nop
 80019b4:	080038c6 	.word	0x080038c6

080019b8 <initialise_semihosting_exts>:
 80019b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80019ba:	2100      	movs	r1, #0
 80019bc:	2201      	movs	r2, #1
 80019be:	4d09      	ldr	r5, [pc, #36]	; (80019e4 <initialise_semihosting_exts+0x2c>)
 80019c0:	4c09      	ldr	r4, [pc, #36]	; (80019e8 <initialise_semihosting_exts+0x30>)
 80019c2:	a801      	add	r0, sp, #4
 80019c4:	6029      	str	r1, [r5, #0]
 80019c6:	6022      	str	r2, [r4, #0]
 80019c8:	f7ff ff9a 	bl	8001900 <_get_semihosting_exts>
 80019cc:	2800      	cmp	r0, #0
 80019ce:	dd07      	ble.n	80019e0 <initialise_semihosting_exts+0x28>
 80019d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80019d4:	f003 0201 	and.w	r2, r3, #1
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	602a      	str	r2, [r5, #0]
 80019de:	6023      	str	r3, [r4, #0]
 80019e0:	b003      	add	sp, #12
 80019e2:	bd30      	pop	{r4, r5, pc}
 80019e4:	2000000c 	.word	0x2000000c
 80019e8:	20000010 	.word	0x20000010

080019ec <_has_ext_stdout_stderr>:
 80019ec:	b510      	push	{r4, lr}
 80019ee:	4c04      	ldr	r4, [pc, #16]	; (8001a00 <_has_ext_stdout_stderr+0x14>)
 80019f0:	6822      	ldr	r2, [r4, #0]
 80019f2:	2a00      	cmp	r2, #0
 80019f4:	da01      	bge.n	80019fa <_has_ext_stdout_stderr+0xe>
 80019f6:	f7ff ffdf 	bl	80019b8 <initialise_semihosting_exts>
 80019fa:	6820      	ldr	r0, [r4, #0]
 80019fc:	bd10      	pop	{r4, pc}
 80019fe:	bf00      	nop
 8001a00:	20000010 	.word	0x20000010

08001a04 <initialise_monitor_handles>:
 8001a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a08:	2303      	movs	r3, #3
 8001a0a:	2400      	movs	r4, #0
 8001a0c:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8001abc <initialise_monitor_handles+0xb8>
 8001a10:	b085      	sub	sp, #20
 8001a12:	f8cd 9004 	str.w	r9, [sp, #4]
 8001a16:	f10d 0804 	add.w	r8, sp, #4
 8001a1a:	9303      	str	r3, [sp, #12]
 8001a1c:	2501      	movs	r5, #1
 8001a1e:	9402      	str	r4, [sp, #8]
 8001a20:	4628      	mov	r0, r5
 8001a22:	4641      	mov	r1, r8
 8001a24:	beab      	bkpt	0x00ab
 8001a26:	4605      	mov	r5, r0
 8001a28:	4a20      	ldr	r2, [pc, #128]	; (8001aac <initialise_monitor_handles+0xa8>)
 8001a2a:	4623      	mov	r3, r4
 8001a2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a30:	4614      	mov	r4, r2
 8001a32:	4e1f      	ldr	r6, [pc, #124]	; (8001ab0 <initialise_monitor_handles+0xac>)
 8001a34:	6035      	str	r5, [r6, #0]
 8001a36:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	2b14      	cmp	r3, #20
 8001a3e:	d1fa      	bne.n	8001a36 <initialise_monitor_handles+0x32>
 8001a40:	f7ff ffd4 	bl	80019ec <_has_ext_stdout_stderr>
 8001a44:	4d1b      	ldr	r5, [pc, #108]	; (8001ab4 <initialise_monitor_handles+0xb0>)
 8001a46:	b1d0      	cbz	r0, 8001a7e <initialise_monitor_handles+0x7a>
 8001a48:	f04f 0a03 	mov.w	sl, #3
 8001a4c:	2304      	movs	r3, #4
 8001a4e:	f8cd 9004 	str.w	r9, [sp, #4]
 8001a52:	2701      	movs	r7, #1
 8001a54:	f8cd a00c 	str.w	sl, [sp, #12]
 8001a58:	9302      	str	r3, [sp, #8]
 8001a5a:	4638      	mov	r0, r7
 8001a5c:	4641      	mov	r1, r8
 8001a5e:	beab      	bkpt	0x00ab
 8001a60:	4683      	mov	fp, r0
 8001a62:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <initialise_monitor_handles+0xb4>)
 8001a64:	f8cd 9004 	str.w	r9, [sp, #4]
 8001a68:	f8c3 b000 	str.w	fp, [r3]
 8001a6c:	2308      	movs	r3, #8
 8001a6e:	f8cd a00c 	str.w	sl, [sp, #12]
 8001a72:	9302      	str	r3, [sp, #8]
 8001a74:	4638      	mov	r0, r7
 8001a76:	4641      	mov	r1, r8
 8001a78:	beab      	bkpt	0x00ab
 8001a7a:	4607      	mov	r7, r0
 8001a7c:	602f      	str	r7, [r5, #0]
 8001a7e:	682b      	ldr	r3, [r5, #0]
 8001a80:	3301      	adds	r3, #1
 8001a82:	bf02      	ittt	eq
 8001a84:	4b0c      	ldreq	r3, [pc, #48]	; (8001ab8 <initialise_monitor_handles+0xb4>)
 8001a86:	681b      	ldreq	r3, [r3, #0]
 8001a88:	602b      	streq	r3, [r5, #0]
 8001a8a:	6833      	ldr	r3, [r6, #0]
 8001a8c:	2600      	movs	r6, #0
 8001a8e:	6023      	str	r3, [r4, #0]
 8001a90:	6066      	str	r6, [r4, #4]
 8001a92:	f7ff ffab 	bl	80019ec <_has_ext_stdout_stderr>
 8001a96:	b130      	cbz	r0, 8001aa6 <initialise_monitor_handles+0xa2>
 8001a98:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <initialise_monitor_handles+0xb4>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8001aa0:	682b      	ldr	r3, [r5, #0]
 8001aa2:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8001aa6:	b005      	add	sp, #20
 8001aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001aac:	200000a4 	.word	0x200000a4
 8001ab0:	2000009c 	.word	0x2000009c
 8001ab4:	20000098 	.word	0x20000098
 8001ab8:	200000a0 	.word	0x200000a0
 8001abc:	080038dc 	.word	0x080038dc

08001ac0 <_isatty>:
 8001ac0:	b570      	push	{r4, r5, r6, lr}
 8001ac2:	f7ff fd73 	bl	80015ac <findslot>
 8001ac6:	2509      	movs	r5, #9
 8001ac8:	4604      	mov	r4, r0
 8001aca:	b920      	cbnz	r0, 8001ad6 <_isatty+0x16>
 8001acc:	f000 f814 	bl	8001af8 <__errno>
 8001ad0:	6005      	str	r5, [r0, #0]
 8001ad2:	4620      	mov	r0, r4
 8001ad4:	bd70      	pop	{r4, r5, r6, pc}
 8001ad6:	4628      	mov	r0, r5
 8001ad8:	4621      	mov	r1, r4
 8001ada:	beab      	bkpt	0x00ab
 8001adc:	4604      	mov	r4, r0
 8001ade:	2c01      	cmp	r4, #1
 8001ae0:	d0f7      	beq.n	8001ad2 <_isatty+0x12>
 8001ae2:	f000 f809 	bl	8001af8 <__errno>
 8001ae6:	2400      	movs	r4, #0
 8001ae8:	4605      	mov	r5, r0
 8001aea:	2613      	movs	r6, #19
 8001aec:	4630      	mov	r0, r6
 8001aee:	4621      	mov	r1, r4
 8001af0:	beab      	bkpt	0x00ab
 8001af2:	4606      	mov	r6, r0
 8001af4:	602e      	str	r6, [r5, #0]
 8001af6:	e7ec      	b.n	8001ad2 <_isatty+0x12>

08001af8 <__errno>:
 8001af8:	4b01      	ldr	r3, [pc, #4]	; (8001b00 <__errno+0x8>)
 8001afa:	6818      	ldr	r0, [r3, #0]
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	20000014 	.word	0x20000014

08001b04 <std>:
 8001b04:	2300      	movs	r3, #0
 8001b06:	b510      	push	{r4, lr}
 8001b08:	4604      	mov	r4, r0
 8001b0a:	e9c0 3300 	strd	r3, r3, [r0]
 8001b0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001b12:	6083      	str	r3, [r0, #8]
 8001b14:	8181      	strh	r1, [r0, #12]
 8001b16:	6643      	str	r3, [r0, #100]	; 0x64
 8001b18:	81c2      	strh	r2, [r0, #14]
 8001b1a:	6183      	str	r3, [r0, #24]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	2208      	movs	r2, #8
 8001b20:	305c      	adds	r0, #92	; 0x5c
 8001b22:	f000 f928 	bl	8001d76 <memset>
 8001b26:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <std+0x38>)
 8001b28:	6224      	str	r4, [r4, #32]
 8001b2a:	6263      	str	r3, [r4, #36]	; 0x24
 8001b2c:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <std+0x3c>)
 8001b2e:	62a3      	str	r3, [r4, #40]	; 0x28
 8001b30:	4b04      	ldr	r3, [pc, #16]	; (8001b44 <std+0x40>)
 8001b32:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001b34:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <std+0x44>)
 8001b36:	6323      	str	r3, [r4, #48]	; 0x30
 8001b38:	bd10      	pop	{r4, pc}
 8001b3a:	bf00      	nop
 8001b3c:	08001fd1 	.word	0x08001fd1
 8001b40:	08001ff3 	.word	0x08001ff3
 8001b44:	0800202b 	.word	0x0800202b
 8001b48:	0800204f 	.word	0x0800204f

08001b4c <_cleanup_r>:
 8001b4c:	4901      	ldr	r1, [pc, #4]	; (8001b54 <_cleanup_r+0x8>)
 8001b4e:	f000 b8cc 	b.w	8001cea <_fwalk_reent>
 8001b52:	bf00      	nop
 8001b54:	08002329 	.word	0x08002329

08001b58 <__sfmoreglue>:
 8001b58:	b570      	push	{r4, r5, r6, lr}
 8001b5a:	2568      	movs	r5, #104	; 0x68
 8001b5c:	1e4a      	subs	r2, r1, #1
 8001b5e:	4355      	muls	r5, r2
 8001b60:	460e      	mov	r6, r1
 8001b62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001b66:	f000 f90f 	bl	8001d88 <_malloc_r>
 8001b6a:	4604      	mov	r4, r0
 8001b6c:	b140      	cbz	r0, 8001b80 <__sfmoreglue+0x28>
 8001b6e:	2100      	movs	r1, #0
 8001b70:	e9c0 1600 	strd	r1, r6, [r0]
 8001b74:	300c      	adds	r0, #12
 8001b76:	60a0      	str	r0, [r4, #8]
 8001b78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001b7c:	f000 f8fb 	bl	8001d76 <memset>
 8001b80:	4620      	mov	r0, r4
 8001b82:	bd70      	pop	{r4, r5, r6, pc}

08001b84 <__sfp_lock_acquire>:
 8001b84:	4801      	ldr	r0, [pc, #4]	; (8001b8c <__sfp_lock_acquire+0x8>)
 8001b86:	f000 b8f4 	b.w	8001d72 <__retarget_lock_acquire_recursive>
 8001b8a:	bf00      	nop
 8001b8c:	200001a0 	.word	0x200001a0

08001b90 <__sfp_lock_release>:
 8001b90:	4801      	ldr	r0, [pc, #4]	; (8001b98 <__sfp_lock_release+0x8>)
 8001b92:	f000 b8ef 	b.w	8001d74 <__retarget_lock_release_recursive>
 8001b96:	bf00      	nop
 8001b98:	200001a0 	.word	0x200001a0

08001b9c <__sinit_lock_acquire>:
 8001b9c:	4801      	ldr	r0, [pc, #4]	; (8001ba4 <__sinit_lock_acquire+0x8>)
 8001b9e:	f000 b8e8 	b.w	8001d72 <__retarget_lock_acquire_recursive>
 8001ba2:	bf00      	nop
 8001ba4:	2000019b 	.word	0x2000019b

08001ba8 <__sinit_lock_release>:
 8001ba8:	4801      	ldr	r0, [pc, #4]	; (8001bb0 <__sinit_lock_release+0x8>)
 8001baa:	f000 b8e3 	b.w	8001d74 <__retarget_lock_release_recursive>
 8001bae:	bf00      	nop
 8001bb0:	2000019b 	.word	0x2000019b

08001bb4 <__sinit>:
 8001bb4:	b510      	push	{r4, lr}
 8001bb6:	4604      	mov	r4, r0
 8001bb8:	f7ff fff0 	bl	8001b9c <__sinit_lock_acquire>
 8001bbc:	69a3      	ldr	r3, [r4, #24]
 8001bbe:	b11b      	cbz	r3, 8001bc8 <__sinit+0x14>
 8001bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001bc4:	f7ff bff0 	b.w	8001ba8 <__sinit_lock_release>
 8001bc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001bcc:	6523      	str	r3, [r4, #80]	; 0x50
 8001bce:	4b13      	ldr	r3, [pc, #76]	; (8001c1c <__sinit+0x68>)
 8001bd0:	4a13      	ldr	r2, [pc, #76]	; (8001c20 <__sinit+0x6c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	62a2      	str	r2, [r4, #40]	; 0x28
 8001bd6:	42a3      	cmp	r3, r4
 8001bd8:	bf08      	it	eq
 8001bda:	2301      	moveq	r3, #1
 8001bdc:	4620      	mov	r0, r4
 8001bde:	bf08      	it	eq
 8001be0:	61a3      	streq	r3, [r4, #24]
 8001be2:	f000 f81f 	bl	8001c24 <__sfp>
 8001be6:	6060      	str	r0, [r4, #4]
 8001be8:	4620      	mov	r0, r4
 8001bea:	f000 f81b 	bl	8001c24 <__sfp>
 8001bee:	60a0      	str	r0, [r4, #8]
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	f000 f817 	bl	8001c24 <__sfp>
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2104      	movs	r1, #4
 8001bfa:	60e0      	str	r0, [r4, #12]
 8001bfc:	6860      	ldr	r0, [r4, #4]
 8001bfe:	f7ff ff81 	bl	8001b04 <std>
 8001c02:	2201      	movs	r2, #1
 8001c04:	2109      	movs	r1, #9
 8001c06:	68a0      	ldr	r0, [r4, #8]
 8001c08:	f7ff ff7c 	bl	8001b04 <std>
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	2112      	movs	r1, #18
 8001c10:	68e0      	ldr	r0, [r4, #12]
 8001c12:	f7ff ff77 	bl	8001b04 <std>
 8001c16:	2301      	movs	r3, #1
 8001c18:	61a3      	str	r3, [r4, #24]
 8001c1a:	e7d1      	b.n	8001bc0 <__sinit+0xc>
 8001c1c:	08003940 	.word	0x08003940
 8001c20:	08001b4d 	.word	0x08001b4d

08001c24 <__sfp>:
 8001c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c26:	4607      	mov	r7, r0
 8001c28:	f7ff ffac 	bl	8001b84 <__sfp_lock_acquire>
 8001c2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ca8 <__sfp+0x84>)
 8001c2e:	681e      	ldr	r6, [r3, #0]
 8001c30:	69b3      	ldr	r3, [r6, #24]
 8001c32:	b913      	cbnz	r3, 8001c3a <__sfp+0x16>
 8001c34:	4630      	mov	r0, r6
 8001c36:	f7ff ffbd 	bl	8001bb4 <__sinit>
 8001c3a:	3648      	adds	r6, #72	; 0x48
 8001c3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001c40:	3b01      	subs	r3, #1
 8001c42:	d503      	bpl.n	8001c4c <__sfp+0x28>
 8001c44:	6833      	ldr	r3, [r6, #0]
 8001c46:	b30b      	cbz	r3, 8001c8c <__sfp+0x68>
 8001c48:	6836      	ldr	r6, [r6, #0]
 8001c4a:	e7f7      	b.n	8001c3c <__sfp+0x18>
 8001c4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001c50:	b9d5      	cbnz	r5, 8001c88 <__sfp+0x64>
 8001c52:	4b16      	ldr	r3, [pc, #88]	; (8001cac <__sfp+0x88>)
 8001c54:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001c58:	60e3      	str	r3, [r4, #12]
 8001c5a:	6665      	str	r5, [r4, #100]	; 0x64
 8001c5c:	f000 f888 	bl	8001d70 <__retarget_lock_init_recursive>
 8001c60:	f7ff ff96 	bl	8001b90 <__sfp_lock_release>
 8001c64:	2208      	movs	r2, #8
 8001c66:	4629      	mov	r1, r5
 8001c68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001c6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001c70:	6025      	str	r5, [r4, #0]
 8001c72:	61a5      	str	r5, [r4, #24]
 8001c74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001c78:	f000 f87d 	bl	8001d76 <memset>
 8001c7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001c80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001c84:	4620      	mov	r0, r4
 8001c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c88:	3468      	adds	r4, #104	; 0x68
 8001c8a:	e7d9      	b.n	8001c40 <__sfp+0x1c>
 8001c8c:	2104      	movs	r1, #4
 8001c8e:	4638      	mov	r0, r7
 8001c90:	f7ff ff62 	bl	8001b58 <__sfmoreglue>
 8001c94:	4604      	mov	r4, r0
 8001c96:	6030      	str	r0, [r6, #0]
 8001c98:	2800      	cmp	r0, #0
 8001c9a:	d1d5      	bne.n	8001c48 <__sfp+0x24>
 8001c9c:	f7ff ff78 	bl	8001b90 <__sfp_lock_release>
 8001ca0:	230c      	movs	r3, #12
 8001ca2:	603b      	str	r3, [r7, #0]
 8001ca4:	e7ee      	b.n	8001c84 <__sfp+0x60>
 8001ca6:	bf00      	nop
 8001ca8:	08003940 	.word	0x08003940
 8001cac:	ffff0001 	.word	0xffff0001

08001cb0 <_fwalk>:
 8001cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cb4:	460f      	mov	r7, r1
 8001cb6:	2600      	movs	r6, #0
 8001cb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001cbc:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8001cc0:	f1b8 0801 	subs.w	r8, r8, #1
 8001cc4:	d505      	bpl.n	8001cd2 <_fwalk+0x22>
 8001cc6:	6824      	ldr	r4, [r4, #0]
 8001cc8:	2c00      	cmp	r4, #0
 8001cca:	d1f7      	bne.n	8001cbc <_fwalk+0xc>
 8001ccc:	4630      	mov	r0, r6
 8001cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cd2:	89ab      	ldrh	r3, [r5, #12]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d906      	bls.n	8001ce6 <_fwalk+0x36>
 8001cd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	d002      	beq.n	8001ce6 <_fwalk+0x36>
 8001ce0:	4628      	mov	r0, r5
 8001ce2:	47b8      	blx	r7
 8001ce4:	4306      	orrs	r6, r0
 8001ce6:	3568      	adds	r5, #104	; 0x68
 8001ce8:	e7ea      	b.n	8001cc0 <_fwalk+0x10>

08001cea <_fwalk_reent>:
 8001cea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001cee:	4606      	mov	r6, r0
 8001cf0:	4688      	mov	r8, r1
 8001cf2:	2700      	movs	r7, #0
 8001cf4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001cf8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001cfc:	f1b9 0901 	subs.w	r9, r9, #1
 8001d00:	d505      	bpl.n	8001d0e <_fwalk_reent+0x24>
 8001d02:	6824      	ldr	r4, [r4, #0]
 8001d04:	2c00      	cmp	r4, #0
 8001d06:	d1f7      	bne.n	8001cf8 <_fwalk_reent+0xe>
 8001d08:	4638      	mov	r0, r7
 8001d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d0e:	89ab      	ldrh	r3, [r5, #12]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d907      	bls.n	8001d24 <_fwalk_reent+0x3a>
 8001d14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	d003      	beq.n	8001d24 <_fwalk_reent+0x3a>
 8001d1c:	4629      	mov	r1, r5
 8001d1e:	4630      	mov	r0, r6
 8001d20:	47c0      	blx	r8
 8001d22:	4307      	orrs	r7, r0
 8001d24:	3568      	adds	r5, #104	; 0x68
 8001d26:	e7e9      	b.n	8001cfc <_fwalk_reent+0x12>

08001d28 <__libc_init_array>:
 8001d28:	b570      	push	{r4, r5, r6, lr}
 8001d2a:	2600      	movs	r6, #0
 8001d2c:	4d0c      	ldr	r5, [pc, #48]	; (8001d60 <__libc_init_array+0x38>)
 8001d2e:	4c0d      	ldr	r4, [pc, #52]	; (8001d64 <__libc_init_array+0x3c>)
 8001d30:	1b64      	subs	r4, r4, r5
 8001d32:	10a4      	asrs	r4, r4, #2
 8001d34:	42a6      	cmp	r6, r4
 8001d36:	d109      	bne.n	8001d4c <__libc_init_array+0x24>
 8001d38:	f001 fd82 	bl	8003840 <_init>
 8001d3c:	2600      	movs	r6, #0
 8001d3e:	4d0a      	ldr	r5, [pc, #40]	; (8001d68 <__libc_init_array+0x40>)
 8001d40:	4c0a      	ldr	r4, [pc, #40]	; (8001d6c <__libc_init_array+0x44>)
 8001d42:	1b64      	subs	r4, r4, r5
 8001d44:	10a4      	asrs	r4, r4, #2
 8001d46:	42a6      	cmp	r6, r4
 8001d48:	d105      	bne.n	8001d56 <__libc_init_array+0x2e>
 8001d4a:	bd70      	pop	{r4, r5, r6, pc}
 8001d4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d50:	4798      	blx	r3
 8001d52:	3601      	adds	r6, #1
 8001d54:	e7ee      	b.n	8001d34 <__libc_init_array+0xc>
 8001d56:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d5a:	4798      	blx	r3
 8001d5c:	3601      	adds	r6, #1
 8001d5e:	e7f2      	b.n	8001d46 <__libc_init_array+0x1e>
 8001d60:	08003a94 	.word	0x08003a94
 8001d64:	08003a94 	.word	0x08003a94
 8001d68:	08003a94 	.word	0x08003a94
 8001d6c:	08003a98 	.word	0x08003a98

08001d70 <__retarget_lock_init_recursive>:
 8001d70:	4770      	bx	lr

08001d72 <__retarget_lock_acquire_recursive>:
 8001d72:	4770      	bx	lr

08001d74 <__retarget_lock_release_recursive>:
 8001d74:	4770      	bx	lr

08001d76 <memset>:
 8001d76:	4603      	mov	r3, r0
 8001d78:	4402      	add	r2, r0
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d100      	bne.n	8001d80 <memset+0xa>
 8001d7e:	4770      	bx	lr
 8001d80:	f803 1b01 	strb.w	r1, [r3], #1
 8001d84:	e7f9      	b.n	8001d7a <memset+0x4>
	...

08001d88 <_malloc_r>:
 8001d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d8a:	1ccd      	adds	r5, r1, #3
 8001d8c:	f025 0503 	bic.w	r5, r5, #3
 8001d90:	3508      	adds	r5, #8
 8001d92:	2d0c      	cmp	r5, #12
 8001d94:	bf38      	it	cc
 8001d96:	250c      	movcc	r5, #12
 8001d98:	2d00      	cmp	r5, #0
 8001d9a:	4606      	mov	r6, r0
 8001d9c:	db01      	blt.n	8001da2 <_malloc_r+0x1a>
 8001d9e:	42a9      	cmp	r1, r5
 8001da0:	d903      	bls.n	8001daa <_malloc_r+0x22>
 8001da2:	230c      	movs	r3, #12
 8001da4:	6033      	str	r3, [r6, #0]
 8001da6:	2000      	movs	r0, #0
 8001da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001daa:	f000 fb81 	bl	80024b0 <__malloc_lock>
 8001dae:	4921      	ldr	r1, [pc, #132]	; (8001e34 <_malloc_r+0xac>)
 8001db0:	680a      	ldr	r2, [r1, #0]
 8001db2:	4614      	mov	r4, r2
 8001db4:	b99c      	cbnz	r4, 8001dde <_malloc_r+0x56>
 8001db6:	4f20      	ldr	r7, [pc, #128]	; (8001e38 <_malloc_r+0xb0>)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	b923      	cbnz	r3, 8001dc6 <_malloc_r+0x3e>
 8001dbc:	4621      	mov	r1, r4
 8001dbe:	4630      	mov	r0, r6
 8001dc0:	f000 f8de 	bl	8001f80 <_sbrk_r>
 8001dc4:	6038      	str	r0, [r7, #0]
 8001dc6:	4629      	mov	r1, r5
 8001dc8:	4630      	mov	r0, r6
 8001dca:	f000 f8d9 	bl	8001f80 <_sbrk_r>
 8001dce:	1c43      	adds	r3, r0, #1
 8001dd0:	d123      	bne.n	8001e1a <_malloc_r+0x92>
 8001dd2:	230c      	movs	r3, #12
 8001dd4:	4630      	mov	r0, r6
 8001dd6:	6033      	str	r3, [r6, #0]
 8001dd8:	f000 fb70 	bl	80024bc <__malloc_unlock>
 8001ddc:	e7e3      	b.n	8001da6 <_malloc_r+0x1e>
 8001dde:	6823      	ldr	r3, [r4, #0]
 8001de0:	1b5b      	subs	r3, r3, r5
 8001de2:	d417      	bmi.n	8001e14 <_malloc_r+0x8c>
 8001de4:	2b0b      	cmp	r3, #11
 8001de6:	d903      	bls.n	8001df0 <_malloc_r+0x68>
 8001de8:	6023      	str	r3, [r4, #0]
 8001dea:	441c      	add	r4, r3
 8001dec:	6025      	str	r5, [r4, #0]
 8001dee:	e004      	b.n	8001dfa <_malloc_r+0x72>
 8001df0:	6863      	ldr	r3, [r4, #4]
 8001df2:	42a2      	cmp	r2, r4
 8001df4:	bf0c      	ite	eq
 8001df6:	600b      	streq	r3, [r1, #0]
 8001df8:	6053      	strne	r3, [r2, #4]
 8001dfa:	4630      	mov	r0, r6
 8001dfc:	f000 fb5e 	bl	80024bc <__malloc_unlock>
 8001e00:	f104 000b 	add.w	r0, r4, #11
 8001e04:	1d23      	adds	r3, r4, #4
 8001e06:	f020 0007 	bic.w	r0, r0, #7
 8001e0a:	1ac2      	subs	r2, r0, r3
 8001e0c:	d0cc      	beq.n	8001da8 <_malloc_r+0x20>
 8001e0e:	1a1b      	subs	r3, r3, r0
 8001e10:	50a3      	str	r3, [r4, r2]
 8001e12:	e7c9      	b.n	8001da8 <_malloc_r+0x20>
 8001e14:	4622      	mov	r2, r4
 8001e16:	6864      	ldr	r4, [r4, #4]
 8001e18:	e7cc      	b.n	8001db4 <_malloc_r+0x2c>
 8001e1a:	1cc4      	adds	r4, r0, #3
 8001e1c:	f024 0403 	bic.w	r4, r4, #3
 8001e20:	42a0      	cmp	r0, r4
 8001e22:	d0e3      	beq.n	8001dec <_malloc_r+0x64>
 8001e24:	1a21      	subs	r1, r4, r0
 8001e26:	4630      	mov	r0, r6
 8001e28:	f000 f8aa 	bl	8001f80 <_sbrk_r>
 8001e2c:	3001      	adds	r0, #1
 8001e2e:	d1dd      	bne.n	8001dec <_malloc_r+0x64>
 8001e30:	e7cf      	b.n	8001dd2 <_malloc_r+0x4a>
 8001e32:	bf00      	nop
 8001e34:	20000144 	.word	0x20000144
 8001e38:	20000148 	.word	0x20000148

08001e3c <iprintf>:
 8001e3c:	b40f      	push	{r0, r1, r2, r3}
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <iprintf+0x2c>)
 8001e40:	b513      	push	{r0, r1, r4, lr}
 8001e42:	681c      	ldr	r4, [r3, #0]
 8001e44:	b124      	cbz	r4, 8001e50 <iprintf+0x14>
 8001e46:	69a3      	ldr	r3, [r4, #24]
 8001e48:	b913      	cbnz	r3, 8001e50 <iprintf+0x14>
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	f7ff feb2 	bl	8001bb4 <__sinit>
 8001e50:	ab05      	add	r3, sp, #20
 8001e52:	4620      	mov	r0, r4
 8001e54:	9a04      	ldr	r2, [sp, #16]
 8001e56:	68a1      	ldr	r1, [r4, #8]
 8001e58:	9301      	str	r3, [sp, #4]
 8001e5a:	f000 fba9 	bl	80025b0 <_vfiprintf_r>
 8001e5e:	b002      	add	sp, #8
 8001e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e64:	b004      	add	sp, #16
 8001e66:	4770      	bx	lr
 8001e68:	20000014 	.word	0x20000014

08001e6c <putchar>:
 8001e6c:	b538      	push	{r3, r4, r5, lr}
 8001e6e:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <putchar+0x24>)
 8001e70:	4605      	mov	r5, r0
 8001e72:	681c      	ldr	r4, [r3, #0]
 8001e74:	b124      	cbz	r4, 8001e80 <putchar+0x14>
 8001e76:	69a3      	ldr	r3, [r4, #24]
 8001e78:	b913      	cbnz	r3, 8001e80 <putchar+0x14>
 8001e7a:	4620      	mov	r0, r4
 8001e7c:	f7ff fe9a 	bl	8001bb4 <__sinit>
 8001e80:	4629      	mov	r1, r5
 8001e82:	4620      	mov	r0, r4
 8001e84:	68a2      	ldr	r2, [r4, #8]
 8001e86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e8a:	f001 b96d 	b.w	8003168 <_putc_r>
 8001e8e:	bf00      	nop
 8001e90:	20000014 	.word	0x20000014

08001e94 <_puts_r>:
 8001e94:	b570      	push	{r4, r5, r6, lr}
 8001e96:	460e      	mov	r6, r1
 8001e98:	4605      	mov	r5, r0
 8001e9a:	b118      	cbz	r0, 8001ea4 <_puts_r+0x10>
 8001e9c:	6983      	ldr	r3, [r0, #24]
 8001e9e:	b90b      	cbnz	r3, 8001ea4 <_puts_r+0x10>
 8001ea0:	f7ff fe88 	bl	8001bb4 <__sinit>
 8001ea4:	69ab      	ldr	r3, [r5, #24]
 8001ea6:	68ac      	ldr	r4, [r5, #8]
 8001ea8:	b913      	cbnz	r3, 8001eb0 <_puts_r+0x1c>
 8001eaa:	4628      	mov	r0, r5
 8001eac:	f7ff fe82 	bl	8001bb4 <__sinit>
 8001eb0:	4b2c      	ldr	r3, [pc, #176]	; (8001f64 <_puts_r+0xd0>)
 8001eb2:	429c      	cmp	r4, r3
 8001eb4:	d120      	bne.n	8001ef8 <_puts_r+0x64>
 8001eb6:	686c      	ldr	r4, [r5, #4]
 8001eb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001eba:	07db      	lsls	r3, r3, #31
 8001ebc:	d405      	bmi.n	8001eca <_puts_r+0x36>
 8001ebe:	89a3      	ldrh	r3, [r4, #12]
 8001ec0:	0598      	lsls	r0, r3, #22
 8001ec2:	d402      	bmi.n	8001eca <_puts_r+0x36>
 8001ec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001ec6:	f7ff ff54 	bl	8001d72 <__retarget_lock_acquire_recursive>
 8001eca:	89a3      	ldrh	r3, [r4, #12]
 8001ecc:	0719      	lsls	r1, r3, #28
 8001ece:	d51d      	bpl.n	8001f0c <_puts_r+0x78>
 8001ed0:	6923      	ldr	r3, [r4, #16]
 8001ed2:	b1db      	cbz	r3, 8001f0c <_puts_r+0x78>
 8001ed4:	3e01      	subs	r6, #1
 8001ed6:	68a3      	ldr	r3, [r4, #8]
 8001ed8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001edc:	3b01      	subs	r3, #1
 8001ede:	60a3      	str	r3, [r4, #8]
 8001ee0:	bb39      	cbnz	r1, 8001f32 <_puts_r+0x9e>
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	da38      	bge.n	8001f58 <_puts_r+0xc4>
 8001ee6:	4622      	mov	r2, r4
 8001ee8:	210a      	movs	r1, #10
 8001eea:	4628      	mov	r0, r5
 8001eec:	f000 f8b4 	bl	8002058 <__swbuf_r>
 8001ef0:	3001      	adds	r0, #1
 8001ef2:	d011      	beq.n	8001f18 <_puts_r+0x84>
 8001ef4:	250a      	movs	r5, #10
 8001ef6:	e011      	b.n	8001f1c <_puts_r+0x88>
 8001ef8:	4b1b      	ldr	r3, [pc, #108]	; (8001f68 <_puts_r+0xd4>)
 8001efa:	429c      	cmp	r4, r3
 8001efc:	d101      	bne.n	8001f02 <_puts_r+0x6e>
 8001efe:	68ac      	ldr	r4, [r5, #8]
 8001f00:	e7da      	b.n	8001eb8 <_puts_r+0x24>
 8001f02:	4b1a      	ldr	r3, [pc, #104]	; (8001f6c <_puts_r+0xd8>)
 8001f04:	429c      	cmp	r4, r3
 8001f06:	bf08      	it	eq
 8001f08:	68ec      	ldreq	r4, [r5, #12]
 8001f0a:	e7d5      	b.n	8001eb8 <_puts_r+0x24>
 8001f0c:	4621      	mov	r1, r4
 8001f0e:	4628      	mov	r0, r5
 8001f10:	f000 f906 	bl	8002120 <__swsetup_r>
 8001f14:	2800      	cmp	r0, #0
 8001f16:	d0dd      	beq.n	8001ed4 <_puts_r+0x40>
 8001f18:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001f1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001f1e:	07da      	lsls	r2, r3, #31
 8001f20:	d405      	bmi.n	8001f2e <_puts_r+0x9a>
 8001f22:	89a3      	ldrh	r3, [r4, #12]
 8001f24:	059b      	lsls	r3, r3, #22
 8001f26:	d402      	bmi.n	8001f2e <_puts_r+0x9a>
 8001f28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f2a:	f7ff ff23 	bl	8001d74 <__retarget_lock_release_recursive>
 8001f2e:	4628      	mov	r0, r5
 8001f30:	bd70      	pop	{r4, r5, r6, pc}
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	da04      	bge.n	8001f40 <_puts_r+0xac>
 8001f36:	69a2      	ldr	r2, [r4, #24]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	dc06      	bgt.n	8001f4a <_puts_r+0xb6>
 8001f3c:	290a      	cmp	r1, #10
 8001f3e:	d004      	beq.n	8001f4a <_puts_r+0xb6>
 8001f40:	6823      	ldr	r3, [r4, #0]
 8001f42:	1c5a      	adds	r2, r3, #1
 8001f44:	6022      	str	r2, [r4, #0]
 8001f46:	7019      	strb	r1, [r3, #0]
 8001f48:	e7c5      	b.n	8001ed6 <_puts_r+0x42>
 8001f4a:	4622      	mov	r2, r4
 8001f4c:	4628      	mov	r0, r5
 8001f4e:	f000 f883 	bl	8002058 <__swbuf_r>
 8001f52:	3001      	adds	r0, #1
 8001f54:	d1bf      	bne.n	8001ed6 <_puts_r+0x42>
 8001f56:	e7df      	b.n	8001f18 <_puts_r+0x84>
 8001f58:	250a      	movs	r5, #10
 8001f5a:	6823      	ldr	r3, [r4, #0]
 8001f5c:	1c5a      	adds	r2, r3, #1
 8001f5e:	6022      	str	r2, [r4, #0]
 8001f60:	701d      	strb	r5, [r3, #0]
 8001f62:	e7db      	b.n	8001f1c <_puts_r+0x88>
 8001f64:	08003900 	.word	0x08003900
 8001f68:	08003920 	.word	0x08003920
 8001f6c:	080038e0 	.word	0x080038e0

08001f70 <puts>:
 8001f70:	4b02      	ldr	r3, [pc, #8]	; (8001f7c <puts+0xc>)
 8001f72:	4601      	mov	r1, r0
 8001f74:	6818      	ldr	r0, [r3, #0]
 8001f76:	f7ff bf8d 	b.w	8001e94 <_puts_r>
 8001f7a:	bf00      	nop
 8001f7c:	20000014 	.word	0x20000014

08001f80 <_sbrk_r>:
 8001f80:	b538      	push	{r3, r4, r5, lr}
 8001f82:	2300      	movs	r3, #0
 8001f84:	4d05      	ldr	r5, [pc, #20]	; (8001f9c <_sbrk_r+0x1c>)
 8001f86:	4604      	mov	r4, r0
 8001f88:	4608      	mov	r0, r1
 8001f8a:	602b      	str	r3, [r5, #0]
 8001f8c:	f7fe fa92 	bl	80004b4 <_sbrk>
 8001f90:	1c43      	adds	r3, r0, #1
 8001f92:	d102      	bne.n	8001f9a <_sbrk_r+0x1a>
 8001f94:	682b      	ldr	r3, [r5, #0]
 8001f96:	b103      	cbz	r3, 8001f9a <_sbrk_r+0x1a>
 8001f98:	6023      	str	r3, [r4, #0]
 8001f9a:	bd38      	pop	{r3, r4, r5, pc}
 8001f9c:	200001a4 	.word	0x200001a4

08001fa0 <iscanf>:
 8001fa0:	b40f      	push	{r0, r1, r2, r3}
 8001fa2:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <iscanf+0x2c>)
 8001fa4:	b513      	push	{r0, r1, r4, lr}
 8001fa6:	681c      	ldr	r4, [r3, #0]
 8001fa8:	b124      	cbz	r4, 8001fb4 <iscanf+0x14>
 8001faa:	69a3      	ldr	r3, [r4, #24]
 8001fac:	b913      	cbnz	r3, 8001fb4 <iscanf+0x14>
 8001fae:	4620      	mov	r0, r4
 8001fb0:	f7ff fe00 	bl	8001bb4 <__sinit>
 8001fb4:	ab05      	add	r3, sp, #20
 8001fb6:	4620      	mov	r0, r4
 8001fb8:	9a04      	ldr	r2, [sp, #16]
 8001fba:	6861      	ldr	r1, [r4, #4]
 8001fbc:	9301      	str	r3, [sp, #4]
 8001fbe:	f000 ff61 	bl	8002e84 <_vfiscanf_r>
 8001fc2:	b002      	add	sp, #8
 8001fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001fc8:	b004      	add	sp, #16
 8001fca:	4770      	bx	lr
 8001fcc:	20000014 	.word	0x20000014

08001fd0 <__sread>:
 8001fd0:	b510      	push	{r4, lr}
 8001fd2:	460c      	mov	r4, r1
 8001fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fd8:	f001 f90e 	bl	80031f8 <_read_r>
 8001fdc:	2800      	cmp	r0, #0
 8001fde:	bfab      	itete	ge
 8001fe0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001fe2:	89a3      	ldrhlt	r3, [r4, #12]
 8001fe4:	181b      	addge	r3, r3, r0
 8001fe6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001fea:	bfac      	ite	ge
 8001fec:	6563      	strge	r3, [r4, #84]	; 0x54
 8001fee:	81a3      	strhlt	r3, [r4, #12]
 8001ff0:	bd10      	pop	{r4, pc}

08001ff2 <__swrite>:
 8001ff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ff6:	461f      	mov	r7, r3
 8001ff8:	898b      	ldrh	r3, [r1, #12]
 8001ffa:	4605      	mov	r5, r0
 8001ffc:	05db      	lsls	r3, r3, #23
 8001ffe:	460c      	mov	r4, r1
 8002000:	4616      	mov	r6, r2
 8002002:	d505      	bpl.n	8002010 <__swrite+0x1e>
 8002004:	2302      	movs	r3, #2
 8002006:	2200      	movs	r2, #0
 8002008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800200c:	f000 f9da 	bl	80023c4 <_lseek_r>
 8002010:	89a3      	ldrh	r3, [r4, #12]
 8002012:	4632      	mov	r2, r6
 8002014:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002018:	81a3      	strh	r3, [r4, #12]
 800201a:	4628      	mov	r0, r5
 800201c:	463b      	mov	r3, r7
 800201e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002022:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002026:	f000 b869 	b.w	80020fc <_write_r>

0800202a <__sseek>:
 800202a:	b510      	push	{r4, lr}
 800202c:	460c      	mov	r4, r1
 800202e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002032:	f000 f9c7 	bl	80023c4 <_lseek_r>
 8002036:	1c43      	adds	r3, r0, #1
 8002038:	89a3      	ldrh	r3, [r4, #12]
 800203a:	bf15      	itete	ne
 800203c:	6560      	strne	r0, [r4, #84]	; 0x54
 800203e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002042:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002046:	81a3      	strheq	r3, [r4, #12]
 8002048:	bf18      	it	ne
 800204a:	81a3      	strhne	r3, [r4, #12]
 800204c:	bd10      	pop	{r4, pc}

0800204e <__sclose>:
 800204e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002052:	f000 b8d3 	b.w	80021fc <_close_r>
	...

08002058 <__swbuf_r>:
 8002058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800205a:	460e      	mov	r6, r1
 800205c:	4614      	mov	r4, r2
 800205e:	4605      	mov	r5, r0
 8002060:	b118      	cbz	r0, 800206a <__swbuf_r+0x12>
 8002062:	6983      	ldr	r3, [r0, #24]
 8002064:	b90b      	cbnz	r3, 800206a <__swbuf_r+0x12>
 8002066:	f7ff fda5 	bl	8001bb4 <__sinit>
 800206a:	4b21      	ldr	r3, [pc, #132]	; (80020f0 <__swbuf_r+0x98>)
 800206c:	429c      	cmp	r4, r3
 800206e:	d12b      	bne.n	80020c8 <__swbuf_r+0x70>
 8002070:	686c      	ldr	r4, [r5, #4]
 8002072:	69a3      	ldr	r3, [r4, #24]
 8002074:	60a3      	str	r3, [r4, #8]
 8002076:	89a3      	ldrh	r3, [r4, #12]
 8002078:	071a      	lsls	r2, r3, #28
 800207a:	d52f      	bpl.n	80020dc <__swbuf_r+0x84>
 800207c:	6923      	ldr	r3, [r4, #16]
 800207e:	b36b      	cbz	r3, 80020dc <__swbuf_r+0x84>
 8002080:	6923      	ldr	r3, [r4, #16]
 8002082:	6820      	ldr	r0, [r4, #0]
 8002084:	b2f6      	uxtb	r6, r6
 8002086:	1ac0      	subs	r0, r0, r3
 8002088:	6963      	ldr	r3, [r4, #20]
 800208a:	4637      	mov	r7, r6
 800208c:	4283      	cmp	r3, r0
 800208e:	dc04      	bgt.n	800209a <__swbuf_r+0x42>
 8002090:	4621      	mov	r1, r4
 8002092:	4628      	mov	r0, r5
 8002094:	f000 f948 	bl	8002328 <_fflush_r>
 8002098:	bb30      	cbnz	r0, 80020e8 <__swbuf_r+0x90>
 800209a:	68a3      	ldr	r3, [r4, #8]
 800209c:	3001      	adds	r0, #1
 800209e:	3b01      	subs	r3, #1
 80020a0:	60a3      	str	r3, [r4, #8]
 80020a2:	6823      	ldr	r3, [r4, #0]
 80020a4:	1c5a      	adds	r2, r3, #1
 80020a6:	6022      	str	r2, [r4, #0]
 80020a8:	701e      	strb	r6, [r3, #0]
 80020aa:	6963      	ldr	r3, [r4, #20]
 80020ac:	4283      	cmp	r3, r0
 80020ae:	d004      	beq.n	80020ba <__swbuf_r+0x62>
 80020b0:	89a3      	ldrh	r3, [r4, #12]
 80020b2:	07db      	lsls	r3, r3, #31
 80020b4:	d506      	bpl.n	80020c4 <__swbuf_r+0x6c>
 80020b6:	2e0a      	cmp	r6, #10
 80020b8:	d104      	bne.n	80020c4 <__swbuf_r+0x6c>
 80020ba:	4621      	mov	r1, r4
 80020bc:	4628      	mov	r0, r5
 80020be:	f000 f933 	bl	8002328 <_fflush_r>
 80020c2:	b988      	cbnz	r0, 80020e8 <__swbuf_r+0x90>
 80020c4:	4638      	mov	r0, r7
 80020c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020c8:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <__swbuf_r+0x9c>)
 80020ca:	429c      	cmp	r4, r3
 80020cc:	d101      	bne.n	80020d2 <__swbuf_r+0x7a>
 80020ce:	68ac      	ldr	r4, [r5, #8]
 80020d0:	e7cf      	b.n	8002072 <__swbuf_r+0x1a>
 80020d2:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <__swbuf_r+0xa0>)
 80020d4:	429c      	cmp	r4, r3
 80020d6:	bf08      	it	eq
 80020d8:	68ec      	ldreq	r4, [r5, #12]
 80020da:	e7ca      	b.n	8002072 <__swbuf_r+0x1a>
 80020dc:	4621      	mov	r1, r4
 80020de:	4628      	mov	r0, r5
 80020e0:	f000 f81e 	bl	8002120 <__swsetup_r>
 80020e4:	2800      	cmp	r0, #0
 80020e6:	d0cb      	beq.n	8002080 <__swbuf_r+0x28>
 80020e8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80020ec:	e7ea      	b.n	80020c4 <__swbuf_r+0x6c>
 80020ee:	bf00      	nop
 80020f0:	08003900 	.word	0x08003900
 80020f4:	08003920 	.word	0x08003920
 80020f8:	080038e0 	.word	0x080038e0

080020fc <_write_r>:
 80020fc:	b538      	push	{r3, r4, r5, lr}
 80020fe:	4604      	mov	r4, r0
 8002100:	4608      	mov	r0, r1
 8002102:	4611      	mov	r1, r2
 8002104:	2200      	movs	r2, #0
 8002106:	4d05      	ldr	r5, [pc, #20]	; (800211c <_write_r+0x20>)
 8002108:	602a      	str	r2, [r5, #0]
 800210a:	461a      	mov	r2, r3
 800210c:	f7ff fafe 	bl	800170c <_write>
 8002110:	1c43      	adds	r3, r0, #1
 8002112:	d102      	bne.n	800211a <_write_r+0x1e>
 8002114:	682b      	ldr	r3, [r5, #0]
 8002116:	b103      	cbz	r3, 800211a <_write_r+0x1e>
 8002118:	6023      	str	r3, [r4, #0]
 800211a:	bd38      	pop	{r3, r4, r5, pc}
 800211c:	200001a4 	.word	0x200001a4

08002120 <__swsetup_r>:
 8002120:	4b32      	ldr	r3, [pc, #200]	; (80021ec <__swsetup_r+0xcc>)
 8002122:	b570      	push	{r4, r5, r6, lr}
 8002124:	681d      	ldr	r5, [r3, #0]
 8002126:	4606      	mov	r6, r0
 8002128:	460c      	mov	r4, r1
 800212a:	b125      	cbz	r5, 8002136 <__swsetup_r+0x16>
 800212c:	69ab      	ldr	r3, [r5, #24]
 800212e:	b913      	cbnz	r3, 8002136 <__swsetup_r+0x16>
 8002130:	4628      	mov	r0, r5
 8002132:	f7ff fd3f 	bl	8001bb4 <__sinit>
 8002136:	4b2e      	ldr	r3, [pc, #184]	; (80021f0 <__swsetup_r+0xd0>)
 8002138:	429c      	cmp	r4, r3
 800213a:	d10f      	bne.n	800215c <__swsetup_r+0x3c>
 800213c:	686c      	ldr	r4, [r5, #4]
 800213e:	89a3      	ldrh	r3, [r4, #12]
 8002140:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002144:	0719      	lsls	r1, r3, #28
 8002146:	d42c      	bmi.n	80021a2 <__swsetup_r+0x82>
 8002148:	06dd      	lsls	r5, r3, #27
 800214a:	d411      	bmi.n	8002170 <__swsetup_r+0x50>
 800214c:	2309      	movs	r3, #9
 800214e:	6033      	str	r3, [r6, #0]
 8002150:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002154:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002158:	81a3      	strh	r3, [r4, #12]
 800215a:	e03e      	b.n	80021da <__swsetup_r+0xba>
 800215c:	4b25      	ldr	r3, [pc, #148]	; (80021f4 <__swsetup_r+0xd4>)
 800215e:	429c      	cmp	r4, r3
 8002160:	d101      	bne.n	8002166 <__swsetup_r+0x46>
 8002162:	68ac      	ldr	r4, [r5, #8]
 8002164:	e7eb      	b.n	800213e <__swsetup_r+0x1e>
 8002166:	4b24      	ldr	r3, [pc, #144]	; (80021f8 <__swsetup_r+0xd8>)
 8002168:	429c      	cmp	r4, r3
 800216a:	bf08      	it	eq
 800216c:	68ec      	ldreq	r4, [r5, #12]
 800216e:	e7e6      	b.n	800213e <__swsetup_r+0x1e>
 8002170:	0758      	lsls	r0, r3, #29
 8002172:	d512      	bpl.n	800219a <__swsetup_r+0x7a>
 8002174:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002176:	b141      	cbz	r1, 800218a <__swsetup_r+0x6a>
 8002178:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800217c:	4299      	cmp	r1, r3
 800217e:	d002      	beq.n	8002186 <__swsetup_r+0x66>
 8002180:	4630      	mov	r0, r6
 8002182:	f000 f9a1 	bl	80024c8 <_free_r>
 8002186:	2300      	movs	r3, #0
 8002188:	6363      	str	r3, [r4, #52]	; 0x34
 800218a:	89a3      	ldrh	r3, [r4, #12]
 800218c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002190:	81a3      	strh	r3, [r4, #12]
 8002192:	2300      	movs	r3, #0
 8002194:	6063      	str	r3, [r4, #4]
 8002196:	6923      	ldr	r3, [r4, #16]
 8002198:	6023      	str	r3, [r4, #0]
 800219a:	89a3      	ldrh	r3, [r4, #12]
 800219c:	f043 0308 	orr.w	r3, r3, #8
 80021a0:	81a3      	strh	r3, [r4, #12]
 80021a2:	6923      	ldr	r3, [r4, #16]
 80021a4:	b94b      	cbnz	r3, 80021ba <__swsetup_r+0x9a>
 80021a6:	89a3      	ldrh	r3, [r4, #12]
 80021a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80021ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021b0:	d003      	beq.n	80021ba <__swsetup_r+0x9a>
 80021b2:	4621      	mov	r1, r4
 80021b4:	4630      	mov	r0, r6
 80021b6:	f000 f93b 	bl	8002430 <__smakebuf_r>
 80021ba:	89a0      	ldrh	r0, [r4, #12]
 80021bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80021c0:	f010 0301 	ands.w	r3, r0, #1
 80021c4:	d00a      	beq.n	80021dc <__swsetup_r+0xbc>
 80021c6:	2300      	movs	r3, #0
 80021c8:	60a3      	str	r3, [r4, #8]
 80021ca:	6963      	ldr	r3, [r4, #20]
 80021cc:	425b      	negs	r3, r3
 80021ce:	61a3      	str	r3, [r4, #24]
 80021d0:	6923      	ldr	r3, [r4, #16]
 80021d2:	b943      	cbnz	r3, 80021e6 <__swsetup_r+0xc6>
 80021d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80021d8:	d1ba      	bne.n	8002150 <__swsetup_r+0x30>
 80021da:	bd70      	pop	{r4, r5, r6, pc}
 80021dc:	0781      	lsls	r1, r0, #30
 80021de:	bf58      	it	pl
 80021e0:	6963      	ldrpl	r3, [r4, #20]
 80021e2:	60a3      	str	r3, [r4, #8]
 80021e4:	e7f4      	b.n	80021d0 <__swsetup_r+0xb0>
 80021e6:	2000      	movs	r0, #0
 80021e8:	e7f7      	b.n	80021da <__swsetup_r+0xba>
 80021ea:	bf00      	nop
 80021ec:	20000014 	.word	0x20000014
 80021f0:	08003900 	.word	0x08003900
 80021f4:	08003920 	.word	0x08003920
 80021f8:	080038e0 	.word	0x080038e0

080021fc <_close_r>:
 80021fc:	b538      	push	{r3, r4, r5, lr}
 80021fe:	2300      	movs	r3, #0
 8002200:	4d05      	ldr	r5, [pc, #20]	; (8002218 <_close_r+0x1c>)
 8002202:	4604      	mov	r4, r0
 8002204:	4608      	mov	r0, r1
 8002206:	602b      	str	r3, [r5, #0]
 8002208:	f7ff faae 	bl	8001768 <_close>
 800220c:	1c43      	adds	r3, r0, #1
 800220e:	d102      	bne.n	8002216 <_close_r+0x1a>
 8002210:	682b      	ldr	r3, [r5, #0]
 8002212:	b103      	cbz	r3, 8002216 <_close_r+0x1a>
 8002214:	6023      	str	r3, [r4, #0]
 8002216:	bd38      	pop	{r3, r4, r5, pc}
 8002218:	200001a4 	.word	0x200001a4

0800221c <__sflush_r>:
 800221c:	898a      	ldrh	r2, [r1, #12]
 800221e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002222:	4605      	mov	r5, r0
 8002224:	0710      	lsls	r0, r2, #28
 8002226:	460c      	mov	r4, r1
 8002228:	d458      	bmi.n	80022dc <__sflush_r+0xc0>
 800222a:	684b      	ldr	r3, [r1, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	dc05      	bgt.n	800223c <__sflush_r+0x20>
 8002230:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002232:	2b00      	cmp	r3, #0
 8002234:	dc02      	bgt.n	800223c <__sflush_r+0x20>
 8002236:	2000      	movs	r0, #0
 8002238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800223c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800223e:	2e00      	cmp	r6, #0
 8002240:	d0f9      	beq.n	8002236 <__sflush_r+0x1a>
 8002242:	2300      	movs	r3, #0
 8002244:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002248:	682f      	ldr	r7, [r5, #0]
 800224a:	602b      	str	r3, [r5, #0]
 800224c:	d032      	beq.n	80022b4 <__sflush_r+0x98>
 800224e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002250:	89a3      	ldrh	r3, [r4, #12]
 8002252:	075a      	lsls	r2, r3, #29
 8002254:	d505      	bpl.n	8002262 <__sflush_r+0x46>
 8002256:	6863      	ldr	r3, [r4, #4]
 8002258:	1ac0      	subs	r0, r0, r3
 800225a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800225c:	b10b      	cbz	r3, 8002262 <__sflush_r+0x46>
 800225e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002260:	1ac0      	subs	r0, r0, r3
 8002262:	2300      	movs	r3, #0
 8002264:	4602      	mov	r2, r0
 8002266:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002268:	4628      	mov	r0, r5
 800226a:	6a21      	ldr	r1, [r4, #32]
 800226c:	47b0      	blx	r6
 800226e:	1c43      	adds	r3, r0, #1
 8002270:	89a3      	ldrh	r3, [r4, #12]
 8002272:	d106      	bne.n	8002282 <__sflush_r+0x66>
 8002274:	6829      	ldr	r1, [r5, #0]
 8002276:	291d      	cmp	r1, #29
 8002278:	d82c      	bhi.n	80022d4 <__sflush_r+0xb8>
 800227a:	4a2a      	ldr	r2, [pc, #168]	; (8002324 <__sflush_r+0x108>)
 800227c:	40ca      	lsrs	r2, r1
 800227e:	07d6      	lsls	r6, r2, #31
 8002280:	d528      	bpl.n	80022d4 <__sflush_r+0xb8>
 8002282:	2200      	movs	r2, #0
 8002284:	6062      	str	r2, [r4, #4]
 8002286:	6922      	ldr	r2, [r4, #16]
 8002288:	04d9      	lsls	r1, r3, #19
 800228a:	6022      	str	r2, [r4, #0]
 800228c:	d504      	bpl.n	8002298 <__sflush_r+0x7c>
 800228e:	1c42      	adds	r2, r0, #1
 8002290:	d101      	bne.n	8002296 <__sflush_r+0x7a>
 8002292:	682b      	ldr	r3, [r5, #0]
 8002294:	b903      	cbnz	r3, 8002298 <__sflush_r+0x7c>
 8002296:	6560      	str	r0, [r4, #84]	; 0x54
 8002298:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800229a:	602f      	str	r7, [r5, #0]
 800229c:	2900      	cmp	r1, #0
 800229e:	d0ca      	beq.n	8002236 <__sflush_r+0x1a>
 80022a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80022a4:	4299      	cmp	r1, r3
 80022a6:	d002      	beq.n	80022ae <__sflush_r+0x92>
 80022a8:	4628      	mov	r0, r5
 80022aa:	f000 f90d 	bl	80024c8 <_free_r>
 80022ae:	2000      	movs	r0, #0
 80022b0:	6360      	str	r0, [r4, #52]	; 0x34
 80022b2:	e7c1      	b.n	8002238 <__sflush_r+0x1c>
 80022b4:	6a21      	ldr	r1, [r4, #32]
 80022b6:	2301      	movs	r3, #1
 80022b8:	4628      	mov	r0, r5
 80022ba:	47b0      	blx	r6
 80022bc:	1c41      	adds	r1, r0, #1
 80022be:	d1c7      	bne.n	8002250 <__sflush_r+0x34>
 80022c0:	682b      	ldr	r3, [r5, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0c4      	beq.n	8002250 <__sflush_r+0x34>
 80022c6:	2b1d      	cmp	r3, #29
 80022c8:	d001      	beq.n	80022ce <__sflush_r+0xb2>
 80022ca:	2b16      	cmp	r3, #22
 80022cc:	d101      	bne.n	80022d2 <__sflush_r+0xb6>
 80022ce:	602f      	str	r7, [r5, #0]
 80022d0:	e7b1      	b.n	8002236 <__sflush_r+0x1a>
 80022d2:	89a3      	ldrh	r3, [r4, #12]
 80022d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022d8:	81a3      	strh	r3, [r4, #12]
 80022da:	e7ad      	b.n	8002238 <__sflush_r+0x1c>
 80022dc:	690f      	ldr	r7, [r1, #16]
 80022de:	2f00      	cmp	r7, #0
 80022e0:	d0a9      	beq.n	8002236 <__sflush_r+0x1a>
 80022e2:	0793      	lsls	r3, r2, #30
 80022e4:	bf18      	it	ne
 80022e6:	2300      	movne	r3, #0
 80022e8:	680e      	ldr	r6, [r1, #0]
 80022ea:	bf08      	it	eq
 80022ec:	694b      	ldreq	r3, [r1, #20]
 80022ee:	eba6 0807 	sub.w	r8, r6, r7
 80022f2:	600f      	str	r7, [r1, #0]
 80022f4:	608b      	str	r3, [r1, #8]
 80022f6:	f1b8 0f00 	cmp.w	r8, #0
 80022fa:	dd9c      	ble.n	8002236 <__sflush_r+0x1a>
 80022fc:	4643      	mov	r3, r8
 80022fe:	463a      	mov	r2, r7
 8002300:	4628      	mov	r0, r5
 8002302:	6a21      	ldr	r1, [r4, #32]
 8002304:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002306:	47b0      	blx	r6
 8002308:	2800      	cmp	r0, #0
 800230a:	dc06      	bgt.n	800231a <__sflush_r+0xfe>
 800230c:	89a3      	ldrh	r3, [r4, #12]
 800230e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002316:	81a3      	strh	r3, [r4, #12]
 8002318:	e78e      	b.n	8002238 <__sflush_r+0x1c>
 800231a:	4407      	add	r7, r0
 800231c:	eba8 0800 	sub.w	r8, r8, r0
 8002320:	e7e9      	b.n	80022f6 <__sflush_r+0xda>
 8002322:	bf00      	nop
 8002324:	20400001 	.word	0x20400001

08002328 <_fflush_r>:
 8002328:	b538      	push	{r3, r4, r5, lr}
 800232a:	690b      	ldr	r3, [r1, #16]
 800232c:	4605      	mov	r5, r0
 800232e:	460c      	mov	r4, r1
 8002330:	b913      	cbnz	r3, 8002338 <_fflush_r+0x10>
 8002332:	2500      	movs	r5, #0
 8002334:	4628      	mov	r0, r5
 8002336:	bd38      	pop	{r3, r4, r5, pc}
 8002338:	b118      	cbz	r0, 8002342 <_fflush_r+0x1a>
 800233a:	6983      	ldr	r3, [r0, #24]
 800233c:	b90b      	cbnz	r3, 8002342 <_fflush_r+0x1a>
 800233e:	f7ff fc39 	bl	8001bb4 <__sinit>
 8002342:	4b14      	ldr	r3, [pc, #80]	; (8002394 <_fflush_r+0x6c>)
 8002344:	429c      	cmp	r4, r3
 8002346:	d11b      	bne.n	8002380 <_fflush_r+0x58>
 8002348:	686c      	ldr	r4, [r5, #4]
 800234a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d0ef      	beq.n	8002332 <_fflush_r+0xa>
 8002352:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002354:	07d0      	lsls	r0, r2, #31
 8002356:	d404      	bmi.n	8002362 <_fflush_r+0x3a>
 8002358:	0599      	lsls	r1, r3, #22
 800235a:	d402      	bmi.n	8002362 <_fflush_r+0x3a>
 800235c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800235e:	f7ff fd08 	bl	8001d72 <__retarget_lock_acquire_recursive>
 8002362:	4628      	mov	r0, r5
 8002364:	4621      	mov	r1, r4
 8002366:	f7ff ff59 	bl	800221c <__sflush_r>
 800236a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800236c:	4605      	mov	r5, r0
 800236e:	07da      	lsls	r2, r3, #31
 8002370:	d4e0      	bmi.n	8002334 <_fflush_r+0xc>
 8002372:	89a3      	ldrh	r3, [r4, #12]
 8002374:	059b      	lsls	r3, r3, #22
 8002376:	d4dd      	bmi.n	8002334 <_fflush_r+0xc>
 8002378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800237a:	f7ff fcfb 	bl	8001d74 <__retarget_lock_release_recursive>
 800237e:	e7d9      	b.n	8002334 <_fflush_r+0xc>
 8002380:	4b05      	ldr	r3, [pc, #20]	; (8002398 <_fflush_r+0x70>)
 8002382:	429c      	cmp	r4, r3
 8002384:	d101      	bne.n	800238a <_fflush_r+0x62>
 8002386:	68ac      	ldr	r4, [r5, #8]
 8002388:	e7df      	b.n	800234a <_fflush_r+0x22>
 800238a:	4b04      	ldr	r3, [pc, #16]	; (800239c <_fflush_r+0x74>)
 800238c:	429c      	cmp	r4, r3
 800238e:	bf08      	it	eq
 8002390:	68ec      	ldreq	r4, [r5, #12]
 8002392:	e7da      	b.n	800234a <_fflush_r+0x22>
 8002394:	08003900 	.word	0x08003900
 8002398:	08003920 	.word	0x08003920
 800239c:	080038e0 	.word	0x080038e0

080023a0 <fflush>:
 80023a0:	4601      	mov	r1, r0
 80023a2:	b920      	cbnz	r0, 80023ae <fflush+0xe>
 80023a4:	4b04      	ldr	r3, [pc, #16]	; (80023b8 <fflush+0x18>)
 80023a6:	4905      	ldr	r1, [pc, #20]	; (80023bc <fflush+0x1c>)
 80023a8:	6818      	ldr	r0, [r3, #0]
 80023aa:	f7ff bc9e 	b.w	8001cea <_fwalk_reent>
 80023ae:	4b04      	ldr	r3, [pc, #16]	; (80023c0 <fflush+0x20>)
 80023b0:	6818      	ldr	r0, [r3, #0]
 80023b2:	f7ff bfb9 	b.w	8002328 <_fflush_r>
 80023b6:	bf00      	nop
 80023b8:	08003940 	.word	0x08003940
 80023bc:	08002329 	.word	0x08002329
 80023c0:	20000014 	.word	0x20000014

080023c4 <_lseek_r>:
 80023c4:	b538      	push	{r3, r4, r5, lr}
 80023c6:	4604      	mov	r4, r0
 80023c8:	4608      	mov	r0, r1
 80023ca:	4611      	mov	r1, r2
 80023cc:	2200      	movs	r2, #0
 80023ce:	4d05      	ldr	r5, [pc, #20]	; (80023e4 <_lseek_r+0x20>)
 80023d0:	602a      	str	r2, [r5, #0]
 80023d2:	461a      	mov	r2, r3
 80023d4:	f7ff f988 	bl	80016e8 <_lseek>
 80023d8:	1c43      	adds	r3, r0, #1
 80023da:	d102      	bne.n	80023e2 <_lseek_r+0x1e>
 80023dc:	682b      	ldr	r3, [r5, #0]
 80023de:	b103      	cbz	r3, 80023e2 <_lseek_r+0x1e>
 80023e0:	6023      	str	r3, [r4, #0]
 80023e2:	bd38      	pop	{r3, r4, r5, pc}
 80023e4:	200001a4 	.word	0x200001a4

080023e8 <__swhatbuf_r>:
 80023e8:	b570      	push	{r4, r5, r6, lr}
 80023ea:	460e      	mov	r6, r1
 80023ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023f0:	4614      	mov	r4, r2
 80023f2:	2900      	cmp	r1, #0
 80023f4:	461d      	mov	r5, r3
 80023f6:	b096      	sub	sp, #88	; 0x58
 80023f8:	da07      	bge.n	800240a <__swhatbuf_r+0x22>
 80023fa:	2300      	movs	r3, #0
 80023fc:	602b      	str	r3, [r5, #0]
 80023fe:	89b3      	ldrh	r3, [r6, #12]
 8002400:	061a      	lsls	r2, r3, #24
 8002402:	d410      	bmi.n	8002426 <__swhatbuf_r+0x3e>
 8002404:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002408:	e00e      	b.n	8002428 <__swhatbuf_r+0x40>
 800240a:	466a      	mov	r2, sp
 800240c:	f001 f9ac 	bl	8003768 <_fstat_r>
 8002410:	2800      	cmp	r0, #0
 8002412:	dbf2      	blt.n	80023fa <__swhatbuf_r+0x12>
 8002414:	9a01      	ldr	r2, [sp, #4]
 8002416:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800241a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800241e:	425a      	negs	r2, r3
 8002420:	415a      	adcs	r2, r3
 8002422:	602a      	str	r2, [r5, #0]
 8002424:	e7ee      	b.n	8002404 <__swhatbuf_r+0x1c>
 8002426:	2340      	movs	r3, #64	; 0x40
 8002428:	2000      	movs	r0, #0
 800242a:	6023      	str	r3, [r4, #0]
 800242c:	b016      	add	sp, #88	; 0x58
 800242e:	bd70      	pop	{r4, r5, r6, pc}

08002430 <__smakebuf_r>:
 8002430:	898b      	ldrh	r3, [r1, #12]
 8002432:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002434:	079d      	lsls	r5, r3, #30
 8002436:	4606      	mov	r6, r0
 8002438:	460c      	mov	r4, r1
 800243a:	d507      	bpl.n	800244c <__smakebuf_r+0x1c>
 800243c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002440:	6023      	str	r3, [r4, #0]
 8002442:	6123      	str	r3, [r4, #16]
 8002444:	2301      	movs	r3, #1
 8002446:	6163      	str	r3, [r4, #20]
 8002448:	b002      	add	sp, #8
 800244a:	bd70      	pop	{r4, r5, r6, pc}
 800244c:	466a      	mov	r2, sp
 800244e:	ab01      	add	r3, sp, #4
 8002450:	f7ff ffca 	bl	80023e8 <__swhatbuf_r>
 8002454:	9900      	ldr	r1, [sp, #0]
 8002456:	4605      	mov	r5, r0
 8002458:	4630      	mov	r0, r6
 800245a:	f7ff fc95 	bl	8001d88 <_malloc_r>
 800245e:	b948      	cbnz	r0, 8002474 <__smakebuf_r+0x44>
 8002460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002464:	059a      	lsls	r2, r3, #22
 8002466:	d4ef      	bmi.n	8002448 <__smakebuf_r+0x18>
 8002468:	f023 0303 	bic.w	r3, r3, #3
 800246c:	f043 0302 	orr.w	r3, r3, #2
 8002470:	81a3      	strh	r3, [r4, #12]
 8002472:	e7e3      	b.n	800243c <__smakebuf_r+0xc>
 8002474:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <__smakebuf_r+0x7c>)
 8002476:	62b3      	str	r3, [r6, #40]	; 0x28
 8002478:	89a3      	ldrh	r3, [r4, #12]
 800247a:	6020      	str	r0, [r4, #0]
 800247c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002480:	81a3      	strh	r3, [r4, #12]
 8002482:	9b00      	ldr	r3, [sp, #0]
 8002484:	6120      	str	r0, [r4, #16]
 8002486:	6163      	str	r3, [r4, #20]
 8002488:	9b01      	ldr	r3, [sp, #4]
 800248a:	b15b      	cbz	r3, 80024a4 <__smakebuf_r+0x74>
 800248c:	4630      	mov	r0, r6
 800248e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002492:	f001 f97b 	bl	800378c <_isatty_r>
 8002496:	b128      	cbz	r0, 80024a4 <__smakebuf_r+0x74>
 8002498:	89a3      	ldrh	r3, [r4, #12]
 800249a:	f023 0303 	bic.w	r3, r3, #3
 800249e:	f043 0301 	orr.w	r3, r3, #1
 80024a2:	81a3      	strh	r3, [r4, #12]
 80024a4:	89a0      	ldrh	r0, [r4, #12]
 80024a6:	4305      	orrs	r5, r0
 80024a8:	81a5      	strh	r5, [r4, #12]
 80024aa:	e7cd      	b.n	8002448 <__smakebuf_r+0x18>
 80024ac:	08001b4d 	.word	0x08001b4d

080024b0 <__malloc_lock>:
 80024b0:	4801      	ldr	r0, [pc, #4]	; (80024b8 <__malloc_lock+0x8>)
 80024b2:	f7ff bc5e 	b.w	8001d72 <__retarget_lock_acquire_recursive>
 80024b6:	bf00      	nop
 80024b8:	2000019c 	.word	0x2000019c

080024bc <__malloc_unlock>:
 80024bc:	4801      	ldr	r0, [pc, #4]	; (80024c4 <__malloc_unlock+0x8>)
 80024be:	f7ff bc59 	b.w	8001d74 <__retarget_lock_release_recursive>
 80024c2:	bf00      	nop
 80024c4:	2000019c 	.word	0x2000019c

080024c8 <_free_r>:
 80024c8:	b538      	push	{r3, r4, r5, lr}
 80024ca:	4605      	mov	r5, r0
 80024cc:	2900      	cmp	r1, #0
 80024ce:	d043      	beq.n	8002558 <_free_r+0x90>
 80024d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024d4:	1f0c      	subs	r4, r1, #4
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	bfb8      	it	lt
 80024da:	18e4      	addlt	r4, r4, r3
 80024dc:	f7ff ffe8 	bl	80024b0 <__malloc_lock>
 80024e0:	4a1e      	ldr	r2, [pc, #120]	; (800255c <_free_r+0x94>)
 80024e2:	6813      	ldr	r3, [r2, #0]
 80024e4:	4610      	mov	r0, r2
 80024e6:	b933      	cbnz	r3, 80024f6 <_free_r+0x2e>
 80024e8:	6063      	str	r3, [r4, #4]
 80024ea:	6014      	str	r4, [r2, #0]
 80024ec:	4628      	mov	r0, r5
 80024ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80024f2:	f7ff bfe3 	b.w	80024bc <__malloc_unlock>
 80024f6:	42a3      	cmp	r3, r4
 80024f8:	d90a      	bls.n	8002510 <_free_r+0x48>
 80024fa:	6821      	ldr	r1, [r4, #0]
 80024fc:	1862      	adds	r2, r4, r1
 80024fe:	4293      	cmp	r3, r2
 8002500:	bf01      	itttt	eq
 8002502:	681a      	ldreq	r2, [r3, #0]
 8002504:	685b      	ldreq	r3, [r3, #4]
 8002506:	1852      	addeq	r2, r2, r1
 8002508:	6022      	streq	r2, [r4, #0]
 800250a:	6063      	str	r3, [r4, #4]
 800250c:	6004      	str	r4, [r0, #0]
 800250e:	e7ed      	b.n	80024ec <_free_r+0x24>
 8002510:	461a      	mov	r2, r3
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	b10b      	cbz	r3, 800251a <_free_r+0x52>
 8002516:	42a3      	cmp	r3, r4
 8002518:	d9fa      	bls.n	8002510 <_free_r+0x48>
 800251a:	6811      	ldr	r1, [r2, #0]
 800251c:	1850      	adds	r0, r2, r1
 800251e:	42a0      	cmp	r0, r4
 8002520:	d10b      	bne.n	800253a <_free_r+0x72>
 8002522:	6820      	ldr	r0, [r4, #0]
 8002524:	4401      	add	r1, r0
 8002526:	1850      	adds	r0, r2, r1
 8002528:	4283      	cmp	r3, r0
 800252a:	6011      	str	r1, [r2, #0]
 800252c:	d1de      	bne.n	80024ec <_free_r+0x24>
 800252e:	6818      	ldr	r0, [r3, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	4401      	add	r1, r0
 8002534:	6011      	str	r1, [r2, #0]
 8002536:	6053      	str	r3, [r2, #4]
 8002538:	e7d8      	b.n	80024ec <_free_r+0x24>
 800253a:	d902      	bls.n	8002542 <_free_r+0x7a>
 800253c:	230c      	movs	r3, #12
 800253e:	602b      	str	r3, [r5, #0]
 8002540:	e7d4      	b.n	80024ec <_free_r+0x24>
 8002542:	6820      	ldr	r0, [r4, #0]
 8002544:	1821      	adds	r1, r4, r0
 8002546:	428b      	cmp	r3, r1
 8002548:	bf01      	itttt	eq
 800254a:	6819      	ldreq	r1, [r3, #0]
 800254c:	685b      	ldreq	r3, [r3, #4]
 800254e:	1809      	addeq	r1, r1, r0
 8002550:	6021      	streq	r1, [r4, #0]
 8002552:	6063      	str	r3, [r4, #4]
 8002554:	6054      	str	r4, [r2, #4]
 8002556:	e7c9      	b.n	80024ec <_free_r+0x24>
 8002558:	bd38      	pop	{r3, r4, r5, pc}
 800255a:	bf00      	nop
 800255c:	20000144 	.word	0x20000144

08002560 <__sfputc_r>:
 8002560:	6893      	ldr	r3, [r2, #8]
 8002562:	b410      	push	{r4}
 8002564:	3b01      	subs	r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	6093      	str	r3, [r2, #8]
 800256a:	da07      	bge.n	800257c <__sfputc_r+0x1c>
 800256c:	6994      	ldr	r4, [r2, #24]
 800256e:	42a3      	cmp	r3, r4
 8002570:	db01      	blt.n	8002576 <__sfputc_r+0x16>
 8002572:	290a      	cmp	r1, #10
 8002574:	d102      	bne.n	800257c <__sfputc_r+0x1c>
 8002576:	bc10      	pop	{r4}
 8002578:	f7ff bd6e 	b.w	8002058 <__swbuf_r>
 800257c:	6813      	ldr	r3, [r2, #0]
 800257e:	1c58      	adds	r0, r3, #1
 8002580:	6010      	str	r0, [r2, #0]
 8002582:	7019      	strb	r1, [r3, #0]
 8002584:	4608      	mov	r0, r1
 8002586:	bc10      	pop	{r4}
 8002588:	4770      	bx	lr

0800258a <__sfputs_r>:
 800258a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800258c:	4606      	mov	r6, r0
 800258e:	460f      	mov	r7, r1
 8002590:	4614      	mov	r4, r2
 8002592:	18d5      	adds	r5, r2, r3
 8002594:	42ac      	cmp	r4, r5
 8002596:	d101      	bne.n	800259c <__sfputs_r+0x12>
 8002598:	2000      	movs	r0, #0
 800259a:	e007      	b.n	80025ac <__sfputs_r+0x22>
 800259c:	463a      	mov	r2, r7
 800259e:	4630      	mov	r0, r6
 80025a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025a4:	f7ff ffdc 	bl	8002560 <__sfputc_r>
 80025a8:	1c43      	adds	r3, r0, #1
 80025aa:	d1f3      	bne.n	8002594 <__sfputs_r+0xa>
 80025ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080025b0 <_vfiprintf_r>:
 80025b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025b4:	460d      	mov	r5, r1
 80025b6:	4614      	mov	r4, r2
 80025b8:	4698      	mov	r8, r3
 80025ba:	4606      	mov	r6, r0
 80025bc:	b09d      	sub	sp, #116	; 0x74
 80025be:	b118      	cbz	r0, 80025c8 <_vfiprintf_r+0x18>
 80025c0:	6983      	ldr	r3, [r0, #24]
 80025c2:	b90b      	cbnz	r3, 80025c8 <_vfiprintf_r+0x18>
 80025c4:	f7ff faf6 	bl	8001bb4 <__sinit>
 80025c8:	4b89      	ldr	r3, [pc, #548]	; (80027f0 <_vfiprintf_r+0x240>)
 80025ca:	429d      	cmp	r5, r3
 80025cc:	d11b      	bne.n	8002606 <_vfiprintf_r+0x56>
 80025ce:	6875      	ldr	r5, [r6, #4]
 80025d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80025d2:	07d9      	lsls	r1, r3, #31
 80025d4:	d405      	bmi.n	80025e2 <_vfiprintf_r+0x32>
 80025d6:	89ab      	ldrh	r3, [r5, #12]
 80025d8:	059a      	lsls	r2, r3, #22
 80025da:	d402      	bmi.n	80025e2 <_vfiprintf_r+0x32>
 80025dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80025de:	f7ff fbc8 	bl	8001d72 <__retarget_lock_acquire_recursive>
 80025e2:	89ab      	ldrh	r3, [r5, #12]
 80025e4:	071b      	lsls	r3, r3, #28
 80025e6:	d501      	bpl.n	80025ec <_vfiprintf_r+0x3c>
 80025e8:	692b      	ldr	r3, [r5, #16]
 80025ea:	b9eb      	cbnz	r3, 8002628 <_vfiprintf_r+0x78>
 80025ec:	4629      	mov	r1, r5
 80025ee:	4630      	mov	r0, r6
 80025f0:	f7ff fd96 	bl	8002120 <__swsetup_r>
 80025f4:	b1c0      	cbz	r0, 8002628 <_vfiprintf_r+0x78>
 80025f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80025f8:	07dc      	lsls	r4, r3, #31
 80025fa:	d50e      	bpl.n	800261a <_vfiprintf_r+0x6a>
 80025fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002600:	b01d      	add	sp, #116	; 0x74
 8002602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002606:	4b7b      	ldr	r3, [pc, #492]	; (80027f4 <_vfiprintf_r+0x244>)
 8002608:	429d      	cmp	r5, r3
 800260a:	d101      	bne.n	8002610 <_vfiprintf_r+0x60>
 800260c:	68b5      	ldr	r5, [r6, #8]
 800260e:	e7df      	b.n	80025d0 <_vfiprintf_r+0x20>
 8002610:	4b79      	ldr	r3, [pc, #484]	; (80027f8 <_vfiprintf_r+0x248>)
 8002612:	429d      	cmp	r5, r3
 8002614:	bf08      	it	eq
 8002616:	68f5      	ldreq	r5, [r6, #12]
 8002618:	e7da      	b.n	80025d0 <_vfiprintf_r+0x20>
 800261a:	89ab      	ldrh	r3, [r5, #12]
 800261c:	0598      	lsls	r0, r3, #22
 800261e:	d4ed      	bmi.n	80025fc <_vfiprintf_r+0x4c>
 8002620:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002622:	f7ff fba7 	bl	8001d74 <__retarget_lock_release_recursive>
 8002626:	e7e9      	b.n	80025fc <_vfiprintf_r+0x4c>
 8002628:	2300      	movs	r3, #0
 800262a:	9309      	str	r3, [sp, #36]	; 0x24
 800262c:	2320      	movs	r3, #32
 800262e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002632:	2330      	movs	r3, #48	; 0x30
 8002634:	f04f 0901 	mov.w	r9, #1
 8002638:	f8cd 800c 	str.w	r8, [sp, #12]
 800263c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80027fc <_vfiprintf_r+0x24c>
 8002640:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002644:	4623      	mov	r3, r4
 8002646:	469a      	mov	sl, r3
 8002648:	f813 2b01 	ldrb.w	r2, [r3], #1
 800264c:	b10a      	cbz	r2, 8002652 <_vfiprintf_r+0xa2>
 800264e:	2a25      	cmp	r2, #37	; 0x25
 8002650:	d1f9      	bne.n	8002646 <_vfiprintf_r+0x96>
 8002652:	ebba 0b04 	subs.w	fp, sl, r4
 8002656:	d00b      	beq.n	8002670 <_vfiprintf_r+0xc0>
 8002658:	465b      	mov	r3, fp
 800265a:	4622      	mov	r2, r4
 800265c:	4629      	mov	r1, r5
 800265e:	4630      	mov	r0, r6
 8002660:	f7ff ff93 	bl	800258a <__sfputs_r>
 8002664:	3001      	adds	r0, #1
 8002666:	f000 80aa 	beq.w	80027be <_vfiprintf_r+0x20e>
 800266a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800266c:	445a      	add	r2, fp
 800266e:	9209      	str	r2, [sp, #36]	; 0x24
 8002670:	f89a 3000 	ldrb.w	r3, [sl]
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 80a2 	beq.w	80027be <_vfiprintf_r+0x20e>
 800267a:	2300      	movs	r3, #0
 800267c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002680:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002684:	f10a 0a01 	add.w	sl, sl, #1
 8002688:	9304      	str	r3, [sp, #16]
 800268a:	9307      	str	r3, [sp, #28]
 800268c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002690:	931a      	str	r3, [sp, #104]	; 0x68
 8002692:	4654      	mov	r4, sl
 8002694:	2205      	movs	r2, #5
 8002696:	f814 1b01 	ldrb.w	r1, [r4], #1
 800269a:	4858      	ldr	r0, [pc, #352]	; (80027fc <_vfiprintf_r+0x24c>)
 800269c:	f001 f886 	bl	80037ac <memchr>
 80026a0:	9a04      	ldr	r2, [sp, #16]
 80026a2:	b9d8      	cbnz	r0, 80026dc <_vfiprintf_r+0x12c>
 80026a4:	06d1      	lsls	r1, r2, #27
 80026a6:	bf44      	itt	mi
 80026a8:	2320      	movmi	r3, #32
 80026aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026ae:	0713      	lsls	r3, r2, #28
 80026b0:	bf44      	itt	mi
 80026b2:	232b      	movmi	r3, #43	; 0x2b
 80026b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026b8:	f89a 3000 	ldrb.w	r3, [sl]
 80026bc:	2b2a      	cmp	r3, #42	; 0x2a
 80026be:	d015      	beq.n	80026ec <_vfiprintf_r+0x13c>
 80026c0:	4654      	mov	r4, sl
 80026c2:	2000      	movs	r0, #0
 80026c4:	f04f 0c0a 	mov.w	ip, #10
 80026c8:	9a07      	ldr	r2, [sp, #28]
 80026ca:	4621      	mov	r1, r4
 80026cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80026d0:	3b30      	subs	r3, #48	; 0x30
 80026d2:	2b09      	cmp	r3, #9
 80026d4:	d94e      	bls.n	8002774 <_vfiprintf_r+0x1c4>
 80026d6:	b1b0      	cbz	r0, 8002706 <_vfiprintf_r+0x156>
 80026d8:	9207      	str	r2, [sp, #28]
 80026da:	e014      	b.n	8002706 <_vfiprintf_r+0x156>
 80026dc:	eba0 0308 	sub.w	r3, r0, r8
 80026e0:	fa09 f303 	lsl.w	r3, r9, r3
 80026e4:	4313      	orrs	r3, r2
 80026e6:	46a2      	mov	sl, r4
 80026e8:	9304      	str	r3, [sp, #16]
 80026ea:	e7d2      	b.n	8002692 <_vfiprintf_r+0xe2>
 80026ec:	9b03      	ldr	r3, [sp, #12]
 80026ee:	1d19      	adds	r1, r3, #4
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	9103      	str	r1, [sp, #12]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	bfbb      	ittet	lt
 80026f8:	425b      	neglt	r3, r3
 80026fa:	f042 0202 	orrlt.w	r2, r2, #2
 80026fe:	9307      	strge	r3, [sp, #28]
 8002700:	9307      	strlt	r3, [sp, #28]
 8002702:	bfb8      	it	lt
 8002704:	9204      	strlt	r2, [sp, #16]
 8002706:	7823      	ldrb	r3, [r4, #0]
 8002708:	2b2e      	cmp	r3, #46	; 0x2e
 800270a:	d10c      	bne.n	8002726 <_vfiprintf_r+0x176>
 800270c:	7863      	ldrb	r3, [r4, #1]
 800270e:	2b2a      	cmp	r3, #42	; 0x2a
 8002710:	d135      	bne.n	800277e <_vfiprintf_r+0x1ce>
 8002712:	9b03      	ldr	r3, [sp, #12]
 8002714:	3402      	adds	r4, #2
 8002716:	1d1a      	adds	r2, r3, #4
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	9203      	str	r2, [sp, #12]
 800271c:	2b00      	cmp	r3, #0
 800271e:	bfb8      	it	lt
 8002720:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002724:	9305      	str	r3, [sp, #20]
 8002726:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800280c <_vfiprintf_r+0x25c>
 800272a:	2203      	movs	r2, #3
 800272c:	4650      	mov	r0, sl
 800272e:	7821      	ldrb	r1, [r4, #0]
 8002730:	f001 f83c 	bl	80037ac <memchr>
 8002734:	b140      	cbz	r0, 8002748 <_vfiprintf_r+0x198>
 8002736:	2340      	movs	r3, #64	; 0x40
 8002738:	eba0 000a 	sub.w	r0, r0, sl
 800273c:	fa03 f000 	lsl.w	r0, r3, r0
 8002740:	9b04      	ldr	r3, [sp, #16]
 8002742:	3401      	adds	r4, #1
 8002744:	4303      	orrs	r3, r0
 8002746:	9304      	str	r3, [sp, #16]
 8002748:	f814 1b01 	ldrb.w	r1, [r4], #1
 800274c:	2206      	movs	r2, #6
 800274e:	482c      	ldr	r0, [pc, #176]	; (8002800 <_vfiprintf_r+0x250>)
 8002750:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002754:	f001 f82a 	bl	80037ac <memchr>
 8002758:	2800      	cmp	r0, #0
 800275a:	d03f      	beq.n	80027dc <_vfiprintf_r+0x22c>
 800275c:	4b29      	ldr	r3, [pc, #164]	; (8002804 <_vfiprintf_r+0x254>)
 800275e:	bb1b      	cbnz	r3, 80027a8 <_vfiprintf_r+0x1f8>
 8002760:	9b03      	ldr	r3, [sp, #12]
 8002762:	3307      	adds	r3, #7
 8002764:	f023 0307 	bic.w	r3, r3, #7
 8002768:	3308      	adds	r3, #8
 800276a:	9303      	str	r3, [sp, #12]
 800276c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800276e:	443b      	add	r3, r7
 8002770:	9309      	str	r3, [sp, #36]	; 0x24
 8002772:	e767      	b.n	8002644 <_vfiprintf_r+0x94>
 8002774:	460c      	mov	r4, r1
 8002776:	2001      	movs	r0, #1
 8002778:	fb0c 3202 	mla	r2, ip, r2, r3
 800277c:	e7a5      	b.n	80026ca <_vfiprintf_r+0x11a>
 800277e:	2300      	movs	r3, #0
 8002780:	f04f 0c0a 	mov.w	ip, #10
 8002784:	4619      	mov	r1, r3
 8002786:	3401      	adds	r4, #1
 8002788:	9305      	str	r3, [sp, #20]
 800278a:	4620      	mov	r0, r4
 800278c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002790:	3a30      	subs	r2, #48	; 0x30
 8002792:	2a09      	cmp	r2, #9
 8002794:	d903      	bls.n	800279e <_vfiprintf_r+0x1ee>
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0c5      	beq.n	8002726 <_vfiprintf_r+0x176>
 800279a:	9105      	str	r1, [sp, #20]
 800279c:	e7c3      	b.n	8002726 <_vfiprintf_r+0x176>
 800279e:	4604      	mov	r4, r0
 80027a0:	2301      	movs	r3, #1
 80027a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80027a6:	e7f0      	b.n	800278a <_vfiprintf_r+0x1da>
 80027a8:	ab03      	add	r3, sp, #12
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	462a      	mov	r2, r5
 80027ae:	4630      	mov	r0, r6
 80027b0:	4b15      	ldr	r3, [pc, #84]	; (8002808 <_vfiprintf_r+0x258>)
 80027b2:	a904      	add	r1, sp, #16
 80027b4:	f3af 8000 	nop.w
 80027b8:	4607      	mov	r7, r0
 80027ba:	1c78      	adds	r0, r7, #1
 80027bc:	d1d6      	bne.n	800276c <_vfiprintf_r+0x1bc>
 80027be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80027c0:	07d9      	lsls	r1, r3, #31
 80027c2:	d405      	bmi.n	80027d0 <_vfiprintf_r+0x220>
 80027c4:	89ab      	ldrh	r3, [r5, #12]
 80027c6:	059a      	lsls	r2, r3, #22
 80027c8:	d402      	bmi.n	80027d0 <_vfiprintf_r+0x220>
 80027ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80027cc:	f7ff fad2 	bl	8001d74 <__retarget_lock_release_recursive>
 80027d0:	89ab      	ldrh	r3, [r5, #12]
 80027d2:	065b      	lsls	r3, r3, #25
 80027d4:	f53f af12 	bmi.w	80025fc <_vfiprintf_r+0x4c>
 80027d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80027da:	e711      	b.n	8002600 <_vfiprintf_r+0x50>
 80027dc:	ab03      	add	r3, sp, #12
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	462a      	mov	r2, r5
 80027e2:	4630      	mov	r0, r6
 80027e4:	4b08      	ldr	r3, [pc, #32]	; (8002808 <_vfiprintf_r+0x258>)
 80027e6:	a904      	add	r1, sp, #16
 80027e8:	f000 f882 	bl	80028f0 <_printf_i>
 80027ec:	e7e4      	b.n	80027b8 <_vfiprintf_r+0x208>
 80027ee:	bf00      	nop
 80027f0:	08003900 	.word	0x08003900
 80027f4:	08003920 	.word	0x08003920
 80027f8:	080038e0 	.word	0x080038e0
 80027fc:	08003944 	.word	0x08003944
 8002800:	0800394e 	.word	0x0800394e
 8002804:	00000000 	.word	0x00000000
 8002808:	0800258b 	.word	0x0800258b
 800280c:	0800394a 	.word	0x0800394a

08002810 <_printf_common>:
 8002810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002814:	4616      	mov	r6, r2
 8002816:	4699      	mov	r9, r3
 8002818:	688a      	ldr	r2, [r1, #8]
 800281a:	690b      	ldr	r3, [r1, #16]
 800281c:	4607      	mov	r7, r0
 800281e:	4293      	cmp	r3, r2
 8002820:	bfb8      	it	lt
 8002822:	4613      	movlt	r3, r2
 8002824:	6033      	str	r3, [r6, #0]
 8002826:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800282a:	460c      	mov	r4, r1
 800282c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002830:	b10a      	cbz	r2, 8002836 <_printf_common+0x26>
 8002832:	3301      	adds	r3, #1
 8002834:	6033      	str	r3, [r6, #0]
 8002836:	6823      	ldr	r3, [r4, #0]
 8002838:	0699      	lsls	r1, r3, #26
 800283a:	bf42      	ittt	mi
 800283c:	6833      	ldrmi	r3, [r6, #0]
 800283e:	3302      	addmi	r3, #2
 8002840:	6033      	strmi	r3, [r6, #0]
 8002842:	6825      	ldr	r5, [r4, #0]
 8002844:	f015 0506 	ands.w	r5, r5, #6
 8002848:	d106      	bne.n	8002858 <_printf_common+0x48>
 800284a:	f104 0a19 	add.w	sl, r4, #25
 800284e:	68e3      	ldr	r3, [r4, #12]
 8002850:	6832      	ldr	r2, [r6, #0]
 8002852:	1a9b      	subs	r3, r3, r2
 8002854:	42ab      	cmp	r3, r5
 8002856:	dc28      	bgt.n	80028aa <_printf_common+0x9a>
 8002858:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800285c:	1e13      	subs	r3, r2, #0
 800285e:	6822      	ldr	r2, [r4, #0]
 8002860:	bf18      	it	ne
 8002862:	2301      	movne	r3, #1
 8002864:	0692      	lsls	r2, r2, #26
 8002866:	d42d      	bmi.n	80028c4 <_printf_common+0xb4>
 8002868:	4649      	mov	r1, r9
 800286a:	4638      	mov	r0, r7
 800286c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002870:	47c0      	blx	r8
 8002872:	3001      	adds	r0, #1
 8002874:	d020      	beq.n	80028b8 <_printf_common+0xa8>
 8002876:	6823      	ldr	r3, [r4, #0]
 8002878:	68e5      	ldr	r5, [r4, #12]
 800287a:	f003 0306 	and.w	r3, r3, #6
 800287e:	2b04      	cmp	r3, #4
 8002880:	bf18      	it	ne
 8002882:	2500      	movne	r5, #0
 8002884:	6832      	ldr	r2, [r6, #0]
 8002886:	f04f 0600 	mov.w	r6, #0
 800288a:	68a3      	ldr	r3, [r4, #8]
 800288c:	bf08      	it	eq
 800288e:	1aad      	subeq	r5, r5, r2
 8002890:	6922      	ldr	r2, [r4, #16]
 8002892:	bf08      	it	eq
 8002894:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002898:	4293      	cmp	r3, r2
 800289a:	bfc4      	itt	gt
 800289c:	1a9b      	subgt	r3, r3, r2
 800289e:	18ed      	addgt	r5, r5, r3
 80028a0:	341a      	adds	r4, #26
 80028a2:	42b5      	cmp	r5, r6
 80028a4:	d11a      	bne.n	80028dc <_printf_common+0xcc>
 80028a6:	2000      	movs	r0, #0
 80028a8:	e008      	b.n	80028bc <_printf_common+0xac>
 80028aa:	2301      	movs	r3, #1
 80028ac:	4652      	mov	r2, sl
 80028ae:	4649      	mov	r1, r9
 80028b0:	4638      	mov	r0, r7
 80028b2:	47c0      	blx	r8
 80028b4:	3001      	adds	r0, #1
 80028b6:	d103      	bne.n	80028c0 <_printf_common+0xb0>
 80028b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028c0:	3501      	adds	r5, #1
 80028c2:	e7c4      	b.n	800284e <_printf_common+0x3e>
 80028c4:	2030      	movs	r0, #48	; 0x30
 80028c6:	18e1      	adds	r1, r4, r3
 80028c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80028cc:	1c5a      	adds	r2, r3, #1
 80028ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80028d2:	4422      	add	r2, r4
 80028d4:	3302      	adds	r3, #2
 80028d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80028da:	e7c5      	b.n	8002868 <_printf_common+0x58>
 80028dc:	2301      	movs	r3, #1
 80028de:	4622      	mov	r2, r4
 80028e0:	4649      	mov	r1, r9
 80028e2:	4638      	mov	r0, r7
 80028e4:	47c0      	blx	r8
 80028e6:	3001      	adds	r0, #1
 80028e8:	d0e6      	beq.n	80028b8 <_printf_common+0xa8>
 80028ea:	3601      	adds	r6, #1
 80028ec:	e7d9      	b.n	80028a2 <_printf_common+0x92>
	...

080028f0 <_printf_i>:
 80028f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80028f4:	460c      	mov	r4, r1
 80028f6:	7e27      	ldrb	r7, [r4, #24]
 80028f8:	4691      	mov	r9, r2
 80028fa:	2f78      	cmp	r7, #120	; 0x78
 80028fc:	4680      	mov	r8, r0
 80028fe:	469a      	mov	sl, r3
 8002900:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002902:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002906:	d807      	bhi.n	8002918 <_printf_i+0x28>
 8002908:	2f62      	cmp	r7, #98	; 0x62
 800290a:	d80a      	bhi.n	8002922 <_printf_i+0x32>
 800290c:	2f00      	cmp	r7, #0
 800290e:	f000 80d9 	beq.w	8002ac4 <_printf_i+0x1d4>
 8002912:	2f58      	cmp	r7, #88	; 0x58
 8002914:	f000 80a4 	beq.w	8002a60 <_printf_i+0x170>
 8002918:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800291c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002920:	e03a      	b.n	8002998 <_printf_i+0xa8>
 8002922:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002926:	2b15      	cmp	r3, #21
 8002928:	d8f6      	bhi.n	8002918 <_printf_i+0x28>
 800292a:	a001      	add	r0, pc, #4	; (adr r0, 8002930 <_printf_i+0x40>)
 800292c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002930:	08002989 	.word	0x08002989
 8002934:	0800299d 	.word	0x0800299d
 8002938:	08002919 	.word	0x08002919
 800293c:	08002919 	.word	0x08002919
 8002940:	08002919 	.word	0x08002919
 8002944:	08002919 	.word	0x08002919
 8002948:	0800299d 	.word	0x0800299d
 800294c:	08002919 	.word	0x08002919
 8002950:	08002919 	.word	0x08002919
 8002954:	08002919 	.word	0x08002919
 8002958:	08002919 	.word	0x08002919
 800295c:	08002aab 	.word	0x08002aab
 8002960:	080029cd 	.word	0x080029cd
 8002964:	08002a8d 	.word	0x08002a8d
 8002968:	08002919 	.word	0x08002919
 800296c:	08002919 	.word	0x08002919
 8002970:	08002acd 	.word	0x08002acd
 8002974:	08002919 	.word	0x08002919
 8002978:	080029cd 	.word	0x080029cd
 800297c:	08002919 	.word	0x08002919
 8002980:	08002919 	.word	0x08002919
 8002984:	08002a95 	.word	0x08002a95
 8002988:	680b      	ldr	r3, [r1, #0]
 800298a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800298e:	1d1a      	adds	r2, r3, #4
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	600a      	str	r2, [r1, #0]
 8002994:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002998:	2301      	movs	r3, #1
 800299a:	e0a4      	b.n	8002ae6 <_printf_i+0x1f6>
 800299c:	6825      	ldr	r5, [r4, #0]
 800299e:	6808      	ldr	r0, [r1, #0]
 80029a0:	062e      	lsls	r6, r5, #24
 80029a2:	f100 0304 	add.w	r3, r0, #4
 80029a6:	d50a      	bpl.n	80029be <_printf_i+0xce>
 80029a8:	6805      	ldr	r5, [r0, #0]
 80029aa:	600b      	str	r3, [r1, #0]
 80029ac:	2d00      	cmp	r5, #0
 80029ae:	da03      	bge.n	80029b8 <_printf_i+0xc8>
 80029b0:	232d      	movs	r3, #45	; 0x2d
 80029b2:	426d      	negs	r5, r5
 80029b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029b8:	230a      	movs	r3, #10
 80029ba:	485e      	ldr	r0, [pc, #376]	; (8002b34 <_printf_i+0x244>)
 80029bc:	e019      	b.n	80029f2 <_printf_i+0x102>
 80029be:	f015 0f40 	tst.w	r5, #64	; 0x40
 80029c2:	6805      	ldr	r5, [r0, #0]
 80029c4:	600b      	str	r3, [r1, #0]
 80029c6:	bf18      	it	ne
 80029c8:	b22d      	sxthne	r5, r5
 80029ca:	e7ef      	b.n	80029ac <_printf_i+0xbc>
 80029cc:	680b      	ldr	r3, [r1, #0]
 80029ce:	6825      	ldr	r5, [r4, #0]
 80029d0:	1d18      	adds	r0, r3, #4
 80029d2:	6008      	str	r0, [r1, #0]
 80029d4:	0628      	lsls	r0, r5, #24
 80029d6:	d501      	bpl.n	80029dc <_printf_i+0xec>
 80029d8:	681d      	ldr	r5, [r3, #0]
 80029da:	e002      	b.n	80029e2 <_printf_i+0xf2>
 80029dc:	0669      	lsls	r1, r5, #25
 80029de:	d5fb      	bpl.n	80029d8 <_printf_i+0xe8>
 80029e0:	881d      	ldrh	r5, [r3, #0]
 80029e2:	2f6f      	cmp	r7, #111	; 0x6f
 80029e4:	bf0c      	ite	eq
 80029e6:	2308      	moveq	r3, #8
 80029e8:	230a      	movne	r3, #10
 80029ea:	4852      	ldr	r0, [pc, #328]	; (8002b34 <_printf_i+0x244>)
 80029ec:	2100      	movs	r1, #0
 80029ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80029f2:	6866      	ldr	r6, [r4, #4]
 80029f4:	2e00      	cmp	r6, #0
 80029f6:	bfa8      	it	ge
 80029f8:	6821      	ldrge	r1, [r4, #0]
 80029fa:	60a6      	str	r6, [r4, #8]
 80029fc:	bfa4      	itt	ge
 80029fe:	f021 0104 	bicge.w	r1, r1, #4
 8002a02:	6021      	strge	r1, [r4, #0]
 8002a04:	b90d      	cbnz	r5, 8002a0a <_printf_i+0x11a>
 8002a06:	2e00      	cmp	r6, #0
 8002a08:	d04d      	beq.n	8002aa6 <_printf_i+0x1b6>
 8002a0a:	4616      	mov	r6, r2
 8002a0c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002a10:	fb03 5711 	mls	r7, r3, r1, r5
 8002a14:	5dc7      	ldrb	r7, [r0, r7]
 8002a16:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002a1a:	462f      	mov	r7, r5
 8002a1c:	42bb      	cmp	r3, r7
 8002a1e:	460d      	mov	r5, r1
 8002a20:	d9f4      	bls.n	8002a0c <_printf_i+0x11c>
 8002a22:	2b08      	cmp	r3, #8
 8002a24:	d10b      	bne.n	8002a3e <_printf_i+0x14e>
 8002a26:	6823      	ldr	r3, [r4, #0]
 8002a28:	07df      	lsls	r7, r3, #31
 8002a2a:	d508      	bpl.n	8002a3e <_printf_i+0x14e>
 8002a2c:	6923      	ldr	r3, [r4, #16]
 8002a2e:	6861      	ldr	r1, [r4, #4]
 8002a30:	4299      	cmp	r1, r3
 8002a32:	bfde      	ittt	le
 8002a34:	2330      	movle	r3, #48	; 0x30
 8002a36:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002a3a:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8002a3e:	1b92      	subs	r2, r2, r6
 8002a40:	6122      	str	r2, [r4, #16]
 8002a42:	464b      	mov	r3, r9
 8002a44:	4621      	mov	r1, r4
 8002a46:	4640      	mov	r0, r8
 8002a48:	f8cd a000 	str.w	sl, [sp]
 8002a4c:	aa03      	add	r2, sp, #12
 8002a4e:	f7ff fedf 	bl	8002810 <_printf_common>
 8002a52:	3001      	adds	r0, #1
 8002a54:	d14c      	bne.n	8002af0 <_printf_i+0x200>
 8002a56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a5a:	b004      	add	sp, #16
 8002a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a60:	4834      	ldr	r0, [pc, #208]	; (8002b34 <_printf_i+0x244>)
 8002a62:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002a66:	680e      	ldr	r6, [r1, #0]
 8002a68:	6823      	ldr	r3, [r4, #0]
 8002a6a:	f856 5b04 	ldr.w	r5, [r6], #4
 8002a6e:	061f      	lsls	r7, r3, #24
 8002a70:	600e      	str	r6, [r1, #0]
 8002a72:	d514      	bpl.n	8002a9e <_printf_i+0x1ae>
 8002a74:	07d9      	lsls	r1, r3, #31
 8002a76:	bf44      	itt	mi
 8002a78:	f043 0320 	orrmi.w	r3, r3, #32
 8002a7c:	6023      	strmi	r3, [r4, #0]
 8002a7e:	b91d      	cbnz	r5, 8002a88 <_printf_i+0x198>
 8002a80:	6823      	ldr	r3, [r4, #0]
 8002a82:	f023 0320 	bic.w	r3, r3, #32
 8002a86:	6023      	str	r3, [r4, #0]
 8002a88:	2310      	movs	r3, #16
 8002a8a:	e7af      	b.n	80029ec <_printf_i+0xfc>
 8002a8c:	6823      	ldr	r3, [r4, #0]
 8002a8e:	f043 0320 	orr.w	r3, r3, #32
 8002a92:	6023      	str	r3, [r4, #0]
 8002a94:	2378      	movs	r3, #120	; 0x78
 8002a96:	4828      	ldr	r0, [pc, #160]	; (8002b38 <_printf_i+0x248>)
 8002a98:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002a9c:	e7e3      	b.n	8002a66 <_printf_i+0x176>
 8002a9e:	065e      	lsls	r6, r3, #25
 8002aa0:	bf48      	it	mi
 8002aa2:	b2ad      	uxthmi	r5, r5
 8002aa4:	e7e6      	b.n	8002a74 <_printf_i+0x184>
 8002aa6:	4616      	mov	r6, r2
 8002aa8:	e7bb      	b.n	8002a22 <_printf_i+0x132>
 8002aaa:	680b      	ldr	r3, [r1, #0]
 8002aac:	6826      	ldr	r6, [r4, #0]
 8002aae:	1d1d      	adds	r5, r3, #4
 8002ab0:	6960      	ldr	r0, [r4, #20]
 8002ab2:	600d      	str	r5, [r1, #0]
 8002ab4:	0635      	lsls	r5, r6, #24
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	d501      	bpl.n	8002abe <_printf_i+0x1ce>
 8002aba:	6018      	str	r0, [r3, #0]
 8002abc:	e002      	b.n	8002ac4 <_printf_i+0x1d4>
 8002abe:	0671      	lsls	r1, r6, #25
 8002ac0:	d5fb      	bpl.n	8002aba <_printf_i+0x1ca>
 8002ac2:	8018      	strh	r0, [r3, #0]
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	4616      	mov	r6, r2
 8002ac8:	6123      	str	r3, [r4, #16]
 8002aca:	e7ba      	b.n	8002a42 <_printf_i+0x152>
 8002acc:	680b      	ldr	r3, [r1, #0]
 8002ace:	1d1a      	adds	r2, r3, #4
 8002ad0:	600a      	str	r2, [r1, #0]
 8002ad2:	681e      	ldr	r6, [r3, #0]
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	4630      	mov	r0, r6
 8002ad8:	6862      	ldr	r2, [r4, #4]
 8002ada:	f000 fe67 	bl	80037ac <memchr>
 8002ade:	b108      	cbz	r0, 8002ae4 <_printf_i+0x1f4>
 8002ae0:	1b80      	subs	r0, r0, r6
 8002ae2:	6060      	str	r0, [r4, #4]
 8002ae4:	6863      	ldr	r3, [r4, #4]
 8002ae6:	6123      	str	r3, [r4, #16]
 8002ae8:	2300      	movs	r3, #0
 8002aea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002aee:	e7a8      	b.n	8002a42 <_printf_i+0x152>
 8002af0:	4632      	mov	r2, r6
 8002af2:	4649      	mov	r1, r9
 8002af4:	4640      	mov	r0, r8
 8002af6:	6923      	ldr	r3, [r4, #16]
 8002af8:	47d0      	blx	sl
 8002afa:	3001      	adds	r0, #1
 8002afc:	d0ab      	beq.n	8002a56 <_printf_i+0x166>
 8002afe:	6823      	ldr	r3, [r4, #0]
 8002b00:	079b      	lsls	r3, r3, #30
 8002b02:	d413      	bmi.n	8002b2c <_printf_i+0x23c>
 8002b04:	68e0      	ldr	r0, [r4, #12]
 8002b06:	9b03      	ldr	r3, [sp, #12]
 8002b08:	4298      	cmp	r0, r3
 8002b0a:	bfb8      	it	lt
 8002b0c:	4618      	movlt	r0, r3
 8002b0e:	e7a4      	b.n	8002a5a <_printf_i+0x16a>
 8002b10:	2301      	movs	r3, #1
 8002b12:	4632      	mov	r2, r6
 8002b14:	4649      	mov	r1, r9
 8002b16:	4640      	mov	r0, r8
 8002b18:	47d0      	blx	sl
 8002b1a:	3001      	adds	r0, #1
 8002b1c:	d09b      	beq.n	8002a56 <_printf_i+0x166>
 8002b1e:	3501      	adds	r5, #1
 8002b20:	68e3      	ldr	r3, [r4, #12]
 8002b22:	9903      	ldr	r1, [sp, #12]
 8002b24:	1a5b      	subs	r3, r3, r1
 8002b26:	42ab      	cmp	r3, r5
 8002b28:	dcf2      	bgt.n	8002b10 <_printf_i+0x220>
 8002b2a:	e7eb      	b.n	8002b04 <_printf_i+0x214>
 8002b2c:	2500      	movs	r5, #0
 8002b2e:	f104 0619 	add.w	r6, r4, #25
 8002b32:	e7f5      	b.n	8002b20 <_printf_i+0x230>
 8002b34:	08003955 	.word	0x08003955
 8002b38:	08003966 	.word	0x08003966

08002b3c <__svfiscanf_r>:
 8002b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b40:	461d      	mov	r5, r3
 8002b42:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8002b44:	4606      	mov	r6, r0
 8002b46:	07df      	lsls	r7, r3, #31
 8002b48:	460c      	mov	r4, r1
 8002b4a:	4692      	mov	sl, r2
 8002b4c:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8002b50:	d405      	bmi.n	8002b5e <__svfiscanf_r+0x22>
 8002b52:	898b      	ldrh	r3, [r1, #12]
 8002b54:	0598      	lsls	r0, r3, #22
 8002b56:	d402      	bmi.n	8002b5e <__svfiscanf_r+0x22>
 8002b58:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8002b5a:	f7ff f90a 	bl	8001d72 <__retarget_lock_acquire_recursive>
 8002b5e:	2300      	movs	r3, #0
 8002b60:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 8002b64:	4bae      	ldr	r3, [pc, #696]	; (8002e20 <__svfiscanf_r+0x2e4>)
 8002b66:	f10d 0804 	add.w	r8, sp, #4
 8002b6a:	93a0      	str	r3, [sp, #640]	; 0x280
 8002b6c:	4bad      	ldr	r3, [pc, #692]	; (8002e24 <__svfiscanf_r+0x2e8>)
 8002b6e:	4fae      	ldr	r7, [pc, #696]	; (8002e28 <__svfiscanf_r+0x2ec>)
 8002b70:	f8df 92b8 	ldr.w	r9, [pc, #696]	; 8002e2c <__svfiscanf_r+0x2f0>
 8002b74:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8002b78:	93a1      	str	r3, [sp, #644]	; 0x284
 8002b7a:	9500      	str	r5, [sp, #0]
 8002b7c:	f89a b000 	ldrb.w	fp, [sl]
 8002b80:	f1bb 0f00 	cmp.w	fp, #0
 8002b84:	f000 8170 	beq.w	8002e68 <__svfiscanf_r+0x32c>
 8002b88:	f81b 3007 	ldrb.w	r3, [fp, r7]
 8002b8c:	f10a 0501 	add.w	r5, sl, #1
 8002b90:	f013 0308 	ands.w	r3, r3, #8
 8002b94:	d019      	beq.n	8002bca <__svfiscanf_r+0x8e>
 8002b96:	6863      	ldr	r3, [r4, #4]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	dd0f      	ble.n	8002bbc <__svfiscanf_r+0x80>
 8002b9c:	6823      	ldr	r3, [r4, #0]
 8002b9e:	781a      	ldrb	r2, [r3, #0]
 8002ba0:	5cba      	ldrb	r2, [r7, r2]
 8002ba2:	0711      	lsls	r1, r2, #28
 8002ba4:	d401      	bmi.n	8002baa <__svfiscanf_r+0x6e>
 8002ba6:	46aa      	mov	sl, r5
 8002ba8:	e7e8      	b.n	8002b7c <__svfiscanf_r+0x40>
 8002baa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8002bac:	3301      	adds	r3, #1
 8002bae:	3201      	adds	r2, #1
 8002bb0:	9245      	str	r2, [sp, #276]	; 0x114
 8002bb2:	6862      	ldr	r2, [r4, #4]
 8002bb4:	6023      	str	r3, [r4, #0]
 8002bb6:	3a01      	subs	r2, #1
 8002bb8:	6062      	str	r2, [r4, #4]
 8002bba:	e7ec      	b.n	8002b96 <__svfiscanf_r+0x5a>
 8002bbc:	4621      	mov	r1, r4
 8002bbe:	4630      	mov	r0, r6
 8002bc0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002bc2:	4798      	blx	r3
 8002bc4:	2800      	cmp	r0, #0
 8002bc6:	d0e9      	beq.n	8002b9c <__svfiscanf_r+0x60>
 8002bc8:	e7ed      	b.n	8002ba6 <__svfiscanf_r+0x6a>
 8002bca:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8002bce:	f040 8086 	bne.w	8002cde <__svfiscanf_r+0x1a2>
 8002bd2:	9341      	str	r3, [sp, #260]	; 0x104
 8002bd4:	9343      	str	r3, [sp, #268]	; 0x10c
 8002bd6:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8002bda:	220a      	movs	r2, #10
 8002bdc:	2b2a      	cmp	r3, #42	; 0x2a
 8002bde:	bf02      	ittt	eq
 8002be0:	2310      	moveq	r3, #16
 8002be2:	f10a 0502 	addeq.w	r5, sl, #2
 8002be6:	9341      	streq	r3, [sp, #260]	; 0x104
 8002be8:	46aa      	mov	sl, r5
 8002bea:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8002bee:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8002bf2:	2b09      	cmp	r3, #9
 8002bf4:	d91e      	bls.n	8002c34 <__svfiscanf_r+0xf8>
 8002bf6:	2203      	movs	r2, #3
 8002bf8:	488c      	ldr	r0, [pc, #560]	; (8002e2c <__svfiscanf_r+0x2f0>)
 8002bfa:	f000 fdd7 	bl	80037ac <memchr>
 8002bfe:	b140      	cbz	r0, 8002c12 <__svfiscanf_r+0xd6>
 8002c00:	2301      	movs	r3, #1
 8002c02:	4655      	mov	r5, sl
 8002c04:	eba0 0009 	sub.w	r0, r0, r9
 8002c08:	fa03 f000 	lsl.w	r0, r3, r0
 8002c0c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002c0e:	4318      	orrs	r0, r3
 8002c10:	9041      	str	r0, [sp, #260]	; 0x104
 8002c12:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002c16:	2b78      	cmp	r3, #120	; 0x78
 8002c18:	d807      	bhi.n	8002c2a <__svfiscanf_r+0xee>
 8002c1a:	2b57      	cmp	r3, #87	; 0x57
 8002c1c:	d811      	bhi.n	8002c42 <__svfiscanf_r+0x106>
 8002c1e:	2b25      	cmp	r3, #37	; 0x25
 8002c20:	d05d      	beq.n	8002cde <__svfiscanf_r+0x1a2>
 8002c22:	d857      	bhi.n	8002cd4 <__svfiscanf_r+0x198>
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 80d6 	beq.w	8002dd6 <__svfiscanf_r+0x29a>
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	9347      	str	r3, [sp, #284]	; 0x11c
 8002c2e:	230a      	movs	r3, #10
 8002c30:	9342      	str	r3, [sp, #264]	; 0x108
 8002c32:	e08b      	b.n	8002d4c <__svfiscanf_r+0x210>
 8002c34:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8002c36:	4655      	mov	r5, sl
 8002c38:	fb02 1303 	mla	r3, r2, r3, r1
 8002c3c:	3b30      	subs	r3, #48	; 0x30
 8002c3e:	9343      	str	r3, [sp, #268]	; 0x10c
 8002c40:	e7d2      	b.n	8002be8 <__svfiscanf_r+0xac>
 8002c42:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8002c46:	2a20      	cmp	r2, #32
 8002c48:	d8ef      	bhi.n	8002c2a <__svfiscanf_r+0xee>
 8002c4a:	a101      	add	r1, pc, #4	; (adr r1, 8002c50 <__svfiscanf_r+0x114>)
 8002c4c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002c50:	08002d37 	.word	0x08002d37
 8002c54:	08002c2b 	.word	0x08002c2b
 8002c58:	08002c2b 	.word	0x08002c2b
 8002c5c:	08002d95 	.word	0x08002d95
 8002c60:	08002c2b 	.word	0x08002c2b
 8002c64:	08002c2b 	.word	0x08002c2b
 8002c68:	08002c2b 	.word	0x08002c2b
 8002c6c:	08002c2b 	.word	0x08002c2b
 8002c70:	08002c2b 	.word	0x08002c2b
 8002c74:	08002c2b 	.word	0x08002c2b
 8002c78:	08002c2b 	.word	0x08002c2b
 8002c7c:	08002dab 	.word	0x08002dab
 8002c80:	08002d81 	.word	0x08002d81
 8002c84:	08002cdb 	.word	0x08002cdb
 8002c88:	08002cdb 	.word	0x08002cdb
 8002c8c:	08002cdb 	.word	0x08002cdb
 8002c90:	08002c2b 	.word	0x08002c2b
 8002c94:	08002d85 	.word	0x08002d85
 8002c98:	08002c2b 	.word	0x08002c2b
 8002c9c:	08002c2b 	.word	0x08002c2b
 8002ca0:	08002c2b 	.word	0x08002c2b
 8002ca4:	08002c2b 	.word	0x08002c2b
 8002ca8:	08002dbb 	.word	0x08002dbb
 8002cac:	08002d8d 	.word	0x08002d8d
 8002cb0:	08002d2f 	.word	0x08002d2f
 8002cb4:	08002c2b 	.word	0x08002c2b
 8002cb8:	08002c2b 	.word	0x08002c2b
 8002cbc:	08002db7 	.word	0x08002db7
 8002cc0:	08002c2b 	.word	0x08002c2b
 8002cc4:	08002d81 	.word	0x08002d81
 8002cc8:	08002c2b 	.word	0x08002c2b
 8002ccc:	08002c2b 	.word	0x08002c2b
 8002cd0:	08002d37 	.word	0x08002d37
 8002cd4:	3b45      	subs	r3, #69	; 0x45
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d8a7      	bhi.n	8002c2a <__svfiscanf_r+0xee>
 8002cda:	2305      	movs	r3, #5
 8002cdc:	e035      	b.n	8002d4a <__svfiscanf_r+0x20e>
 8002cde:	6863      	ldr	r3, [r4, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	dd0d      	ble.n	8002d00 <__svfiscanf_r+0x1c4>
 8002ce4:	6823      	ldr	r3, [r4, #0]
 8002ce6:	781a      	ldrb	r2, [r3, #0]
 8002ce8:	455a      	cmp	r2, fp
 8002cea:	f040 80bd 	bne.w	8002e68 <__svfiscanf_r+0x32c>
 8002cee:	3301      	adds	r3, #1
 8002cf0:	6862      	ldr	r2, [r4, #4]
 8002cf2:	6023      	str	r3, [r4, #0]
 8002cf4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8002cf6:	3a01      	subs	r2, #1
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	6062      	str	r2, [r4, #4]
 8002cfc:	9345      	str	r3, [sp, #276]	; 0x114
 8002cfe:	e752      	b.n	8002ba6 <__svfiscanf_r+0x6a>
 8002d00:	4621      	mov	r1, r4
 8002d02:	4630      	mov	r0, r6
 8002d04:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002d06:	4798      	blx	r3
 8002d08:	2800      	cmp	r0, #0
 8002d0a:	d0eb      	beq.n	8002ce4 <__svfiscanf_r+0x1a8>
 8002d0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d0e:	07da      	lsls	r2, r3, #31
 8002d10:	f140 80a2 	bpl.w	8002e58 <__svfiscanf_r+0x31c>
 8002d14:	9844      	ldr	r0, [sp, #272]	; 0x110
 8002d16:	2800      	cmp	r0, #0
 8002d18:	d066      	beq.n	8002de8 <__svfiscanf_r+0x2ac>
 8002d1a:	89a3      	ldrh	r3, [r4, #12]
 8002d1c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002d20:	bf18      	it	ne
 8002d22:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8002d26:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8002d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d2e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8002d30:	f042 0220 	orr.w	r2, r2, #32
 8002d34:	9241      	str	r2, [sp, #260]	; 0x104
 8002d36:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8002d38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d3c:	9241      	str	r2, [sp, #260]	; 0x104
 8002d3e:	2210      	movs	r2, #16
 8002d40:	2b6f      	cmp	r3, #111	; 0x6f
 8002d42:	bf34      	ite	cc
 8002d44:	2303      	movcc	r3, #3
 8002d46:	2304      	movcs	r3, #4
 8002d48:	9242      	str	r2, [sp, #264]	; 0x108
 8002d4a:	9347      	str	r3, [sp, #284]	; 0x11c
 8002d4c:	6863      	ldr	r3, [r4, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	dd4d      	ble.n	8002dee <__svfiscanf_r+0x2b2>
 8002d52:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002d54:	065b      	lsls	r3, r3, #25
 8002d56:	d404      	bmi.n	8002d62 <__svfiscanf_r+0x226>
 8002d58:	6823      	ldr	r3, [r4, #0]
 8002d5a:	781a      	ldrb	r2, [r3, #0]
 8002d5c:	5cba      	ldrb	r2, [r7, r2]
 8002d5e:	0710      	lsls	r0, r2, #28
 8002d60:	d44c      	bmi.n	8002dfc <__svfiscanf_r+0x2c0>
 8002d62:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	dc63      	bgt.n	8002e30 <__svfiscanf_r+0x2f4>
 8002d68:	466b      	mov	r3, sp
 8002d6a:	4622      	mov	r2, r4
 8002d6c:	4630      	mov	r0, r6
 8002d6e:	a941      	add	r1, sp, #260	; 0x104
 8002d70:	f000 f8b0 	bl	8002ed4 <_scanf_chars>
 8002d74:	2801      	cmp	r0, #1
 8002d76:	d077      	beq.n	8002e68 <__svfiscanf_r+0x32c>
 8002d78:	2802      	cmp	r0, #2
 8002d7a:	f47f af14 	bne.w	8002ba6 <__svfiscanf_r+0x6a>
 8002d7e:	e7c5      	b.n	8002d0c <__svfiscanf_r+0x1d0>
 8002d80:	220a      	movs	r2, #10
 8002d82:	e7dd      	b.n	8002d40 <__svfiscanf_r+0x204>
 8002d84:	2300      	movs	r3, #0
 8002d86:	9342      	str	r3, [sp, #264]	; 0x108
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e7de      	b.n	8002d4a <__svfiscanf_r+0x20e>
 8002d8c:	2308      	movs	r3, #8
 8002d8e:	9342      	str	r3, [sp, #264]	; 0x108
 8002d90:	2304      	movs	r3, #4
 8002d92:	e7da      	b.n	8002d4a <__svfiscanf_r+0x20e>
 8002d94:	4629      	mov	r1, r5
 8002d96:	4640      	mov	r0, r8
 8002d98:	f000 fad6 	bl	8003348 <__sccl>
 8002d9c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002d9e:	4605      	mov	r5, r0
 8002da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002da4:	9341      	str	r3, [sp, #260]	; 0x104
 8002da6:	2301      	movs	r3, #1
 8002da8:	e7cf      	b.n	8002d4a <__svfiscanf_r+0x20e>
 8002daa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002dac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002db0:	9341      	str	r3, [sp, #260]	; 0x104
 8002db2:	2300      	movs	r3, #0
 8002db4:	e7c9      	b.n	8002d4a <__svfiscanf_r+0x20e>
 8002db6:	2302      	movs	r3, #2
 8002db8:	e7c7      	b.n	8002d4a <__svfiscanf_r+0x20e>
 8002dba:	9841      	ldr	r0, [sp, #260]	; 0x104
 8002dbc:	06c3      	lsls	r3, r0, #27
 8002dbe:	f53f aef2 	bmi.w	8002ba6 <__svfiscanf_r+0x6a>
 8002dc2:	9b00      	ldr	r3, [sp, #0]
 8002dc4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8002dc6:	1d19      	adds	r1, r3, #4
 8002dc8:	9100      	str	r1, [sp, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	07c0      	lsls	r0, r0, #31
 8002dce:	bf4c      	ite	mi
 8002dd0:	801a      	strhmi	r2, [r3, #0]
 8002dd2:	601a      	strpl	r2, [r3, #0]
 8002dd4:	e6e7      	b.n	8002ba6 <__svfiscanf_r+0x6a>
 8002dd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002dd8:	07d8      	lsls	r0, r3, #31
 8002dda:	d405      	bmi.n	8002de8 <__svfiscanf_r+0x2ac>
 8002ddc:	89a3      	ldrh	r3, [r4, #12]
 8002dde:	0599      	lsls	r1, r3, #22
 8002de0:	d402      	bmi.n	8002de8 <__svfiscanf_r+0x2ac>
 8002de2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002de4:	f7fe ffc6 	bl	8001d74 <__retarget_lock_release_recursive>
 8002de8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002dec:	e79b      	b.n	8002d26 <__svfiscanf_r+0x1ea>
 8002dee:	4621      	mov	r1, r4
 8002df0:	4630      	mov	r0, r6
 8002df2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002df4:	4798      	blx	r3
 8002df6:	2800      	cmp	r0, #0
 8002df8:	d0ab      	beq.n	8002d52 <__svfiscanf_r+0x216>
 8002dfa:	e787      	b.n	8002d0c <__svfiscanf_r+0x1d0>
 8002dfc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8002dfe:	3201      	adds	r2, #1
 8002e00:	9245      	str	r2, [sp, #276]	; 0x114
 8002e02:	6862      	ldr	r2, [r4, #4]
 8002e04:	3a01      	subs	r2, #1
 8002e06:	2a00      	cmp	r2, #0
 8002e08:	6062      	str	r2, [r4, #4]
 8002e0a:	dd02      	ble.n	8002e12 <__svfiscanf_r+0x2d6>
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	6023      	str	r3, [r4, #0]
 8002e10:	e7a2      	b.n	8002d58 <__svfiscanf_r+0x21c>
 8002e12:	4621      	mov	r1, r4
 8002e14:	4630      	mov	r0, r6
 8002e16:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002e18:	4798      	blx	r3
 8002e1a:	2800      	cmp	r0, #0
 8002e1c:	d09c      	beq.n	8002d58 <__svfiscanf_r+0x21c>
 8002e1e:	e775      	b.n	8002d0c <__svfiscanf_r+0x1d0>
 8002e20:	08003639 	.word	0x08003639
 8002e24:	08003231 	.word	0x08003231
 8002e28:	08003993 	.word	0x08003993
 8002e2c:	0800394a 	.word	0x0800394a
 8002e30:	2b04      	cmp	r3, #4
 8002e32:	dc06      	bgt.n	8002e42 <__svfiscanf_r+0x306>
 8002e34:	466b      	mov	r3, sp
 8002e36:	4622      	mov	r2, r4
 8002e38:	4630      	mov	r0, r6
 8002e3a:	a941      	add	r1, sp, #260	; 0x104
 8002e3c:	f000 f8a2 	bl	8002f84 <_scanf_i>
 8002e40:	e798      	b.n	8002d74 <__svfiscanf_r+0x238>
 8002e42:	4b0f      	ldr	r3, [pc, #60]	; (8002e80 <__svfiscanf_r+0x344>)
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f43f aeae 	beq.w	8002ba6 <__svfiscanf_r+0x6a>
 8002e4a:	466b      	mov	r3, sp
 8002e4c:	4622      	mov	r2, r4
 8002e4e:	4630      	mov	r0, r6
 8002e50:	a941      	add	r1, sp, #260	; 0x104
 8002e52:	f3af 8000 	nop.w
 8002e56:	e78d      	b.n	8002d74 <__svfiscanf_r+0x238>
 8002e58:	89a3      	ldrh	r3, [r4, #12]
 8002e5a:	0599      	lsls	r1, r3, #22
 8002e5c:	f53f af5a 	bmi.w	8002d14 <__svfiscanf_r+0x1d8>
 8002e60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e62:	f7fe ff87 	bl	8001d74 <__retarget_lock_release_recursive>
 8002e66:	e755      	b.n	8002d14 <__svfiscanf_r+0x1d8>
 8002e68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e6a:	07da      	lsls	r2, r3, #31
 8002e6c:	d405      	bmi.n	8002e7a <__svfiscanf_r+0x33e>
 8002e6e:	89a3      	ldrh	r3, [r4, #12]
 8002e70:	059b      	lsls	r3, r3, #22
 8002e72:	d402      	bmi.n	8002e7a <__svfiscanf_r+0x33e>
 8002e74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e76:	f7fe ff7d 	bl	8001d74 <__retarget_lock_release_recursive>
 8002e7a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8002e7c:	e753      	b.n	8002d26 <__svfiscanf_r+0x1ea>
 8002e7e:	bf00      	nop
 8002e80:	00000000 	.word	0x00000000

08002e84 <_vfiscanf_r>:
 8002e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e88:	460c      	mov	r4, r1
 8002e8a:	4616      	mov	r6, r2
 8002e8c:	461f      	mov	r7, r3
 8002e8e:	4605      	mov	r5, r0
 8002e90:	b118      	cbz	r0, 8002e9a <_vfiscanf_r+0x16>
 8002e92:	6983      	ldr	r3, [r0, #24]
 8002e94:	b90b      	cbnz	r3, 8002e9a <_vfiscanf_r+0x16>
 8002e96:	f7fe fe8d 	bl	8001bb4 <__sinit>
 8002e9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <_vfiscanf_r+0x44>)
 8002e9c:	429c      	cmp	r4, r3
 8002e9e:	d108      	bne.n	8002eb2 <_vfiscanf_r+0x2e>
 8002ea0:	686c      	ldr	r4, [r5, #4]
 8002ea2:	463b      	mov	r3, r7
 8002ea4:	4632      	mov	r2, r6
 8002ea6:	4621      	mov	r1, r4
 8002ea8:	4628      	mov	r0, r5
 8002eaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002eae:	f7ff be45 	b.w	8002b3c <__svfiscanf_r>
 8002eb2:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <_vfiscanf_r+0x48>)
 8002eb4:	429c      	cmp	r4, r3
 8002eb6:	d101      	bne.n	8002ebc <_vfiscanf_r+0x38>
 8002eb8:	68ac      	ldr	r4, [r5, #8]
 8002eba:	e7f2      	b.n	8002ea2 <_vfiscanf_r+0x1e>
 8002ebc:	4b04      	ldr	r3, [pc, #16]	; (8002ed0 <_vfiscanf_r+0x4c>)
 8002ebe:	429c      	cmp	r4, r3
 8002ec0:	bf08      	it	eq
 8002ec2:	68ec      	ldreq	r4, [r5, #12]
 8002ec4:	e7ed      	b.n	8002ea2 <_vfiscanf_r+0x1e>
 8002ec6:	bf00      	nop
 8002ec8:	08003900 	.word	0x08003900
 8002ecc:	08003920 	.word	0x08003920
 8002ed0:	080038e0 	.word	0x080038e0

08002ed4 <_scanf_chars>:
 8002ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ed8:	4615      	mov	r5, r2
 8002eda:	688a      	ldr	r2, [r1, #8]
 8002edc:	4680      	mov	r8, r0
 8002ede:	460c      	mov	r4, r1
 8002ee0:	b932      	cbnz	r2, 8002ef0 <_scanf_chars+0x1c>
 8002ee2:	698a      	ldr	r2, [r1, #24]
 8002ee4:	2a00      	cmp	r2, #0
 8002ee6:	bf0c      	ite	eq
 8002ee8:	2201      	moveq	r2, #1
 8002eea:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8002eee:	608a      	str	r2, [r1, #8]
 8002ef0:	2700      	movs	r7, #0
 8002ef2:	6822      	ldr	r2, [r4, #0]
 8002ef4:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8002f80 <_scanf_chars+0xac>
 8002ef8:	06d1      	lsls	r1, r2, #27
 8002efa:	bf5f      	itttt	pl
 8002efc:	681a      	ldrpl	r2, [r3, #0]
 8002efe:	1d11      	addpl	r1, r2, #4
 8002f00:	6019      	strpl	r1, [r3, #0]
 8002f02:	6816      	ldrpl	r6, [r2, #0]
 8002f04:	69a0      	ldr	r0, [r4, #24]
 8002f06:	b188      	cbz	r0, 8002f2c <_scanf_chars+0x58>
 8002f08:	2801      	cmp	r0, #1
 8002f0a:	d107      	bne.n	8002f1c <_scanf_chars+0x48>
 8002f0c:	682b      	ldr	r3, [r5, #0]
 8002f0e:	781a      	ldrb	r2, [r3, #0]
 8002f10:	6963      	ldr	r3, [r4, #20]
 8002f12:	5c9b      	ldrb	r3, [r3, r2]
 8002f14:	b953      	cbnz	r3, 8002f2c <_scanf_chars+0x58>
 8002f16:	bb27      	cbnz	r7, 8002f62 <_scanf_chars+0x8e>
 8002f18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f1c:	2802      	cmp	r0, #2
 8002f1e:	d120      	bne.n	8002f62 <_scanf_chars+0x8e>
 8002f20:	682b      	ldr	r3, [r5, #0]
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	f813 3009 	ldrb.w	r3, [r3, r9]
 8002f28:	071b      	lsls	r3, r3, #28
 8002f2a:	d41a      	bmi.n	8002f62 <_scanf_chars+0x8e>
 8002f2c:	6823      	ldr	r3, [r4, #0]
 8002f2e:	3701      	adds	r7, #1
 8002f30:	06da      	lsls	r2, r3, #27
 8002f32:	bf5e      	ittt	pl
 8002f34:	682b      	ldrpl	r3, [r5, #0]
 8002f36:	781b      	ldrbpl	r3, [r3, #0]
 8002f38:	f806 3b01 	strbpl.w	r3, [r6], #1
 8002f3c:	682a      	ldr	r2, [r5, #0]
 8002f3e:	686b      	ldr	r3, [r5, #4]
 8002f40:	3201      	adds	r2, #1
 8002f42:	602a      	str	r2, [r5, #0]
 8002f44:	68a2      	ldr	r2, [r4, #8]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	3a01      	subs	r2, #1
 8002f4a:	606b      	str	r3, [r5, #4]
 8002f4c:	60a2      	str	r2, [r4, #8]
 8002f4e:	b142      	cbz	r2, 8002f62 <_scanf_chars+0x8e>
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	dcd7      	bgt.n	8002f04 <_scanf_chars+0x30>
 8002f54:	4629      	mov	r1, r5
 8002f56:	4640      	mov	r0, r8
 8002f58:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8002f5c:	4798      	blx	r3
 8002f5e:	2800      	cmp	r0, #0
 8002f60:	d0d0      	beq.n	8002f04 <_scanf_chars+0x30>
 8002f62:	6823      	ldr	r3, [r4, #0]
 8002f64:	f013 0310 	ands.w	r3, r3, #16
 8002f68:	d105      	bne.n	8002f76 <_scanf_chars+0xa2>
 8002f6a:	68e2      	ldr	r2, [r4, #12]
 8002f6c:	3201      	adds	r2, #1
 8002f6e:	60e2      	str	r2, [r4, #12]
 8002f70:	69a2      	ldr	r2, [r4, #24]
 8002f72:	b102      	cbz	r2, 8002f76 <_scanf_chars+0xa2>
 8002f74:	7033      	strb	r3, [r6, #0]
 8002f76:	6923      	ldr	r3, [r4, #16]
 8002f78:	2000      	movs	r0, #0
 8002f7a:	441f      	add	r7, r3
 8002f7c:	6127      	str	r7, [r4, #16]
 8002f7e:	e7cb      	b.n	8002f18 <_scanf_chars+0x44>
 8002f80:	08003993 	.word	0x08003993

08002f84 <_scanf_i>:
 8002f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f88:	460c      	mov	r4, r1
 8002f8a:	4698      	mov	r8, r3
 8002f8c:	4b72      	ldr	r3, [pc, #456]	; (8003158 <_scanf_i+0x1d4>)
 8002f8e:	b087      	sub	sp, #28
 8002f90:	4682      	mov	sl, r0
 8002f92:	4616      	mov	r6, r2
 8002f94:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f98:	ab03      	add	r3, sp, #12
 8002f9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002f9e:	4b6f      	ldr	r3, [pc, #444]	; (800315c <_scanf_i+0x1d8>)
 8002fa0:	69a1      	ldr	r1, [r4, #24]
 8002fa2:	4a6f      	ldr	r2, [pc, #444]	; (8003160 <_scanf_i+0x1dc>)
 8002fa4:	4627      	mov	r7, r4
 8002fa6:	2903      	cmp	r1, #3
 8002fa8:	bf18      	it	ne
 8002faa:	461a      	movne	r2, r3
 8002fac:	68a3      	ldr	r3, [r4, #8]
 8002fae:	9201      	str	r2, [sp, #4]
 8002fb0:	1e5a      	subs	r2, r3, #1
 8002fb2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8002fb6:	bf81      	itttt	hi
 8002fb8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8002fbc:	eb03 0905 	addhi.w	r9, r3, r5
 8002fc0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8002fc4:	60a3      	strhi	r3, [r4, #8]
 8002fc6:	f857 3b1c 	ldr.w	r3, [r7], #28
 8002fca:	bf98      	it	ls
 8002fcc:	f04f 0900 	movls.w	r9, #0
 8002fd0:	463d      	mov	r5, r7
 8002fd2:	f04f 0b00 	mov.w	fp, #0
 8002fd6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8002fda:	6023      	str	r3, [r4, #0]
 8002fdc:	6831      	ldr	r1, [r6, #0]
 8002fde:	ab03      	add	r3, sp, #12
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	7809      	ldrb	r1, [r1, #0]
 8002fe4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8002fe8:	f000 fbe0 	bl	80037ac <memchr>
 8002fec:	b328      	cbz	r0, 800303a <_scanf_i+0xb6>
 8002fee:	f1bb 0f01 	cmp.w	fp, #1
 8002ff2:	d159      	bne.n	80030a8 <_scanf_i+0x124>
 8002ff4:	6862      	ldr	r2, [r4, #4]
 8002ff6:	b92a      	cbnz	r2, 8003004 <_scanf_i+0x80>
 8002ff8:	2308      	movs	r3, #8
 8002ffa:	6822      	ldr	r2, [r4, #0]
 8002ffc:	6063      	str	r3, [r4, #4]
 8002ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003002:	6022      	str	r2, [r4, #0]
 8003004:	6822      	ldr	r2, [r4, #0]
 8003006:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800300a:	6022      	str	r2, [r4, #0]
 800300c:	68a2      	ldr	r2, [r4, #8]
 800300e:	1e51      	subs	r1, r2, #1
 8003010:	60a1      	str	r1, [r4, #8]
 8003012:	b192      	cbz	r2, 800303a <_scanf_i+0xb6>
 8003014:	6832      	ldr	r2, [r6, #0]
 8003016:	1c51      	adds	r1, r2, #1
 8003018:	6031      	str	r1, [r6, #0]
 800301a:	7812      	ldrb	r2, [r2, #0]
 800301c:	f805 2b01 	strb.w	r2, [r5], #1
 8003020:	6872      	ldr	r2, [r6, #4]
 8003022:	3a01      	subs	r2, #1
 8003024:	2a00      	cmp	r2, #0
 8003026:	6072      	str	r2, [r6, #4]
 8003028:	dc07      	bgt.n	800303a <_scanf_i+0xb6>
 800302a:	4631      	mov	r1, r6
 800302c:	4650      	mov	r0, sl
 800302e:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8003032:	4790      	blx	r2
 8003034:	2800      	cmp	r0, #0
 8003036:	f040 8085 	bne.w	8003144 <_scanf_i+0x1c0>
 800303a:	f10b 0b01 	add.w	fp, fp, #1
 800303e:	f1bb 0f03 	cmp.w	fp, #3
 8003042:	d1cb      	bne.n	8002fdc <_scanf_i+0x58>
 8003044:	6863      	ldr	r3, [r4, #4]
 8003046:	b90b      	cbnz	r3, 800304c <_scanf_i+0xc8>
 8003048:	230a      	movs	r3, #10
 800304a:	6063      	str	r3, [r4, #4]
 800304c:	6863      	ldr	r3, [r4, #4]
 800304e:	4945      	ldr	r1, [pc, #276]	; (8003164 <_scanf_i+0x1e0>)
 8003050:	6960      	ldr	r0, [r4, #20]
 8003052:	1ac9      	subs	r1, r1, r3
 8003054:	f000 f978 	bl	8003348 <__sccl>
 8003058:	f04f 0b00 	mov.w	fp, #0
 800305c:	68a3      	ldr	r3, [r4, #8]
 800305e:	6822      	ldr	r2, [r4, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d03d      	beq.n	80030e0 <_scanf_i+0x15c>
 8003064:	6831      	ldr	r1, [r6, #0]
 8003066:	6960      	ldr	r0, [r4, #20]
 8003068:	f891 c000 	ldrb.w	ip, [r1]
 800306c:	f810 000c 	ldrb.w	r0, [r0, ip]
 8003070:	2800      	cmp	r0, #0
 8003072:	d035      	beq.n	80030e0 <_scanf_i+0x15c>
 8003074:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8003078:	d124      	bne.n	80030c4 <_scanf_i+0x140>
 800307a:	0510      	lsls	r0, r2, #20
 800307c:	d522      	bpl.n	80030c4 <_scanf_i+0x140>
 800307e:	f10b 0b01 	add.w	fp, fp, #1
 8003082:	f1b9 0f00 	cmp.w	r9, #0
 8003086:	d003      	beq.n	8003090 <_scanf_i+0x10c>
 8003088:	3301      	adds	r3, #1
 800308a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800308e:	60a3      	str	r3, [r4, #8]
 8003090:	6873      	ldr	r3, [r6, #4]
 8003092:	3b01      	subs	r3, #1
 8003094:	2b00      	cmp	r3, #0
 8003096:	6073      	str	r3, [r6, #4]
 8003098:	dd1b      	ble.n	80030d2 <_scanf_i+0x14e>
 800309a:	6833      	ldr	r3, [r6, #0]
 800309c:	3301      	adds	r3, #1
 800309e:	6033      	str	r3, [r6, #0]
 80030a0:	68a3      	ldr	r3, [r4, #8]
 80030a2:	3b01      	subs	r3, #1
 80030a4:	60a3      	str	r3, [r4, #8]
 80030a6:	e7d9      	b.n	800305c <_scanf_i+0xd8>
 80030a8:	f1bb 0f02 	cmp.w	fp, #2
 80030ac:	d1ae      	bne.n	800300c <_scanf_i+0x88>
 80030ae:	6822      	ldr	r2, [r4, #0]
 80030b0:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80030b4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80030b8:	d1bf      	bne.n	800303a <_scanf_i+0xb6>
 80030ba:	2310      	movs	r3, #16
 80030bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030c0:	6063      	str	r3, [r4, #4]
 80030c2:	e7a2      	b.n	800300a <_scanf_i+0x86>
 80030c4:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80030c8:	6022      	str	r2, [r4, #0]
 80030ca:	780b      	ldrb	r3, [r1, #0]
 80030cc:	f805 3b01 	strb.w	r3, [r5], #1
 80030d0:	e7de      	b.n	8003090 <_scanf_i+0x10c>
 80030d2:	4631      	mov	r1, r6
 80030d4:	4650      	mov	r0, sl
 80030d6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80030da:	4798      	blx	r3
 80030dc:	2800      	cmp	r0, #0
 80030de:	d0df      	beq.n	80030a0 <_scanf_i+0x11c>
 80030e0:	6823      	ldr	r3, [r4, #0]
 80030e2:	05d9      	lsls	r1, r3, #23
 80030e4:	d50d      	bpl.n	8003102 <_scanf_i+0x17e>
 80030e6:	42bd      	cmp	r5, r7
 80030e8:	d909      	bls.n	80030fe <_scanf_i+0x17a>
 80030ea:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80030ee:	4632      	mov	r2, r6
 80030f0:	4650      	mov	r0, sl
 80030f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80030f6:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80030fa:	4798      	blx	r3
 80030fc:	464d      	mov	r5, r9
 80030fe:	42bd      	cmp	r5, r7
 8003100:	d028      	beq.n	8003154 <_scanf_i+0x1d0>
 8003102:	6822      	ldr	r2, [r4, #0]
 8003104:	f012 0210 	ands.w	r2, r2, #16
 8003108:	d113      	bne.n	8003132 <_scanf_i+0x1ae>
 800310a:	702a      	strb	r2, [r5, #0]
 800310c:	4639      	mov	r1, r7
 800310e:	6863      	ldr	r3, [r4, #4]
 8003110:	4650      	mov	r0, sl
 8003112:	9e01      	ldr	r6, [sp, #4]
 8003114:	47b0      	blx	r6
 8003116:	f8d8 3000 	ldr.w	r3, [r8]
 800311a:	6821      	ldr	r1, [r4, #0]
 800311c:	1d1a      	adds	r2, r3, #4
 800311e:	f8c8 2000 	str.w	r2, [r8]
 8003122:	f011 0f20 	tst.w	r1, #32
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	d00f      	beq.n	800314a <_scanf_i+0x1c6>
 800312a:	6018      	str	r0, [r3, #0]
 800312c:	68e3      	ldr	r3, [r4, #12]
 800312e:	3301      	adds	r3, #1
 8003130:	60e3      	str	r3, [r4, #12]
 8003132:	2000      	movs	r0, #0
 8003134:	1bed      	subs	r5, r5, r7
 8003136:	44ab      	add	fp, r5
 8003138:	6925      	ldr	r5, [r4, #16]
 800313a:	445d      	add	r5, fp
 800313c:	6125      	str	r5, [r4, #16]
 800313e:	b007      	add	sp, #28
 8003140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003144:	f04f 0b00 	mov.w	fp, #0
 8003148:	e7ca      	b.n	80030e0 <_scanf_i+0x15c>
 800314a:	07ca      	lsls	r2, r1, #31
 800314c:	bf4c      	ite	mi
 800314e:	8018      	strhmi	r0, [r3, #0]
 8003150:	6018      	strpl	r0, [r3, #0]
 8003152:	e7eb      	b.n	800312c <_scanf_i+0x1a8>
 8003154:	2001      	movs	r0, #1
 8003156:	e7f2      	b.n	800313e <_scanf_i+0x1ba>
 8003158:	08003890 	.word	0x08003890
 800315c:	080035c5 	.word	0x080035c5
 8003160:	080034c9 	.word	0x080034c9
 8003164:	08003990 	.word	0x08003990

08003168 <_putc_r>:
 8003168:	b570      	push	{r4, r5, r6, lr}
 800316a:	460d      	mov	r5, r1
 800316c:	4614      	mov	r4, r2
 800316e:	4606      	mov	r6, r0
 8003170:	b118      	cbz	r0, 800317a <_putc_r+0x12>
 8003172:	6983      	ldr	r3, [r0, #24]
 8003174:	b90b      	cbnz	r3, 800317a <_putc_r+0x12>
 8003176:	f7fe fd1d 	bl	8001bb4 <__sinit>
 800317a:	4b1c      	ldr	r3, [pc, #112]	; (80031ec <_putc_r+0x84>)
 800317c:	429c      	cmp	r4, r3
 800317e:	d124      	bne.n	80031ca <_putc_r+0x62>
 8003180:	6874      	ldr	r4, [r6, #4]
 8003182:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003184:	07d8      	lsls	r0, r3, #31
 8003186:	d405      	bmi.n	8003194 <_putc_r+0x2c>
 8003188:	89a3      	ldrh	r3, [r4, #12]
 800318a:	0599      	lsls	r1, r3, #22
 800318c:	d402      	bmi.n	8003194 <_putc_r+0x2c>
 800318e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003190:	f7fe fdef 	bl	8001d72 <__retarget_lock_acquire_recursive>
 8003194:	68a3      	ldr	r3, [r4, #8]
 8003196:	3b01      	subs	r3, #1
 8003198:	2b00      	cmp	r3, #0
 800319a:	60a3      	str	r3, [r4, #8]
 800319c:	da05      	bge.n	80031aa <_putc_r+0x42>
 800319e:	69a2      	ldr	r2, [r4, #24]
 80031a0:	4293      	cmp	r3, r2
 80031a2:	db1c      	blt.n	80031de <_putc_r+0x76>
 80031a4:	b2eb      	uxtb	r3, r5
 80031a6:	2b0a      	cmp	r3, #10
 80031a8:	d019      	beq.n	80031de <_putc_r+0x76>
 80031aa:	6823      	ldr	r3, [r4, #0]
 80031ac:	1c5a      	adds	r2, r3, #1
 80031ae:	6022      	str	r2, [r4, #0]
 80031b0:	701d      	strb	r5, [r3, #0]
 80031b2:	b2ed      	uxtb	r5, r5
 80031b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80031b6:	07da      	lsls	r2, r3, #31
 80031b8:	d405      	bmi.n	80031c6 <_putc_r+0x5e>
 80031ba:	89a3      	ldrh	r3, [r4, #12]
 80031bc:	059b      	lsls	r3, r3, #22
 80031be:	d402      	bmi.n	80031c6 <_putc_r+0x5e>
 80031c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031c2:	f7fe fdd7 	bl	8001d74 <__retarget_lock_release_recursive>
 80031c6:	4628      	mov	r0, r5
 80031c8:	bd70      	pop	{r4, r5, r6, pc}
 80031ca:	4b09      	ldr	r3, [pc, #36]	; (80031f0 <_putc_r+0x88>)
 80031cc:	429c      	cmp	r4, r3
 80031ce:	d101      	bne.n	80031d4 <_putc_r+0x6c>
 80031d0:	68b4      	ldr	r4, [r6, #8]
 80031d2:	e7d6      	b.n	8003182 <_putc_r+0x1a>
 80031d4:	4b07      	ldr	r3, [pc, #28]	; (80031f4 <_putc_r+0x8c>)
 80031d6:	429c      	cmp	r4, r3
 80031d8:	bf08      	it	eq
 80031da:	68f4      	ldreq	r4, [r6, #12]
 80031dc:	e7d1      	b.n	8003182 <_putc_r+0x1a>
 80031de:	4629      	mov	r1, r5
 80031e0:	4622      	mov	r2, r4
 80031e2:	4630      	mov	r0, r6
 80031e4:	f7fe ff38 	bl	8002058 <__swbuf_r>
 80031e8:	4605      	mov	r5, r0
 80031ea:	e7e3      	b.n	80031b4 <_putc_r+0x4c>
 80031ec:	08003900 	.word	0x08003900
 80031f0:	08003920 	.word	0x08003920
 80031f4:	080038e0 	.word	0x080038e0

080031f8 <_read_r>:
 80031f8:	b538      	push	{r3, r4, r5, lr}
 80031fa:	4604      	mov	r4, r0
 80031fc:	4608      	mov	r0, r1
 80031fe:	4611      	mov	r1, r2
 8003200:	2200      	movs	r2, #0
 8003202:	4d05      	ldr	r5, [pc, #20]	; (8003218 <_read_r+0x20>)
 8003204:	602a      	str	r2, [r5, #0]
 8003206:	461a      	mov	r2, r3
 8003208:	f7fe fa18 	bl	800163c <_read>
 800320c:	1c43      	adds	r3, r0, #1
 800320e:	d102      	bne.n	8003216 <_read_r+0x1e>
 8003210:	682b      	ldr	r3, [r5, #0]
 8003212:	b103      	cbz	r3, 8003216 <_read_r+0x1e>
 8003214:	6023      	str	r3, [r4, #0]
 8003216:	bd38      	pop	{r3, r4, r5, pc}
 8003218:	200001a4 	.word	0x200001a4

0800321c <lflush>:
 800321c:	8983      	ldrh	r3, [r0, #12]
 800321e:	f003 0309 	and.w	r3, r3, #9
 8003222:	2b09      	cmp	r3, #9
 8003224:	d101      	bne.n	800322a <lflush+0xe>
 8003226:	f7ff b8bb 	b.w	80023a0 <fflush>
 800322a:	2000      	movs	r0, #0
 800322c:	4770      	bx	lr
	...

08003230 <__srefill_r>:
 8003230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003232:	460c      	mov	r4, r1
 8003234:	4605      	mov	r5, r0
 8003236:	b118      	cbz	r0, 8003240 <__srefill_r+0x10>
 8003238:	6983      	ldr	r3, [r0, #24]
 800323a:	b90b      	cbnz	r3, 8003240 <__srefill_r+0x10>
 800323c:	f7fe fcba 	bl	8001bb4 <__sinit>
 8003240:	4b3c      	ldr	r3, [pc, #240]	; (8003334 <__srefill_r+0x104>)
 8003242:	429c      	cmp	r4, r3
 8003244:	d10a      	bne.n	800325c <__srefill_r+0x2c>
 8003246:	686c      	ldr	r4, [r5, #4]
 8003248:	2300      	movs	r3, #0
 800324a:	6063      	str	r3, [r4, #4]
 800324c:	89a3      	ldrh	r3, [r4, #12]
 800324e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003252:	069e      	lsls	r6, r3, #26
 8003254:	d50c      	bpl.n	8003270 <__srefill_r+0x40>
 8003256:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800325a:	e067      	b.n	800332c <__srefill_r+0xfc>
 800325c:	4b36      	ldr	r3, [pc, #216]	; (8003338 <__srefill_r+0x108>)
 800325e:	429c      	cmp	r4, r3
 8003260:	d101      	bne.n	8003266 <__srefill_r+0x36>
 8003262:	68ac      	ldr	r4, [r5, #8]
 8003264:	e7f0      	b.n	8003248 <__srefill_r+0x18>
 8003266:	4b35      	ldr	r3, [pc, #212]	; (800333c <__srefill_r+0x10c>)
 8003268:	429c      	cmp	r4, r3
 800326a:	bf08      	it	eq
 800326c:	68ec      	ldreq	r4, [r5, #12]
 800326e:	e7eb      	b.n	8003248 <__srefill_r+0x18>
 8003270:	0758      	lsls	r0, r3, #29
 8003272:	d449      	bmi.n	8003308 <__srefill_r+0xd8>
 8003274:	06d9      	lsls	r1, r3, #27
 8003276:	d405      	bmi.n	8003284 <__srefill_r+0x54>
 8003278:	2309      	movs	r3, #9
 800327a:	602b      	str	r3, [r5, #0]
 800327c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003280:	81a3      	strh	r3, [r4, #12]
 8003282:	e7e8      	b.n	8003256 <__srefill_r+0x26>
 8003284:	071a      	lsls	r2, r3, #28
 8003286:	d50b      	bpl.n	80032a0 <__srefill_r+0x70>
 8003288:	4621      	mov	r1, r4
 800328a:	4628      	mov	r0, r5
 800328c:	f7ff f84c 	bl	8002328 <_fflush_r>
 8003290:	2800      	cmp	r0, #0
 8003292:	d1e0      	bne.n	8003256 <__srefill_r+0x26>
 8003294:	89a3      	ldrh	r3, [r4, #12]
 8003296:	60a0      	str	r0, [r4, #8]
 8003298:	f023 0308 	bic.w	r3, r3, #8
 800329c:	81a3      	strh	r3, [r4, #12]
 800329e:	61a0      	str	r0, [r4, #24]
 80032a0:	89a3      	ldrh	r3, [r4, #12]
 80032a2:	f043 0304 	orr.w	r3, r3, #4
 80032a6:	81a3      	strh	r3, [r4, #12]
 80032a8:	6923      	ldr	r3, [r4, #16]
 80032aa:	b91b      	cbnz	r3, 80032b4 <__srefill_r+0x84>
 80032ac:	4621      	mov	r1, r4
 80032ae:	4628      	mov	r0, r5
 80032b0:	f7ff f8be 	bl	8002430 <__smakebuf_r>
 80032b4:	89a6      	ldrh	r6, [r4, #12]
 80032b6:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80032ba:	07b3      	lsls	r3, r6, #30
 80032bc:	d00f      	beq.n	80032de <__srefill_r+0xae>
 80032be:	2301      	movs	r3, #1
 80032c0:	81a3      	strh	r3, [r4, #12]
 80032c2:	4b1f      	ldr	r3, [pc, #124]	; (8003340 <__srefill_r+0x110>)
 80032c4:	491f      	ldr	r1, [pc, #124]	; (8003344 <__srefill_r+0x114>)
 80032c6:	6818      	ldr	r0, [r3, #0]
 80032c8:	f006 0609 	and.w	r6, r6, #9
 80032cc:	f7fe fcf0 	bl	8001cb0 <_fwalk>
 80032d0:	2e09      	cmp	r6, #9
 80032d2:	81a7      	strh	r7, [r4, #12]
 80032d4:	d103      	bne.n	80032de <__srefill_r+0xae>
 80032d6:	4621      	mov	r1, r4
 80032d8:	4628      	mov	r0, r5
 80032da:	f7fe ff9f 	bl	800221c <__sflush_r>
 80032de:	6922      	ldr	r2, [r4, #16]
 80032e0:	4628      	mov	r0, r5
 80032e2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80032e4:	6963      	ldr	r3, [r4, #20]
 80032e6:	6a21      	ldr	r1, [r4, #32]
 80032e8:	6022      	str	r2, [r4, #0]
 80032ea:	47b0      	blx	r6
 80032ec:	2800      	cmp	r0, #0
 80032ee:	6060      	str	r0, [r4, #4]
 80032f0:	dc1d      	bgt.n	800332e <__srefill_r+0xfe>
 80032f2:	bf18      	it	ne
 80032f4:	2200      	movne	r2, #0
 80032f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032fa:	bf16      	itet	ne
 80032fc:	6062      	strne	r2, [r4, #4]
 80032fe:	f043 0320 	orreq.w	r3, r3, #32
 8003302:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8003306:	e7bb      	b.n	8003280 <__srefill_r+0x50>
 8003308:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800330a:	2900      	cmp	r1, #0
 800330c:	d0cc      	beq.n	80032a8 <__srefill_r+0x78>
 800330e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003312:	4299      	cmp	r1, r3
 8003314:	d002      	beq.n	800331c <__srefill_r+0xec>
 8003316:	4628      	mov	r0, r5
 8003318:	f7ff f8d6 	bl	80024c8 <_free_r>
 800331c:	2000      	movs	r0, #0
 800331e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003320:	6360      	str	r0, [r4, #52]	; 0x34
 8003322:	6063      	str	r3, [r4, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0bf      	beq.n	80032a8 <__srefill_r+0x78>
 8003328:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800332a:	6023      	str	r3, [r4, #0]
 800332c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800332e:	2000      	movs	r0, #0
 8003330:	e7fc      	b.n	800332c <__srefill_r+0xfc>
 8003332:	bf00      	nop
 8003334:	08003900 	.word	0x08003900
 8003338:	08003920 	.word	0x08003920
 800333c:	080038e0 	.word	0x080038e0
 8003340:	08003940 	.word	0x08003940
 8003344:	0800321d 	.word	0x0800321d

08003348 <__sccl>:
 8003348:	b570      	push	{r4, r5, r6, lr}
 800334a:	780b      	ldrb	r3, [r1, #0]
 800334c:	4604      	mov	r4, r0
 800334e:	2b5e      	cmp	r3, #94	; 0x5e
 8003350:	bf13      	iteet	ne
 8003352:	2200      	movne	r2, #0
 8003354:	2201      	moveq	r2, #1
 8003356:	784b      	ldrbeq	r3, [r1, #1]
 8003358:	1c48      	addne	r0, r1, #1
 800335a:	bf08      	it	eq
 800335c:	1c88      	addeq	r0, r1, #2
 800335e:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8003362:	1e61      	subs	r1, r4, #1
 8003364:	f801 2f01 	strb.w	r2, [r1, #1]!
 8003368:	42a9      	cmp	r1, r5
 800336a:	d1fb      	bne.n	8003364 <__sccl+0x1c>
 800336c:	b90b      	cbnz	r3, 8003372 <__sccl+0x2a>
 800336e:	3801      	subs	r0, #1
 8003370:	bd70      	pop	{r4, r5, r6, pc}
 8003372:	f082 0101 	eor.w	r1, r2, #1
 8003376:	54e1      	strb	r1, [r4, r3]
 8003378:	1c42      	adds	r2, r0, #1
 800337a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800337e:	4610      	mov	r0, r2
 8003380:	2d2d      	cmp	r5, #45	; 0x2d
 8003382:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 8003386:	d006      	beq.n	8003396 <__sccl+0x4e>
 8003388:	2d5d      	cmp	r5, #93	; 0x5d
 800338a:	d0f1      	beq.n	8003370 <__sccl+0x28>
 800338c:	b90d      	cbnz	r5, 8003392 <__sccl+0x4a>
 800338e:	4630      	mov	r0, r6
 8003390:	e7ee      	b.n	8003370 <__sccl+0x28>
 8003392:	462b      	mov	r3, r5
 8003394:	e7ef      	b.n	8003376 <__sccl+0x2e>
 8003396:	7816      	ldrb	r6, [r2, #0]
 8003398:	2e5d      	cmp	r6, #93	; 0x5d
 800339a:	d0fa      	beq.n	8003392 <__sccl+0x4a>
 800339c:	42b3      	cmp	r3, r6
 800339e:	dcf8      	bgt.n	8003392 <__sccl+0x4a>
 80033a0:	4618      	mov	r0, r3
 80033a2:	3001      	adds	r0, #1
 80033a4:	4286      	cmp	r6, r0
 80033a6:	5421      	strb	r1, [r4, r0]
 80033a8:	dcfb      	bgt.n	80033a2 <__sccl+0x5a>
 80033aa:	43d8      	mvns	r0, r3
 80033ac:	4430      	add	r0, r6
 80033ae:	42b3      	cmp	r3, r6
 80033b0:	bfa8      	it	ge
 80033b2:	2000      	movge	r0, #0
 80033b4:	1c5d      	adds	r5, r3, #1
 80033b6:	182b      	adds	r3, r5, r0
 80033b8:	3202      	adds	r2, #2
 80033ba:	e7de      	b.n	800337a <__sccl+0x32>

080033bc <_strtol_l.isra.0>:
 80033bc:	2b01      	cmp	r3, #1
 80033be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033c2:	4686      	mov	lr, r0
 80033c4:	d001      	beq.n	80033ca <_strtol_l.isra.0+0xe>
 80033c6:	2b24      	cmp	r3, #36	; 0x24
 80033c8:	d906      	bls.n	80033d8 <_strtol_l.isra.0+0x1c>
 80033ca:	f7fe fb95 	bl	8001af8 <__errno>
 80033ce:	2316      	movs	r3, #22
 80033d0:	6003      	str	r3, [r0, #0]
 80033d2:	2000      	movs	r0, #0
 80033d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033d8:	468c      	mov	ip, r1
 80033da:	4e3a      	ldr	r6, [pc, #232]	; (80034c4 <_strtol_l.isra.0+0x108>)
 80033dc:	4660      	mov	r0, ip
 80033de:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80033e2:	5da5      	ldrb	r5, [r4, r6]
 80033e4:	f015 0508 	ands.w	r5, r5, #8
 80033e8:	d1f8      	bne.n	80033dc <_strtol_l.isra.0+0x20>
 80033ea:	2c2d      	cmp	r4, #45	; 0x2d
 80033ec:	d133      	bne.n	8003456 <_strtol_l.isra.0+0x9a>
 80033ee:	f04f 0801 	mov.w	r8, #1
 80033f2:	f89c 4000 	ldrb.w	r4, [ip]
 80033f6:	f100 0c02 	add.w	ip, r0, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d05d      	beq.n	80034ba <_strtol_l.isra.0+0xfe>
 80033fe:	2b10      	cmp	r3, #16
 8003400:	d10c      	bne.n	800341c <_strtol_l.isra.0+0x60>
 8003402:	2c30      	cmp	r4, #48	; 0x30
 8003404:	d10a      	bne.n	800341c <_strtol_l.isra.0+0x60>
 8003406:	f89c 0000 	ldrb.w	r0, [ip]
 800340a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800340e:	2858      	cmp	r0, #88	; 0x58
 8003410:	d14e      	bne.n	80034b0 <_strtol_l.isra.0+0xf4>
 8003412:	2310      	movs	r3, #16
 8003414:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8003418:	f10c 0c02 	add.w	ip, ip, #2
 800341c:	2500      	movs	r5, #0
 800341e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8003422:	3f01      	subs	r7, #1
 8003424:	fbb7 f9f3 	udiv	r9, r7, r3
 8003428:	4628      	mov	r0, r5
 800342a:	fb03 7a19 	mls	sl, r3, r9, r7
 800342e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8003432:	2e09      	cmp	r6, #9
 8003434:	d818      	bhi.n	8003468 <_strtol_l.isra.0+0xac>
 8003436:	4634      	mov	r4, r6
 8003438:	42a3      	cmp	r3, r4
 800343a:	dd24      	ble.n	8003486 <_strtol_l.isra.0+0xca>
 800343c:	2d00      	cmp	r5, #0
 800343e:	db1f      	blt.n	8003480 <_strtol_l.isra.0+0xc4>
 8003440:	4581      	cmp	r9, r0
 8003442:	d31d      	bcc.n	8003480 <_strtol_l.isra.0+0xc4>
 8003444:	d101      	bne.n	800344a <_strtol_l.isra.0+0x8e>
 8003446:	45a2      	cmp	sl, r4
 8003448:	db1a      	blt.n	8003480 <_strtol_l.isra.0+0xc4>
 800344a:	2501      	movs	r5, #1
 800344c:	fb00 4003 	mla	r0, r0, r3, r4
 8003450:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8003454:	e7eb      	b.n	800342e <_strtol_l.isra.0+0x72>
 8003456:	2c2b      	cmp	r4, #43	; 0x2b
 8003458:	bf08      	it	eq
 800345a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800345e:	46a8      	mov	r8, r5
 8003460:	bf08      	it	eq
 8003462:	f100 0c02 	addeq.w	ip, r0, #2
 8003466:	e7c8      	b.n	80033fa <_strtol_l.isra.0+0x3e>
 8003468:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800346c:	2e19      	cmp	r6, #25
 800346e:	d801      	bhi.n	8003474 <_strtol_l.isra.0+0xb8>
 8003470:	3c37      	subs	r4, #55	; 0x37
 8003472:	e7e1      	b.n	8003438 <_strtol_l.isra.0+0x7c>
 8003474:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8003478:	2e19      	cmp	r6, #25
 800347a:	d804      	bhi.n	8003486 <_strtol_l.isra.0+0xca>
 800347c:	3c57      	subs	r4, #87	; 0x57
 800347e:	e7db      	b.n	8003438 <_strtol_l.isra.0+0x7c>
 8003480:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003484:	e7e4      	b.n	8003450 <_strtol_l.isra.0+0x94>
 8003486:	2d00      	cmp	r5, #0
 8003488:	da08      	bge.n	800349c <_strtol_l.isra.0+0xe0>
 800348a:	2322      	movs	r3, #34	; 0x22
 800348c:	4638      	mov	r0, r7
 800348e:	f8ce 3000 	str.w	r3, [lr]
 8003492:	2a00      	cmp	r2, #0
 8003494:	d09e      	beq.n	80033d4 <_strtol_l.isra.0+0x18>
 8003496:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 800349a:	e007      	b.n	80034ac <_strtol_l.isra.0+0xf0>
 800349c:	f1b8 0f00 	cmp.w	r8, #0
 80034a0:	d000      	beq.n	80034a4 <_strtol_l.isra.0+0xe8>
 80034a2:	4240      	negs	r0, r0
 80034a4:	2a00      	cmp	r2, #0
 80034a6:	d095      	beq.n	80033d4 <_strtol_l.isra.0+0x18>
 80034a8:	2d00      	cmp	r5, #0
 80034aa:	d1f4      	bne.n	8003496 <_strtol_l.isra.0+0xda>
 80034ac:	6011      	str	r1, [r2, #0]
 80034ae:	e791      	b.n	80033d4 <_strtol_l.isra.0+0x18>
 80034b0:	2430      	movs	r4, #48	; 0x30
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1b2      	bne.n	800341c <_strtol_l.isra.0+0x60>
 80034b6:	2308      	movs	r3, #8
 80034b8:	e7b0      	b.n	800341c <_strtol_l.isra.0+0x60>
 80034ba:	2c30      	cmp	r4, #48	; 0x30
 80034bc:	d0a3      	beq.n	8003406 <_strtol_l.isra.0+0x4a>
 80034be:	230a      	movs	r3, #10
 80034c0:	e7ac      	b.n	800341c <_strtol_l.isra.0+0x60>
 80034c2:	bf00      	nop
 80034c4:	08003993 	.word	0x08003993

080034c8 <_strtol_r>:
 80034c8:	f7ff bf78 	b.w	80033bc <_strtol_l.isra.0>

080034cc <_strtoul_l.isra.0>:
 80034cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80034d0:	468c      	mov	ip, r1
 80034d2:	4686      	mov	lr, r0
 80034d4:	4e3a      	ldr	r6, [pc, #232]	; (80035c0 <_strtoul_l.isra.0+0xf4>)
 80034d6:	4660      	mov	r0, ip
 80034d8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80034dc:	5da5      	ldrb	r5, [r4, r6]
 80034de:	f015 0508 	ands.w	r5, r5, #8
 80034e2:	d1f8      	bne.n	80034d6 <_strtoul_l.isra.0+0xa>
 80034e4:	2c2d      	cmp	r4, #45	; 0x2d
 80034e6:	d134      	bne.n	8003552 <_strtoul_l.isra.0+0x86>
 80034e8:	f04f 0801 	mov.w	r8, #1
 80034ec:	f89c 4000 	ldrb.w	r4, [ip]
 80034f0:	f100 0c02 	add.w	ip, r0, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d05e      	beq.n	80035b6 <_strtoul_l.isra.0+0xea>
 80034f8:	2b10      	cmp	r3, #16
 80034fa:	d10c      	bne.n	8003516 <_strtoul_l.isra.0+0x4a>
 80034fc:	2c30      	cmp	r4, #48	; 0x30
 80034fe:	d10a      	bne.n	8003516 <_strtoul_l.isra.0+0x4a>
 8003500:	f89c 0000 	ldrb.w	r0, [ip]
 8003504:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003508:	2858      	cmp	r0, #88	; 0x58
 800350a:	d14f      	bne.n	80035ac <_strtoul_l.isra.0+0xe0>
 800350c:	2310      	movs	r3, #16
 800350e:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8003512:	f10c 0c02 	add.w	ip, ip, #2
 8003516:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800351a:	fbb7 f7f3 	udiv	r7, r7, r3
 800351e:	2500      	movs	r5, #0
 8003520:	fb03 f907 	mul.w	r9, r3, r7
 8003524:	4628      	mov	r0, r5
 8003526:	ea6f 0909 	mvn.w	r9, r9
 800352a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800352e:	2e09      	cmp	r6, #9
 8003530:	d818      	bhi.n	8003564 <_strtoul_l.isra.0+0x98>
 8003532:	4634      	mov	r4, r6
 8003534:	42a3      	cmp	r3, r4
 8003536:	dd24      	ble.n	8003582 <_strtoul_l.isra.0+0xb6>
 8003538:	2d00      	cmp	r5, #0
 800353a:	db1f      	blt.n	800357c <_strtoul_l.isra.0+0xb0>
 800353c:	4287      	cmp	r7, r0
 800353e:	d31d      	bcc.n	800357c <_strtoul_l.isra.0+0xb0>
 8003540:	d101      	bne.n	8003546 <_strtoul_l.isra.0+0x7a>
 8003542:	45a1      	cmp	r9, r4
 8003544:	db1a      	blt.n	800357c <_strtoul_l.isra.0+0xb0>
 8003546:	2501      	movs	r5, #1
 8003548:	fb00 4003 	mla	r0, r0, r3, r4
 800354c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8003550:	e7eb      	b.n	800352a <_strtoul_l.isra.0+0x5e>
 8003552:	2c2b      	cmp	r4, #43	; 0x2b
 8003554:	bf08      	it	eq
 8003556:	f89c 4000 	ldrbeq.w	r4, [ip]
 800355a:	46a8      	mov	r8, r5
 800355c:	bf08      	it	eq
 800355e:	f100 0c02 	addeq.w	ip, r0, #2
 8003562:	e7c7      	b.n	80034f4 <_strtoul_l.isra.0+0x28>
 8003564:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8003568:	2e19      	cmp	r6, #25
 800356a:	d801      	bhi.n	8003570 <_strtoul_l.isra.0+0xa4>
 800356c:	3c37      	subs	r4, #55	; 0x37
 800356e:	e7e1      	b.n	8003534 <_strtoul_l.isra.0+0x68>
 8003570:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8003574:	2e19      	cmp	r6, #25
 8003576:	d804      	bhi.n	8003582 <_strtoul_l.isra.0+0xb6>
 8003578:	3c57      	subs	r4, #87	; 0x57
 800357a:	e7db      	b.n	8003534 <_strtoul_l.isra.0+0x68>
 800357c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003580:	e7e4      	b.n	800354c <_strtoul_l.isra.0+0x80>
 8003582:	2d00      	cmp	r5, #0
 8003584:	da07      	bge.n	8003596 <_strtoul_l.isra.0+0xca>
 8003586:	2322      	movs	r3, #34	; 0x22
 8003588:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800358c:	f8ce 3000 	str.w	r3, [lr]
 8003590:	b942      	cbnz	r2, 80035a4 <_strtoul_l.isra.0+0xd8>
 8003592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003596:	f1b8 0f00 	cmp.w	r8, #0
 800359a:	d000      	beq.n	800359e <_strtoul_l.isra.0+0xd2>
 800359c:	4240      	negs	r0, r0
 800359e:	2a00      	cmp	r2, #0
 80035a0:	d0f7      	beq.n	8003592 <_strtoul_l.isra.0+0xc6>
 80035a2:	b10d      	cbz	r5, 80035a8 <_strtoul_l.isra.0+0xdc>
 80035a4:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80035a8:	6011      	str	r1, [r2, #0]
 80035aa:	e7f2      	b.n	8003592 <_strtoul_l.isra.0+0xc6>
 80035ac:	2430      	movs	r4, #48	; 0x30
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1b1      	bne.n	8003516 <_strtoul_l.isra.0+0x4a>
 80035b2:	2308      	movs	r3, #8
 80035b4:	e7af      	b.n	8003516 <_strtoul_l.isra.0+0x4a>
 80035b6:	2c30      	cmp	r4, #48	; 0x30
 80035b8:	d0a2      	beq.n	8003500 <_strtoul_l.isra.0+0x34>
 80035ba:	230a      	movs	r3, #10
 80035bc:	e7ab      	b.n	8003516 <_strtoul_l.isra.0+0x4a>
 80035be:	bf00      	nop
 80035c0:	08003993 	.word	0x08003993

080035c4 <_strtoul_r>:
 80035c4:	f7ff bf82 	b.w	80034cc <_strtoul_l.isra.0>

080035c8 <__submore>:
 80035c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035cc:	460c      	mov	r4, r1
 80035ce:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80035d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035d4:	4299      	cmp	r1, r3
 80035d6:	d11b      	bne.n	8003610 <__submore+0x48>
 80035d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80035dc:	f7fe fbd4 	bl	8001d88 <_malloc_r>
 80035e0:	b918      	cbnz	r0, 80035ea <__submore+0x22>
 80035e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035ee:	63a3      	str	r3, [r4, #56]	; 0x38
 80035f0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80035f4:	6360      	str	r0, [r4, #52]	; 0x34
 80035f6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80035fa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80035fe:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8003602:	7043      	strb	r3, [r0, #1]
 8003604:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003608:	7003      	strb	r3, [r0, #0]
 800360a:	6020      	str	r0, [r4, #0]
 800360c:	2000      	movs	r0, #0
 800360e:	e7ea      	b.n	80035e6 <__submore+0x1e>
 8003610:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003612:	0077      	lsls	r7, r6, #1
 8003614:	463a      	mov	r2, r7
 8003616:	f000 f8e5 	bl	80037e4 <_realloc_r>
 800361a:	4605      	mov	r5, r0
 800361c:	2800      	cmp	r0, #0
 800361e:	d0e0      	beq.n	80035e2 <__submore+0x1a>
 8003620:	eb00 0806 	add.w	r8, r0, r6
 8003624:	4601      	mov	r1, r0
 8003626:	4632      	mov	r2, r6
 8003628:	4640      	mov	r0, r8
 800362a:	f000 f8cd 	bl	80037c8 <memcpy>
 800362e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8003632:	f8c4 8000 	str.w	r8, [r4]
 8003636:	e7e9      	b.n	800360c <__submore+0x44>

08003638 <_ungetc_r>:
 8003638:	b570      	push	{r4, r5, r6, lr}
 800363a:	4614      	mov	r4, r2
 800363c:	1c4a      	adds	r2, r1, #1
 800363e:	4606      	mov	r6, r0
 8003640:	460d      	mov	r5, r1
 8003642:	d103      	bne.n	800364c <_ungetc_r+0x14>
 8003644:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003648:	4628      	mov	r0, r5
 800364a:	bd70      	pop	{r4, r5, r6, pc}
 800364c:	b118      	cbz	r0, 8003656 <_ungetc_r+0x1e>
 800364e:	6983      	ldr	r3, [r0, #24]
 8003650:	b90b      	cbnz	r3, 8003656 <_ungetc_r+0x1e>
 8003652:	f7fe faaf 	bl	8001bb4 <__sinit>
 8003656:	4b41      	ldr	r3, [pc, #260]	; (800375c <_ungetc_r+0x124>)
 8003658:	429c      	cmp	r4, r3
 800365a:	d11d      	bne.n	8003698 <_ungetc_r+0x60>
 800365c:	6874      	ldr	r4, [r6, #4]
 800365e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003660:	07db      	lsls	r3, r3, #31
 8003662:	d405      	bmi.n	8003670 <_ungetc_r+0x38>
 8003664:	89a3      	ldrh	r3, [r4, #12]
 8003666:	0598      	lsls	r0, r3, #22
 8003668:	d402      	bmi.n	8003670 <_ungetc_r+0x38>
 800366a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800366c:	f7fe fb81 	bl	8001d72 <__retarget_lock_acquire_recursive>
 8003670:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003674:	f023 0320 	bic.w	r3, r3, #32
 8003678:	0759      	lsls	r1, r3, #29
 800367a:	81a3      	strh	r3, [r4, #12]
 800367c:	b29a      	uxth	r2, r3
 800367e:	d42d      	bmi.n	80036dc <_ungetc_r+0xa4>
 8003680:	06d3      	lsls	r3, r2, #27
 8003682:	d413      	bmi.n	80036ac <_ungetc_r+0x74>
 8003684:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003686:	07dd      	lsls	r5, r3, #31
 8003688:	d4dc      	bmi.n	8003644 <_ungetc_r+0xc>
 800368a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800368e:	d1d9      	bne.n	8003644 <_ungetc_r+0xc>
 8003690:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003692:	f7fe fb6f 	bl	8001d74 <__retarget_lock_release_recursive>
 8003696:	e7d5      	b.n	8003644 <_ungetc_r+0xc>
 8003698:	4b31      	ldr	r3, [pc, #196]	; (8003760 <_ungetc_r+0x128>)
 800369a:	429c      	cmp	r4, r3
 800369c:	d101      	bne.n	80036a2 <_ungetc_r+0x6a>
 800369e:	68b4      	ldr	r4, [r6, #8]
 80036a0:	e7dd      	b.n	800365e <_ungetc_r+0x26>
 80036a2:	4b30      	ldr	r3, [pc, #192]	; (8003764 <_ungetc_r+0x12c>)
 80036a4:	429c      	cmp	r4, r3
 80036a6:	bf08      	it	eq
 80036a8:	68f4      	ldreq	r4, [r6, #12]
 80036aa:	e7d8      	b.n	800365e <_ungetc_r+0x26>
 80036ac:	0710      	lsls	r0, r2, #28
 80036ae:	d511      	bpl.n	80036d4 <_ungetc_r+0x9c>
 80036b0:	4621      	mov	r1, r4
 80036b2:	4630      	mov	r0, r6
 80036b4:	f7fe fe38 	bl	8002328 <_fflush_r>
 80036b8:	b130      	cbz	r0, 80036c8 <_ungetc_r+0x90>
 80036ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036bc:	07d9      	lsls	r1, r3, #31
 80036be:	d4c1      	bmi.n	8003644 <_ungetc_r+0xc>
 80036c0:	89a3      	ldrh	r3, [r4, #12]
 80036c2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80036c6:	e7e2      	b.n	800368e <_ungetc_r+0x56>
 80036c8:	89a3      	ldrh	r3, [r4, #12]
 80036ca:	60a0      	str	r0, [r4, #8]
 80036cc:	f023 0308 	bic.w	r3, r3, #8
 80036d0:	81a3      	strh	r3, [r4, #12]
 80036d2:	61a0      	str	r0, [r4, #24]
 80036d4:	89a3      	ldrh	r3, [r4, #12]
 80036d6:	f043 0304 	orr.w	r3, r3, #4
 80036da:	81a3      	strh	r3, [r4, #12]
 80036dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80036de:	6862      	ldr	r2, [r4, #4]
 80036e0:	b2ed      	uxtb	r5, r5
 80036e2:	b1d3      	cbz	r3, 800371a <_ungetc_r+0xe2>
 80036e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80036e6:	4293      	cmp	r3, r2
 80036e8:	dc05      	bgt.n	80036f6 <_ungetc_r+0xbe>
 80036ea:	4621      	mov	r1, r4
 80036ec:	4630      	mov	r0, r6
 80036ee:	f7ff ff6b 	bl	80035c8 <__submore>
 80036f2:	2800      	cmp	r0, #0
 80036f4:	d1e1      	bne.n	80036ba <_ungetc_r+0x82>
 80036f6:	6823      	ldr	r3, [r4, #0]
 80036f8:	1e5a      	subs	r2, r3, #1
 80036fa:	6022      	str	r2, [r4, #0]
 80036fc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003700:	6863      	ldr	r3, [r4, #4]
 8003702:	3301      	adds	r3, #1
 8003704:	6063      	str	r3, [r4, #4]
 8003706:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003708:	07da      	lsls	r2, r3, #31
 800370a:	d49d      	bmi.n	8003648 <_ungetc_r+0x10>
 800370c:	89a3      	ldrh	r3, [r4, #12]
 800370e:	059b      	lsls	r3, r3, #22
 8003710:	d49a      	bmi.n	8003648 <_ungetc_r+0x10>
 8003712:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003714:	f7fe fb2e 	bl	8001d74 <__retarget_lock_release_recursive>
 8003718:	e796      	b.n	8003648 <_ungetc_r+0x10>
 800371a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800371c:	6920      	ldr	r0, [r4, #16]
 800371e:	6823      	ldr	r3, [r4, #0]
 8003720:	f001 0101 	and.w	r1, r1, #1
 8003724:	b160      	cbz	r0, 8003740 <_ungetc_r+0x108>
 8003726:	4298      	cmp	r0, r3
 8003728:	d20a      	bcs.n	8003740 <_ungetc_r+0x108>
 800372a:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800372e:	42a8      	cmp	r0, r5
 8003730:	d106      	bne.n	8003740 <_ungetc_r+0x108>
 8003732:	3b01      	subs	r3, #1
 8003734:	3201      	adds	r2, #1
 8003736:	6023      	str	r3, [r4, #0]
 8003738:	6062      	str	r2, [r4, #4]
 800373a:	2900      	cmp	r1, #0
 800373c:	d184      	bne.n	8003648 <_ungetc_r+0x10>
 800373e:	e7e5      	b.n	800370c <_ungetc_r+0xd4>
 8003740:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8003744:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003748:	6363      	str	r3, [r4, #52]	; 0x34
 800374a:	2303      	movs	r3, #3
 800374c:	63a3      	str	r3, [r4, #56]	; 0x38
 800374e:	4623      	mov	r3, r4
 8003750:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003754:	6023      	str	r3, [r4, #0]
 8003756:	2301      	movs	r3, #1
 8003758:	6063      	str	r3, [r4, #4]
 800375a:	e7ee      	b.n	800373a <_ungetc_r+0x102>
 800375c:	08003900 	.word	0x08003900
 8003760:	08003920 	.word	0x08003920
 8003764:	080038e0 	.word	0x080038e0

08003768 <_fstat_r>:
 8003768:	b538      	push	{r3, r4, r5, lr}
 800376a:	2300      	movs	r3, #0
 800376c:	4d06      	ldr	r5, [pc, #24]	; (8003788 <_fstat_r+0x20>)
 800376e:	4604      	mov	r4, r0
 8003770:	4608      	mov	r0, r1
 8003772:	4611      	mov	r1, r2
 8003774:	602b      	str	r3, [r5, #0]
 8003776:	f7fe f83e 	bl	80017f6 <_fstat>
 800377a:	1c43      	adds	r3, r0, #1
 800377c:	d102      	bne.n	8003784 <_fstat_r+0x1c>
 800377e:	682b      	ldr	r3, [r5, #0]
 8003780:	b103      	cbz	r3, 8003784 <_fstat_r+0x1c>
 8003782:	6023      	str	r3, [r4, #0]
 8003784:	bd38      	pop	{r3, r4, r5, pc}
 8003786:	bf00      	nop
 8003788:	200001a4 	.word	0x200001a4

0800378c <_isatty_r>:
 800378c:	b538      	push	{r3, r4, r5, lr}
 800378e:	2300      	movs	r3, #0
 8003790:	4d05      	ldr	r5, [pc, #20]	; (80037a8 <_isatty_r+0x1c>)
 8003792:	4604      	mov	r4, r0
 8003794:	4608      	mov	r0, r1
 8003796:	602b      	str	r3, [r5, #0]
 8003798:	f7fe f992 	bl	8001ac0 <_isatty>
 800379c:	1c43      	adds	r3, r0, #1
 800379e:	d102      	bne.n	80037a6 <_isatty_r+0x1a>
 80037a0:	682b      	ldr	r3, [r5, #0]
 80037a2:	b103      	cbz	r3, 80037a6 <_isatty_r+0x1a>
 80037a4:	6023      	str	r3, [r4, #0]
 80037a6:	bd38      	pop	{r3, r4, r5, pc}
 80037a8:	200001a4 	.word	0x200001a4

080037ac <memchr>:
 80037ac:	4603      	mov	r3, r0
 80037ae:	b510      	push	{r4, lr}
 80037b0:	b2c9      	uxtb	r1, r1
 80037b2:	4402      	add	r2, r0
 80037b4:	4293      	cmp	r3, r2
 80037b6:	4618      	mov	r0, r3
 80037b8:	d101      	bne.n	80037be <memchr+0x12>
 80037ba:	2000      	movs	r0, #0
 80037bc:	e003      	b.n	80037c6 <memchr+0x1a>
 80037be:	7804      	ldrb	r4, [r0, #0]
 80037c0:	3301      	adds	r3, #1
 80037c2:	428c      	cmp	r4, r1
 80037c4:	d1f6      	bne.n	80037b4 <memchr+0x8>
 80037c6:	bd10      	pop	{r4, pc}

080037c8 <memcpy>:
 80037c8:	440a      	add	r2, r1
 80037ca:	4291      	cmp	r1, r2
 80037cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80037d0:	d100      	bne.n	80037d4 <memcpy+0xc>
 80037d2:	4770      	bx	lr
 80037d4:	b510      	push	{r4, lr}
 80037d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037da:	4291      	cmp	r1, r2
 80037dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037e0:	d1f9      	bne.n	80037d6 <memcpy+0xe>
 80037e2:	bd10      	pop	{r4, pc}

080037e4 <_realloc_r>:
 80037e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037e6:	4607      	mov	r7, r0
 80037e8:	4614      	mov	r4, r2
 80037ea:	460e      	mov	r6, r1
 80037ec:	b921      	cbnz	r1, 80037f8 <_realloc_r+0x14>
 80037ee:	4611      	mov	r1, r2
 80037f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80037f4:	f7fe bac8 	b.w	8001d88 <_malloc_r>
 80037f8:	b922      	cbnz	r2, 8003804 <_realloc_r+0x20>
 80037fa:	f7fe fe65 	bl	80024c8 <_free_r>
 80037fe:	4625      	mov	r5, r4
 8003800:	4628      	mov	r0, r5
 8003802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003804:	f000 f814 	bl	8003830 <_malloc_usable_size_r>
 8003808:	42a0      	cmp	r0, r4
 800380a:	d20f      	bcs.n	800382c <_realloc_r+0x48>
 800380c:	4621      	mov	r1, r4
 800380e:	4638      	mov	r0, r7
 8003810:	f7fe faba 	bl	8001d88 <_malloc_r>
 8003814:	4605      	mov	r5, r0
 8003816:	2800      	cmp	r0, #0
 8003818:	d0f2      	beq.n	8003800 <_realloc_r+0x1c>
 800381a:	4631      	mov	r1, r6
 800381c:	4622      	mov	r2, r4
 800381e:	f7ff ffd3 	bl	80037c8 <memcpy>
 8003822:	4631      	mov	r1, r6
 8003824:	4638      	mov	r0, r7
 8003826:	f7fe fe4f 	bl	80024c8 <_free_r>
 800382a:	e7e9      	b.n	8003800 <_realloc_r+0x1c>
 800382c:	4635      	mov	r5, r6
 800382e:	e7e7      	b.n	8003800 <_realloc_r+0x1c>

08003830 <_malloc_usable_size_r>:
 8003830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003834:	1f18      	subs	r0, r3, #4
 8003836:	2b00      	cmp	r3, #0
 8003838:	bfbc      	itt	lt
 800383a:	580b      	ldrlt	r3, [r1, r0]
 800383c:	18c0      	addlt	r0, r0, r3
 800383e:	4770      	bx	lr

08003840 <_init>:
 8003840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003842:	bf00      	nop
 8003844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003846:	bc08      	pop	{r3}
 8003848:	469e      	mov	lr, r3
 800384a:	4770      	bx	lr

0800384c <_fini>:
 800384c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800384e:	bf00      	nop
 8003850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003852:	bc08      	pop	{r3}
 8003854:	469e      	mov	lr, r3
 8003856:	4770      	bx	lr
